{
  "reportTitle": "buzzer.click",
  "reportPageTitle": "Mochawesome Report Card",
  "stats": {
    "suites": 98,
    "tests": 202,
    "passes": 202,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-11T04:52:14.772Z",
    "end": "2017-09-11T04:52:15.455Z",
    "duration": 683,
    "testsRegistered": 202,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "AddContestantResponse",
        "suites": [
          {
            "title": "#wasSuccessful",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #wasSuccessful should throw on set value",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "ae42b892-9006-4341-9f18-d8e5bd0d2c42",
                "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #wasSuccessful should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
                "isRoot": false,
                "uuid": "4b008139-8961-4393-9b67-ee8bd8463763",
                "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "cc82a065-8552-4ea8-85e4-86149b728ccb",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #wasSuccessful should throw on set value",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "ae42b892-9006-4341-9f18-d8e5bd0d2c42",
                "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #wasSuccessful should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
                "isRoot": false,
                "uuid": "4b008139-8961-4393-9b67-ee8bd8463763",
                "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "#enquireForTeamLeaderPosition",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "094547b0-ae9d-4d53-8fe7-968c07d1ec36",
                "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "ee670545-16bb-4a40-87bb-74d0aa1a9fc5",
                "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "094547b0-ae9d-4d53-8fe7-968c07d1ec36",
                "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "ee670545-16bb-4a40-87bb-74d0aa1a9fc5",
                "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#errorMessage",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #errorMessage should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4f813d3a-4fd4-44a3-ad7a-abc586f7ca91",
                "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #errorMessage should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
                "isRoot": false,
                "uuid": "d8fbcd91-8753-4ea8-b56a-3d2f7039cc72",
                "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #errorMessage should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4f813d3a-4fd4-44a3-ad7a-abc586f7ca91",
                "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #errorMessage should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
                "isRoot": false,
                "uuid": "d8fbcd91-8753-4ea8-b56a-3d2f7039cc72",
                "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#setNotSuccessful(errorMessage)",
            "suites": [],
            "tests": [
              {
                "title": "should change the state to not successful",
                "fullTitle": "AddContestantResponse #setNotSuccessful(errorMessage) should change the state to not successful",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
                "isRoot": false,
                "uuid": "1b9c9c1d-ff61-49b3-bdbe-2fef515345bf",
                "parentUUID": "ab6cd783-d1b0-492d-9662-272fff3ef877",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "ab6cd783-d1b0-492d-9662-272fff3ef877",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should change the state to not successful",
                "fullTitle": "AddContestantResponse #setNotSuccessful(errorMessage) should change the state to not successful",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
                "isRoot": false,
                "uuid": "1b9c9c1d-ff61-49b3-bdbe-2fef515345bf",
                "parentUUID": "ab6cd783-d1b0-492d-9662-272fff3ef877",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/AddContestantResponseTests.js",
        "uuid": "e4ce5194-ed59-48d5-9212-d7e5b276efc1",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Contestant",
        "suites": [
          {
            "title": "#username",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Contestant #username should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "6687b6fe-2ab6-45e2-9122-d04ac2df6b49",
                "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #username should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "19356a6c-1991-4dd4-ab63-bbc59ff12a31",
                "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Contestant #username should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "6687b6fe-2ab6-45e2-9122-d04ac2df6b49",
                "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #username should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "19356a6c-1991-4dd4-ab63-bbc59ff12a31",
                "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#score",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Contestant #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4bd6051a-b5ac-4947-bab2-d63ee47f5e6b",
                "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #score should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0e9276ac-3118-499a-a916-36e34bebfe76",
                "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Contestant #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4bd6051a-b5ac-4947-bab2-d63ee47f5e6b",
                "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #score should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0e9276ac-3118-499a-a916-36e34bebfe76",
                "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#incrementScore()",
            "suites": [],
            "tests": [
              {
                "title": "should increment the contestant's score",
                "fullTitle": "Contestant #incrementScore() should increment the contestant's score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "af48d185-8ec6-4ff5-9d20-87b433d32817",
                "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
                "skipped": false
              },
              {
                "title": "should emit scoreUpdate event",
                "fullTitle": "Contestant #incrementScore() should emit scoreUpdate event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
                "isRoot": false,
                "uuid": "996d771c-6e69-412d-b203-5b82063d7f0f",
                "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "d894505f-6174-43d9-906f-36729f00b733",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should increment the contestant's score",
                "fullTitle": "Contestant #incrementScore() should increment the contestant's score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "af48d185-8ec6-4ff5-9d20-87b433d32817",
                "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
                "skipped": false
              },
              {
                "title": "should emit scoreUpdate event",
                "fullTitle": "Contestant #incrementScore() should emit scoreUpdate event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
                "isRoot": false,
                "uuid": "996d771c-6e69-412d-b203-5b82063d7f0f",
                "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ContestantTests.js",
        "uuid": "18c83425-7154-4e5b-9c01-24ea52b008b4",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "IdentifierUtility",
        "suites": [
          {
            "title": "#generateSessionId()",
            "suites": [],
            "tests": [
              {
                "title": "should return a non-null non-empty key",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a non-null non-empty key",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "01118a9a-629c-4726-a819-0d26d59378e4",
                "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
                "skipped": false
              },
              {
                "title": "should return a id of the correct length",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a id of the correct length",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
                "isRoot": false,
                "uuid": "0beb2371-5112-4be6-9e1b-2353253e892e",
                "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
                "skipped": false
              },
              {
                "title": "should record id so it cannot be reused.",
                "fullTitle": "IdentifierUtility #generateSessionId() should record id so it cannot be reused.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
                "isRoot": false,
                "uuid": "6f9449ea-2f93-49c6-b8b1-32b3e2bf1337",
                "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "3d67eb7e-b646-4f12-82ef-e453753a737e",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a non-null non-empty key",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a non-null non-empty key",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "01118a9a-629c-4726-a819-0d26d59378e4",
                "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
                "skipped": false
              },
              {
                "title": "should return a id of the correct length",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a id of the correct length",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
                "isRoot": false,
                "uuid": "0beb2371-5112-4be6-9e1b-2353253e892e",
                "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
                "skipped": false
              },
              {
                "title": "should record id so it cannot be reused.",
                "fullTitle": "IdentifierUtility #generateSessionId() should record id so it cannot be reused.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
                "isRoot": false,
                "uuid": "6f9449ea-2f93-49c6-b8b1-32b3e2bf1337",
                "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#generateParticipantId()",
            "suites": [],
            "tests": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #generateParticipantId() should return a UUID",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
                "isRoot": false,
                "uuid": "03a4dfa1-eb15-42e8-a7dd-e37a6470ec2d",
                "parentUUID": "cc06d067-84da-4037-aefe-ac7be4822bb1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "cc06d067-84da-4037-aefe-ac7be4822bb1",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #generateParticipantId() should return a UUID",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
                "isRoot": false,
                "uuid": "03a4dfa1-eb15-42e8-a7dd-e37a6470ec2d",
                "parentUUID": "cc06d067-84da-4037-aefe-ac7be4822bb1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#registerSessionIdsInUse(ids)",
            "suites": [],
            "tests": [
              {
                "title": "should store the ids to stop reuse",
                "fullTitle": "IdentifierUtility #registerSessionIdsInUse(ids) should store the ids to stop reuse",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "35ca5a0e-ff71-43a6-9083-75ca9e7a2e79",
                "parentUUID": "86de0c1a-3f81-4425-86d7-4d6a2752c2ed",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "86de0c1a-3f81-4425-86d7-4d6a2752c2ed",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should store the ids to stop reuse",
                "fullTitle": "IdentifierUtility #registerSessionIdsInUse(ids) should store the ids to stop reuse",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "35ca5a0e-ff71-43a6-9083-75ca9e7a2e79",
                "parentUUID": "86de0c1a-3f81-4425-86d7-4d6a2752c2ed",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#releaseSessionId(id)",
            "suites": [],
            "tests": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #releaseSessionId(id) should return a UUID",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "4fecc747-f6cd-4f17-8e25-0b0e1a3313d5",
                "parentUUID": "6865a662-021d-4d46-a3a6-c1fbe8bbb7f1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "6865a662-021d-4d46-a3a6-c1fbe8bbb7f1",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #releaseSessionId(id) should return a UUID",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "4fecc747-f6cd-4f17-8e25-0b0e1a3313d5",
                "parentUUID": "6865a662-021d-4d46-a3a6-c1fbe8bbb7f1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
        "uuid": "ed44524f-26d3-4c19-b252-a268255930ff",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "ParamCheck",
        "suites": [
          {
            "title": "#isInstanceAndTypeOf()",
            "suites": [],
            "tests": [
              {
                "title": "should return false when not referenced",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not referenced",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
                "isRoot": false,
                "uuid": "8ea57b77-84d9-4c53-8a74-46e71a8c9b4b",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return false when null",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
                "isRoot": false,
                "uuid": "ce7f46bd-7678-4ea6-ab39-2c7ced4ea764",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return false when not the correct type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not the correct type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "04b4d709-7d75-49f4-9e8f-6c437891e6a4",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return true when is a built-in type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is a built-in type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
                "isRoot": false,
                "uuid": "c7ddea77-bec6-4da4-84a7-c3ffa0228546",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return true when is user defined type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is user defined type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
                "isRoot": false,
                "uuid": "b6dfa584-4260-49da-ad16-dee5d0e4913f",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParamCheckTests.js",
            "uuid": "37826f19-a5dc-4f25-839c-67aa0d067daa",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParamCheckTests.js",
            "passes": [
              {
                "title": "should return false when not referenced",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not referenced",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
                "isRoot": false,
                "uuid": "8ea57b77-84d9-4c53-8a74-46e71a8c9b4b",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return false when null",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
                "isRoot": false,
                "uuid": "ce7f46bd-7678-4ea6-ab39-2c7ced4ea764",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return false when not the correct type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not the correct type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "04b4d709-7d75-49f4-9e8f-6c437891e6a4",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return true when is a built-in type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is a built-in type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
                "isRoot": false,
                "uuid": "c7ddea77-bec6-4da4-84a7-c3ffa0228546",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              },
              {
                "title": "should return true when is user defined type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is user defined type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
                "isRoot": false,
                "uuid": "b6dfa584-4260-49da-ad16-dee5d0e4913f",
                "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParamCheckTests.js",
        "uuid": "2b2b4703-1693-4345-a719-316df7db5d77",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParamCheckTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Participant",
        "suites": [
          {
            "title": "#id",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Participant #id should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "2ca02e0d-62fa-4b6c-8429-f56dfac56fe4",
                "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "d52e3bbb-6d39-44b2-ac7d-6ae5872fc962",
                "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Participant #id should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "2ca02e0d-62fa-4b6c-8429-f56dfac56fe4",
                "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "d52e3bbb-6d39-44b2-ac7d-6ae5872fc962",
                "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#isDisconnected",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participant #isDisconnected should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "fb00bf96-c777-4ae1-a86a-f25180c45f24",
                "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #isDisconnected should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "06cce307-8f27-4a5f-a752-85d05a143eac",
                "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "3687d21f-5946-4e59-8e08-ee9f79d92219",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participant #isDisconnected should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "fb00bf96-c777-4ae1-a86a-f25180c45f24",
                "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #isDisconnected should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "06cce307-8f27-4a5f-a752-85d05a143eac",
                "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#disconnect()",
            "suites": [],
            "tests": [
              {
                "title": "should change participant state to disconnected",
                "fullTitle": "Participant #disconnect() should change participant state to disconnected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
                "isRoot": false,
                "uuid": "4e892937-dd3e-4247-a664-befb62327c4e",
                "parentUUID": "1b7cf8e1-68df-4474-bd5c-38937becb49d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "1b7cf8e1-68df-4474-bd5c-38937becb49d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should change participant state to disconnected",
                "fullTitle": "Participant #disconnect() should change participant state to disconnected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
                "isRoot": false,
                "uuid": "4e892937-dd3e-4247-a664-befb62327c4e",
                "parentUUID": "1b7cf8e1-68df-4474-bd5c-38937becb49d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#reconnect()",
            "suites": [],
            "tests": [
              {
                "title": "should change participant state to connected",
                "fullTitle": "Participant #reconnect() should change participant state to connected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
                "isRoot": false,
                "uuid": "e18a7510-399d-4990-8feb-b90b70bcc171",
                "parentUUID": "26c9ee54-a822-46b2-87ec-018a01430ae6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "26c9ee54-a822-46b2-87ec-018a01430ae6",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should change participant state to connected",
                "fullTitle": "Participant #reconnect() should change participant state to connected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
                "isRoot": false,
                "uuid": "e18a7510-399d-4990-8feb-b90b70bcc171",
                "parentUUID": "26c9ee54-a822-46b2-87ec-018a01430ae6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParticipantTests.js",
        "uuid": "7e18b7a7-f898-40a2-abfe-5bf6509ca9aa",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Participants",
        "suites": [
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "018e6baf-a01e-4bf9-a6d1-1fe076043293",
                "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #all should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "37c9642a-e0f5-491d-b768-5d81269f0079",
                "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Participants #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "12c6ff98-cb9b-4d33-8210-5d069a4d0793",
                "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "018e6baf-a01e-4bf9-a6d1-1fe076043293",
                "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #all should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "37c9642a-e0f5-491d-b768-5d81269f0079",
                "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Participants #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "12c6ff98-cb9b-4d33-8210-5d069a4d0793",
                "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#length",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "2ed675ff-5858-43e2-bb74-9e6780dafef3",
                "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "f2a25687-4706-4ce7-81bf-1e8d59bef919",
                "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "b0649c05-948e-4418-a778-9acccb3dd83f",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "2ed675ff-5858-43e2-bb74-9e6780dafef3",
                "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "f2a25687-4706-4ce7-81bf-1e8d59bef919",
                "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contains(id)",
            "suites": [],
            "tests": [
              {
                "title": "should return true when id does exist",
                "fullTitle": "Participants #contains(id) should return true when id does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
                "isRoot": false,
                "uuid": "67f78e3c-ae13-4ad4-9037-e31bd788f068",
                "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
                "skipped": false
              },
              {
                "title": "should return false when id does not exist",
                "fullTitle": "Participants #contains(id) should return false when id does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "85e9f715-facc-4c6f-9bd6-ba36210b0fbe",
                "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should return true when id does exist",
                "fullTitle": "Participants #contains(id) should return true when id does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
                "isRoot": false,
                "uuid": "67f78e3c-ae13-4ad4-9037-e31bd788f068",
                "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
                "skipped": false
              },
              {
                "title": "should return false when id does not exist",
                "fullTitle": "Participants #contains(id) should return false when id does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "85e9f715-facc-4c6f-9bd6-ba36210b0fbe",
                "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#add(participant)",
            "suites": [],
            "tests": [
              {
                "title": "should add the given participant",
                "fullTitle": "Participants #add(participant) should add the given participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "742fb6e5-2dbc-42da-9bbb-f9269c8510a2",
                "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
                "skipped": false
              },
              {
                "title": "should error if participant with id already exists",
                "fullTitle": "Participants #add(participant) should error if participant with id already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8e8e5ce5-37b9-4ac8-985c-1cd3644a75fd",
                "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
                "skipped": false
              },
              {
                "title": "should emit add event",
                "fullTitle": "Participants #add(participant) should emit add event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
                "isRoot": false,
                "uuid": "c4e5faac-ae98-4fdd-a3d2-5a443b7a7415",
                "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "eda62c54-f958-4d95-936d-ab608fbf8bed",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should add the given participant",
                "fullTitle": "Participants #add(participant) should add the given participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "742fb6e5-2dbc-42da-9bbb-f9269c8510a2",
                "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
                "skipped": false
              },
              {
                "title": "should error if participant with id already exists",
                "fullTitle": "Participants #add(participant) should error if participant with id already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8e8e5ce5-37b9-4ac8-985c-1cd3644a75fd",
                "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
                "skipped": false
              },
              {
                "title": "should emit add event",
                "fullTitle": "Participants #add(participant) should emit add event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
                "isRoot": false,
                "uuid": "c4e5faac-ae98-4fdd-a3d2-5a443b7a7415",
                "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove(participant)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #remove(participant) should remove the existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "603c1e24-1576-4243-95f9-6aee32d3a10b",
                "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #remove(participant) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "5bd91618-d172-46b2-8e7e-304fe6313703",
                "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #remove(participant) should remove the existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "603c1e24-1576-4243-95f9-6aee32d3a10b",
                "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #remove(participant) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "5bd91618-d172-46b2-8e7e-304fe6313703",
                "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#removeById(id)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #removeById(id) should remove the existing participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "feab9811-e5b2-4a05-91df-f130264f7918",
                "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #removeById(id) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "86100728-e5ba-4c31-9944-5a70f5cfb922",
                "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #removeById(id) should remove the existing participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "feab9811-e5b2-4a05-91df-f130264f7918",
                "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #removeById(id) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "86100728-e5ba-4c31-9944-5a70f5cfb922",
                "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParticipantsTests.js",
        "uuid": "1714487d-f52b-4a7b-9589-49d2bc247a07",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Session",
        "suites": [
          {
            "title": "#constructor",
            "suites": [],
            "tests": [
              {
                "title": "should create teams",
                "fullTitle": "Session #constructor should create teams",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "f4c65e97-9818-4ee1-bd4b-3abad8e68f8b",
                "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
                "skipped": false
              },
              {
                "title": "should not create teams",
                "fullTitle": "Session #constructor should not create teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
                "isRoot": false,
                "uuid": "a1c98011-d175-4d83-9726-b5da7a573442",
                "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "b40ce8f8-5d1d-4f75-838b-811836928473",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should create teams",
                "fullTitle": "Session #constructor should create teams",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "f4c65e97-9818-4ee1-bd4b-3abad8e68f8b",
                "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
                "skipped": false
              },
              {
                "title": "should not create teams",
                "fullTitle": "Session #constructor should not create teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
                "isRoot": false,
                "uuid": "a1c98011-d175-4d83-9726-b5da7a573442",
                "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#id",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #id should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8d241aaf-6d43-40f4-ae78-22585f986c4e",
                "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #id should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "d429150e-e574-46d8-a4a5-1f4f9f0fd659",
                "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #id should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8d241aaf-6d43-40f4-ae78-22585f986c4e",
                "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #id should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "d429150e-e574-46d8-a4a5-1f4f9f0fd659",
                "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#roundsPlayed",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundsPlayed should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "c78c5853-f971-4e3b-ac96-42216f38c30a",
                "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundsPlayed should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "085e9046-b984-4e48-9d31-9a5c50fb528d",
                "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundsPlayed should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "c78c5853-f971-4e3b-ac96-42216f38c30a",
                "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundsPlayed should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "085e9046-b984-4e48-9d31-9a5c50fb528d",
                "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#previousWinners",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #previousWinners should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "ccbca893-ad22-4acf-8680-5c3d28e541e9",
                "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #previousWinners should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "3616015a-c284-4563-b2d4-d289cdb20d0f",
                "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #previousWinners should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "ccbca893-ad22-4acf-8680-5c3d28e541e9",
                "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #previousWinners should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "3616015a-c284-4563-b2d4-d289cdb20d0f",
                "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#roundWinner",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundWinner should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "7e348443-2f44-4945-bcf0-535d6c9496b5",
                "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundWinner should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "ea45b22b-b2a0-47fa-b15f-f55a5e646fb1",
                "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundWinner should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "7e348443-2f44-4945-bcf0-535d6c9496b5",
                "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundWinner should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "ea45b22b-b2a0-47fa-b15f-f55a5e646fb1",
                "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#isSessionCompleted",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "a9348375-ca7e-4a80-b32f-ddc8870e24d3",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#observers",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #observers should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "cb84b4d7-09ac-47c4-9b41-7fc084c8dcdc",
                "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #observers should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
                "isRoot": false,
                "uuid": "ed4312c1-4d34-4180-be1f-1186940a26d8",
                "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "4187db17-e5ec-444e-918b-48b656ce9b5c",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #observers should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "cb84b4d7-09ac-47c4-9b41-7fc084c8dcdc",
                "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #observers should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
                "isRoot": false,
                "uuid": "ed4312c1-4d34-4180-be1f-1186940a26d8",
                "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contestants",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a7ce6faf-5c9a-4d64-b025-2dd19a110af1",
                "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #contestants should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
                "isRoot": false,
                "uuid": "745d32bf-ce48-47e4-94be-c823de4e7c00",
                "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a7ce6faf-5c9a-4d64-b025-2dd19a110af1",
                "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #contestants should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
                "isRoot": false,
                "uuid": "745d32bf-ce48-47e4-94be-c823de4e7c00",
                "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#host",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #host should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "469ba530-4274-4234-a119-0e20359bc8cb",
                "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #host should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
                "isRoot": false,
                "uuid": "1da02c1f-b231-4fdf-be0d-6e03aada7fd9",
                "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "426f7256-d535-4e9e-89c5-5665c4b94629",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #host should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "469ba530-4274-4234-a119-0e20359bc8cb",
                "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #host should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
                "isRoot": false,
                "uuid": "1da02c1f-b231-4fdf-be0d-6e03aada7fd9",
                "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#currentState",
            "suites": [],
            "tests": [
              {
                "title": "should get value",
                "fullTitle": "Session #currentState should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "7c7e0f33-ebfd-43cc-ab8d-b625e9ae6196",
                "parentUUID": "e5c7224a-84ca-4e96-a63f-086d41ce6d5d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "e5c7224a-84ca-4e96-a63f-086d41ce6d5d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should get value",
                "fullTitle": "Session #currentState should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "7c7e0f33-ebfd-43cc-ab8d-b625e9ae6196",
                "parentUUID": "e5c7224a-84ca-4e96-a63f-086d41ce6d5d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#incrementRoundsPlayed()",
            "suites": [],
            "tests": [
              {
                "title": "should increment rounds played",
                "fullTitle": "Session #incrementRoundsPlayed() should increment rounds played",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "6866782b-d738-43d0-8bc4-2d9aa1b2fbf5",
                "parentUUID": "6a051b5c-3a4f-4cba-bb2a-0307d08cac97",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "6a051b5c-3a4f-4cba-bb2a-0307d08cac97",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should increment rounds played",
                "fullTitle": "Session #incrementRoundsPlayed() should increment rounds played",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "6866782b-d738-43d0-8bc4-2d9aa1b2fbf5",
                "parentUUID": "6a051b5c-3a4f-4cba-bb2a-0307d08cac97",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#addContestant(contestant)",
            "suites": [
              {
                "title": "when in individual mode",
                "suites": [],
                "tests": [
                  {
                    "title": "should add contestant when session is not full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should add contestant when session is not full",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "ce52b663-3b9e-4800-be7e-733689b9bbf6",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when session is full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when session is full",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
                    "isRoot": false,
                    "uuid": "97ec19ee-fa00-4d23-aca9-fa983bf6562f",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "2ce33a21-27e5-4b78-ac5b-0293a5824f9f",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "BUG# username case should not matter",
                    "fullTitle": "#addContestant(contestant) when in individual mode BUG# username case should not matter",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "7ffff797-d78e-4164-9f01-cd0a809deb09",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "fullTitle": "#addContestant(contestant) when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "timedOut": false,
                    "duration": 452,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
                    "isRoot": false,
                    "uuid": "203fe99a-f949-4ae1-83de-8e6d9ca887ba",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should add contestant when session is not full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should add contestant when session is not full",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "ce52b663-3b9e-4800-be7e-733689b9bbf6",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when session is full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when session is full",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
                    "isRoot": false,
                    "uuid": "97ec19ee-fa00-4d23-aca9-fa983bf6562f",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "2ce33a21-27e5-4b78-ac5b-0293a5824f9f",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "BUG# username case should not matter",
                    "fullTitle": "#addContestant(contestant) when in individual mode BUG# username case should not matter",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "7ffff797-d78e-4164-9f01-cd0a809deb09",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  },
                  {
                    "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "fullTitle": "#addContestant(contestant) when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "timedOut": false,
                    "duration": 452,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
                    "isRoot": false,
                    "uuid": "203fe99a-f949-4ae1-83de-8e6d9ca887ba",
                    "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 453
              },
              {
                "title": "when in team mode",
                "suites": [],
                "tests": [
                  {
                    "title": "should add contestant when teams is not full",
                    "fullTitle": "#addContestant(contestant) when in team mode should add contestant when teams is not full",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "b30f61eb-efe5-468a-89e6-f6a45122c5a7",
                    "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when teams are full",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "157f1c9e-f2c4-4c80-ad1d-daa34a28dc3a",
                    "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "bde6f50d-ca0d-4a4c-a4ab-d945cbd3e3a2",
                    "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should add contestant when teams is not full",
                    "fullTitle": "#addContestant(contestant) when in team mode should add contestant when teams is not full",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "b30f61eb-efe5-468a-89e6-f6a45122c5a7",
                    "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when teams are full",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "157f1c9e-f2c4-4c80-ad1d-daa34a28dc3a",
                    "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "bde6f50d-ca0d-4a4c-a4ab-d945cbd3e3a2",
                    "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              }
            ],
            "tests": [
              {
                "title": "should not allow a contestant username with bad words",
                "fullTitle": "Session #addContestant(contestant) should not allow a contestant username with bad words",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
                "isRoot": false,
                "uuid": "5087e295-fd45-4054-ad15-e3f6a6323989",
                "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
                "skipped": false
              },
              {
                "title": "should not allow when username is empty",
                "fullTitle": "Session #addContestant(contestant) should not allow when username is empty",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
                "isRoot": false,
                "uuid": "5c6eb269-428f-468b-8ac6-5832bf82a554",
                "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
                "skipped": false
              },
              {
                "title": "should trim username",
                "fullTitle": "Session #addContestant(contestant) should trim username",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
                "isRoot": false,
                "uuid": "4a2c01bc-ee81-4924-ae90-5365f286d3c2",
                "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should not allow a contestant username with bad words",
                "fullTitle": "Session #addContestant(contestant) should not allow a contestant username with bad words",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
                "isRoot": false,
                "uuid": "5087e295-fd45-4054-ad15-e3f6a6323989",
                "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
                "skipped": false
              },
              {
                "title": "should not allow when username is empty",
                "fullTitle": "Session #addContestant(contestant) should not allow when username is empty",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
                "isRoot": false,
                "uuid": "5c6eb269-428f-468b-8ac6-5832bf82a554",
                "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
                "skipped": false
              },
              {
                "title": "should trim username",
                "fullTitle": "Session #addContestant(contestant) should trim username",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
                "isRoot": false,
                "uuid": "4a2c01bc-ee81-4924-ae90-5365f286d3c2",
                "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5
          },
          {
            "title": "#subscribeForStateChange(event, callback)",
            "suites": [],
            "tests": [
              {
                "title": "should subscribe callback to the correct event",
                "fullTitle": "Session #subscribeForStateChange(event, callback) should subscribe callback to the correct event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
                "isRoot": false,
                "uuid": "de61a53a-2825-44bc-9b73-15d6b5d24c3f",
                "parentUUID": "4332b873-d978-4718-885a-f9ae00260698",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "4332b873-d978-4718-885a-f9ae00260698",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should subscribe callback to the correct event",
                "fullTitle": "Session #subscribeForStateChange(event, callback) should subscribe callback to the correct event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
                "isRoot": false,
                "uuid": "de61a53a-2825-44bc-9b73-15d6b5d24c3f",
                "parentUUID": "4332b873-d978-4718-885a-f9ae00260698",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryBuzzerPressRegister(contestantId)",
            "suites": [],
            "tests": [
              {
                "title": "should register when state is ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should register when state is ready",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
                "isRoot": false,
                "uuid": "2b7e752e-d35d-4e1b-aab9-8d970d185b61",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not register when state is not ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when state is not ready",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
                "isRoot": false,
                "uuid": "7d5ff9ee-54a3-494f-9644-c8fa20f441e8",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not register when contestant does not exist",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "0183a12f-0f31-42ac-b6ce-8467c3a2db5b",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not replace previous round winner with pending contestant",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                "isRoot": false,
                "uuid": "4b53ce9d-f7c9-46f9-bd37-58bf3ce9632b",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not add previous round winner to winners list",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "61844034-b58d-4547-8ff2-e7347c4e495d",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "b64d089d-6718-45e2-b49b-f38175c94e84",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should register when state is ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should register when state is ready",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
                "isRoot": false,
                "uuid": "2b7e752e-d35d-4e1b-aab9-8d970d185b61",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not register when state is not ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when state is not ready",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
                "isRoot": false,
                "uuid": "7d5ff9ee-54a3-494f-9644-c8fa20f441e8",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not register when contestant does not exist",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "0183a12f-0f31-42ac-b6ce-8467c3a2db5b",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not replace previous round winner with pending contestant",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                "isRoot": false,
                "uuid": "4b53ce9d-f7c9-46f9-bd37-58bf3ce9632b",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              },
              {
                "title": "should not add previous round winner to winners list",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "61844034-b58d-4547-8ff2-e7347c4e495d",
                "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryBuzzerAction(action)",
            "suites": [
              {
                "title": "action->ACCEPT",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
                    "isRoot": false,
                    "uuid": "5cf5aa6f-e6a6-4cd3-aa73-b4cbb404b8f0",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
                    "isRoot": false,
                    "uuid": "52df8660-42ce-4c5b-bf54-a2d2db7cb724",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "bcd5b137-65bb-448b-9121-db0b75962e1e",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's team score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's team score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "d9014c49-5701-4541-a6cc-dd4189c88b61",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "ec6aac35-af4c-46ba-9377-d6d4cf363940",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "41eeb7ec-ce2c-4459-9485-7c7e2dae5fcd",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should clear pending winner",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should clear pending winner",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
                    "isRoot": false,
                    "uuid": "555b0068-9654-4841-b4c6-9b7d7a726cbf",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
                    "isRoot": false,
                    "uuid": "5cf5aa6f-e6a6-4cd3-aa73-b4cbb404b8f0",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
                    "isRoot": false,
                    "uuid": "52df8660-42ce-4c5b-bf54-a2d2db7cb724",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "bcd5b137-65bb-448b-9121-db0b75962e1e",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's team score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's team score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "d9014c49-5701-4541-a6cc-dd4189c88b61",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "ec6aac35-af4c-46ba-9377-d6d4cf363940",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "41eeb7ec-ce2c-4459-9485-7c7e2dae5fcd",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  },
                  {
                    "title": "should clear pending winner",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should clear pending winner",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
                    "isRoot": false,
                    "uuid": "555b0068-9654-4841-b4c6-9b7d7a726cbf",
                    "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 4
              },
              {
                "title": "action->REJECT",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
                    "isRoot": false,
                    "uuid": "3c28603d-cfa3-4b80-ae71-ad687b7a99fa",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
                    "isRoot": false,
                    "uuid": "bf051007-f384-49cc-a1da-d265afccca01",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should not replace round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not replace round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "e7e10499-4232-4d1d-90ff-dbbb775b1e07",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should not update pending contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not update pending contestant's score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
                    "isRoot": false,
                    "uuid": "b4c4542f-d659-4626-b602-9d340d56675e",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should add round winner to previous winners list",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should add round winner to previous winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "2b83bbdc-d16e-4c17-9d14-4cdd68cb0365",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "69cd6d94-75fa-43ca-a807-a4e35f546162",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "8b8b208b-bd54-445a-8b58-7973b4897324",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
                    "isRoot": false,
                    "uuid": "3c28603d-cfa3-4b80-ae71-ad687b7a99fa",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
                    "isRoot": false,
                    "uuid": "bf051007-f384-49cc-a1da-d265afccca01",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should not replace round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not replace round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "e7e10499-4232-4d1d-90ff-dbbb775b1e07",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should not update pending contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not update pending contestant's score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
                    "isRoot": false,
                    "uuid": "b4c4542f-d659-4626-b602-9d340d56675e",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should add round winner to previous winners list",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should add round winner to previous winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "2b83bbdc-d16e-4c17-9d14-4cdd68cb0365",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "69cd6d94-75fa-43ca-a807-a4e35f546162",
                    "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              },
              {
                "title": "action->RESET",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "5cb15633-fc2e-4bcb-8006-8d91bc46d61e",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "ca61f632-efb6-418e-b344-dfb104d131d0",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "ddf04f06-91a4-4180-9e3e-f7017747da3c",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "fba8e54f-dd4e-4aee-b99a-768b5205b579",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "d1fee153-1eb5-4a8b-90d9-166d1bb7e9a8",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "4260d1f2-4506-4324-8952-20863c652b8a",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "5cb15633-fc2e-4bcb-8006-8d91bc46d61e",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "ca61f632-efb6-418e-b344-dfb104d131d0",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "ddf04f06-91a4-4180-9e3e-f7017747da3c",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "fba8e54f-dd4e-4aee-b99a-768b5205b579",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "d1fee153-1eb5-4a8b-90d9-166d1bb7e9a8",
                    "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "action->DISABLE",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "24277c56-2c4d-41a2-879b-fc611cc269b9",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "e834fc64-8971-4a82-b3eb-a1f6ee028219",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "590c8512-6e82-4a55-ab9e-9c1a73cb3024",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "2b892a38-a3ce-46e1-a001-ed1fda614caf",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should change game state to buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
                    "isRoot": false,
                    "uuid": "f0c746f1-2c2c-4194-bd3c-3bbfc306a907",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "24277c56-2c4d-41a2-879b-fc611cc269b9",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "e834fc64-8971-4a82-b3eb-a1f6ee028219",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "590c8512-6e82-4a55-ab9e-9c1a73cb3024",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "2b892a38-a3ce-46e1-a001-ed1fda614caf",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should change game state to buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
                    "isRoot": false,
                    "uuid": "f0c746f1-2c2c-4194-bd3c-3bbfc306a907",
                    "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "action->ENABLE",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should allow when game state is buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "bd1c24d3-6fd2-4ab9-a389-1061524a2b00",
                    "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should not allow when game state is not buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
                    "isRoot": false,
                    "uuid": "bd075d1d-e19b-43d7-a960-53e7dc097ea1",
                    "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should change game state to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "cf97c475-1205-43dc-94d4-88e0bd312864",
                    "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "f0ae2122-4570-45fa-af61-98b5711350d3",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should allow when game state is buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "bd1c24d3-6fd2-4ab9-a389-1061524a2b00",
                    "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should not allow when game state is not buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
                    "isRoot": false,
                    "uuid": "bd075d1d-e19b-43d7-a960-53e7dc097ea1",
                    "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should change game state to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "cf97c475-1205-43dc-94d4-88e0bd312864",
                    "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "17cfe8e2-2380-4bbc-8126-b52d385c5600",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#pendingWinner",
            "suites": [],
            "tests": [
              {
                "title": "should return the pending winner",
                "fullTitle": "Session #pendingWinner should return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
                "isRoot": false,
                "uuid": "6cd681f5-f8fb-4516-97dd-cbd2787f57ec",
                "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
                "skipped": false
              },
              {
                "title": "should not return the pending winner",
                "fullTitle": "Session #pendingWinner should not return the pending winner",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
                "isRoot": false,
                "uuid": "72492512-9eba-4ef2-96f1-7bc0df7d91f1",
                "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "bee99667-f88e-4806-806c-f4e658ca419e",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should return the pending winner",
                "fullTitle": "Session #pendingWinner should return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
                "isRoot": false,
                "uuid": "6cd681f5-f8fb-4516-97dd-cbd2787f57ec",
                "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
                "skipped": false
              },
              {
                "title": "should not return the pending winner",
                "fullTitle": "Session #pendingWinner should not return the pending winner",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
                "isRoot": false,
                "uuid": "72492512-9eba-4ef2-96f1-7bc0df7d91f1",
                "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#updateSessionName(name)",
            "suites": [],
            "tests": [
              {
                "title": "should update session name",
                "fullTitle": "Session #updateSessionName(name) should update session name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
                "isRoot": false,
                "uuid": "ee2f7d07-8fbe-4411-8c3e-ee0b1252bf15",
                "parentUUID": "64b2c568-8471-48df-8d32-ebe6fd20d411",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "64b2c568-8471-48df-8d32-ebe6fd20d411",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update session name",
                "fullTitle": "Session #updateSessionName(name) should update session name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
                "isRoot": false,
                "uuid": "ee2f7d07-8fbe-4411-8c3e-ee0b1252bf15",
                "parentUUID": "64b2c568-8471-48df-8d32-ebe6fd20d411",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#updateMaxContestants(maxContestants)",
            "suites": [],
            "tests": [
              {
                "title": "should update max contestants",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should update max contestants",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "1647fc6a-6522-4294-af29-8a71cbadc9c4",
                "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
                "skipped": false
              },
              {
                "title": "should not allow below current connected amount",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should not allow below current connected amount",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "0b51c26e-48ec-4e9f-b780-e0ab57008a6b",
                "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update max contestants",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should update max contestants",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "1647fc6a-6522-4294-af29-8a71cbadc9c4",
                "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
                "skipped": false
              },
              {
                "title": "should not allow below current connected amount",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should not allow below current connected amount",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "0b51c26e-48ec-4e9f-b780-e0ab57008a6b",
                "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#updateTeamSize(teamSize)",
            "suites": [],
            "tests": [
              {
                "title": "should update team size",
                "fullTitle": "Session #updateTeamSize(teamSize) should update team size",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "25ef3a5e-c868-445a-8c77-caf81789fa5a",
                "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateTeamSize(teamSize) should not allow below current setting",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "8b44a8ae-4ebd-4391-976e-430a7888a97b",
                "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "45bb19a7-6af1-4118-9483-3ac621953677",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update team size",
                "fullTitle": "Session #updateTeamSize(teamSize) should update team size",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "25ef3a5e-c868-445a-8c77-caf81789fa5a",
                "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateTeamSize(teamSize) should not allow below current setting",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "8b44a8ae-4ebd-4391-976e-430a7888a97b",
                "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#updateMaxTeams(maxTeams)",
            "suites": [],
            "tests": [
              {
                "title": "should update max teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should update max teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "86734b3a-a4c8-4303-b892-ab48c5bbbe0b",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              },
              {
                "title": "should add teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should add teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "5b8adee0-1b2e-4dc4-b8e2-95227a132b6e",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow below current setting",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "74afbf86-3db3-4b48-8592-626ee42f2650",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              },
              {
                "title": "should not allow if teams are PLAYER_CHOICE",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "dcf7bdd4-8b34-46b1-914b-06112a285a22",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "0c1f5d74-e5df-4843-beae-a959760f5124",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update max teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should update max teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "86734b3a-a4c8-4303-b892-ab48c5bbbe0b",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              },
              {
                "title": "should add teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should add teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "5b8adee0-1b2e-4dc4-b8e2-95227a132b6e",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow below current setting",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "74afbf86-3db3-4b48-8592-626ee42f2650",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              },
              {
                "title": "should not allow if teams are PLAYER_CHOICE",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "dcf7bdd4-8b34-46b1-914b-06112a285a22",
                "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SessionTests.js",
        "uuid": "a666ca9e-414a-41e5-85c2-24d984fe3f55",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Sessions",
        "suites": [
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Sessions #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8002ec3a-04f5-46b1-b168-d8434d83afc1",
                "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Sessions #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "93da65fe-4160-4a94-80fb-55511b7dfb0a",
                "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Sessions #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "dbe4194b-526e-44c2-948d-bde01b0169f0",
                "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "b524515d-a2a9-4667-92f7-056c7c1db15d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Sessions #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8002ec3a-04f5-46b1-b168-d8434d83afc1",
                "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Sessions #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "93da65fe-4160-4a94-80fb-55511b7dfb0a",
                "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Sessions #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "dbe4194b-526e-44c2-948d-bde01b0169f0",
                "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#add(host, settings)",
            "suites": [],
            "tests": [
              {
                "title": "add and return session",
                "fullTitle": "Sessions #add(host, settings) add and return session",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
                "isRoot": false,
                "uuid": "07068ffe-eeae-47a7-882b-8b231ca4b5f5",
                "parentUUID": "c159301c-20d1-4789-8e72-2802a2f644a5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "c159301c-20d1-4789-8e72-2802a2f644a5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "add and return session",
                "fullTitle": "Sessions #add(host, settings) add and return session",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
                "isRoot": false,
                "uuid": "07068ffe-eeae-47a7-882b-8b231ca4b5f5",
                "parentUUID": "c159301c-20d1-4789-8e72-2802a2f644a5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#getById(id)",
            "suites": [],
            "tests": [
              {
                "title": "when given valid id should return session",
                "fullTitle": "Sessions #getById(id) when given valid id should return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
                "isRoot": false,
                "uuid": "504cb40d-b4a5-40da-ad4c-a52aed8307ec",
                "parentUUID": "026d8756-b072-41ae-8c55-6dfede301a25",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "026d8756-b072-41ae-8c55-6dfede301a25",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "when given valid id should return session",
                "fullTitle": "Sessions #getById(id) when given valid id should return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
                "isRoot": false,
                "uuid": "504cb40d-b4a5-40da-ad4c-a52aed8307ec",
                "parentUUID": "026d8756-b072-41ae-8c55-6dfede301a25",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#purgeCompleted()",
            "suites": [],
            "tests": [
              {
                "title": "should remove complete sc",
                "fullTitle": "Sessions #purgeCompleted() should remove complete sc",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "e08e9149-cbac-4d31-9870-2f7ce331021a",
                "parentUUID": "c006bfd9-74a1-4442-b7d4-af719687477c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "c006bfd9-74a1-4442-b7d4-af719687477c",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "should remove complete sc",
                "fullTitle": "Sessions #purgeCompleted() should remove complete sc",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "e08e9149-cbac-4d31-9870-2f7ce331021a",
                "parentUUID": "c006bfd9-74a1-4442-b7d4-af719687477c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SessionsTests.js",
        "uuid": "63e21a60-5f13-4dd4-a1dc-8c164743a9ff",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Settings",
        "suites": [
          {
            "title": "#hasTeams",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #hasTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "41e0159c-a523-48dd-8f61-0bc114121679",
                "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #hasTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "38d8ad8a-415f-494d-ac5d-3719503cd67a",
                "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #hasTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "41e0159c-a523-48dd-8f61-0bc114121679",
                "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #hasTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "38d8ad8a-415f-494d-ac5d-3719503cd67a",
                "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamSize",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamSize should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "634eb8b3-85bb-4a0e-844d-2a4c27371650",
                "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamSize should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0c85ed5a-8ca2-408f-ba52-648487a6bb16",
                "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamSize should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "634eb8b3-85bb-4a0e-844d-2a4c27371650",
                "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamSize should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0c85ed5a-8ca2-408f-ba52-648487a6bb16",
                "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#maxTeams",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "616b3251-71f2-4032-9342-346bd2d45e71",
                "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "50efce33-6efd-4d07-a66f-c2f52b779308",
                "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "616b3251-71f2-4032-9342-346bd2d45e71",
                "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "50efce33-6efd-4d07-a66f-c2f52b779308",
                "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamLeaderSelectionMethod",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "36ae8408-cc3e-4285-876a-14e8c3216654",
                "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamLeaderSelectionMethod should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a9fc9a45-d609-4f2c-bf31-ceb53a1b6a48",
                "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "37bab7dd-b984-429b-809f-2dba896f9c4b",
                "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "36ae8408-cc3e-4285-876a-14e8c3216654",
                "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamLeaderSelectionMethod should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a9fc9a45-d609-4f2c-bf31-ceb53a1b6a48",
                "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "37bab7dd-b984-429b-809f-2dba896f9c4b",
                "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamNameEdit",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNameEdit should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "eb56171d-566a-4fc2-92a5-08b702418c49",
                "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamNameEdit should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "fcf377f5-6450-4a45-8c46-7efdd39fe374",
                "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNameEdit should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "24319279-4d83-4d91-926d-f7f95e9da17d",
                "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNameEdit should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "eb56171d-566a-4fc2-92a5-08b702418c49",
                "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamNameEdit should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "fcf377f5-6450-4a45-8c46-7efdd39fe374",
                "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNameEdit should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "24319279-4d83-4d91-926d-f7f95e9da17d",
                "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#maxContestants",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxContestants should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "5ec71d35-9ff0-4039-8b9f-8904a6b473b3",
                "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxContestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "d301b4ce-0c6e-4aa5-885a-57b412b3e7a8",
                "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "1f372a24-a47b-482a-8966-961bb9f5a68b",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxContestants should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "5ec71d35-9ff0-4039-8b9f-8904a6b473b3",
                "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxContestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "d301b4ce-0c6e-4aa5-885a-57b412b3e7a8",
                "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#sessionName",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #sessionName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "573e2c46-d124-4f6d-a2f7-fe6ed2244951",
                "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #sessionName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "95b10617-7d57-4d43-9a71-7ac74dea2216",
                "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #sessionName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "573e2c46-d124-4f6d-a2f7-fe6ed2244951",
                "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #sessionName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "95b10617-7d57-4d43-9a71-7ac74dea2216",
                "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamNames",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNames should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "d0f9592e-7231-4ee2-a71d-9690154c2839",
                "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNames should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "17051c86-f480-492c-a711-81ff96cbd99d",
                "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "95ba3f80-c0ca-410a-b038-1438cf38129c",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNames should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "d0f9592e-7231-4ee2-a71d-9690154c2839",
                "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNames should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "17051c86-f480-492c-a711-81ff96cbd99d",
                "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SettingsTests.js",
        "uuid": "0b2c0429-b3c0-4a47-8829-cb272a14fa42",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "TeamFactory",
        "suites": [
          {
            "title": "#create(teams, settings)",
            "suites": [],
            "tests": [
              {
                "title": "should throw when settings.maxTeams is less than 1",
                "fullTitle": "TeamFactory #create(teams, settings) should throw when settings.maxTeams is less than 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "c9f08ba3-4b35-4ba1-90a3-be12ae1fe3fb",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should create the correct amount of teams",
                "fullTitle": "TeamFactory #create(teams, settings) should create the correct amount of teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "88a9e530-8a4b-4d22-89cd-ea6fe1cbce98",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should not fail with a large team size",
                "fullTitle": "TeamFactory #create(teams, settings) should not fail with a large team size",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
                "isRoot": false,
                "uuid": "8c2058fd-6528-487f-9764-b8a8260d02d5",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should use settings.teamNames first, before random selection",
                "fullTitle": "TeamFactory #create(teams, settings) should use settings.teamNames first, before random selection",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "34104e71-7ddd-4f13-93df-5c1822e65c3f",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should only create a single team when using unlimited teams",
                "fullTitle": "TeamFactory #create(teams, settings) should only create a single team when using unlimited teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "ced9266e-cb4d-4a6e-97b7-9315336bb693",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamFactoryTests.js",
            "uuid": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
            "passes": [
              {
                "title": "should throw when settings.maxTeams is less than 1",
                "fullTitle": "TeamFactory #create(teams, settings) should throw when settings.maxTeams is less than 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "c9f08ba3-4b35-4ba1-90a3-be12ae1fe3fb",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should create the correct amount of teams",
                "fullTitle": "TeamFactory #create(teams, settings) should create the correct amount of teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "88a9e530-8a4b-4d22-89cd-ea6fe1cbce98",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should not fail with a large team size",
                "fullTitle": "TeamFactory #create(teams, settings) should not fail with a large team size",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
                "isRoot": false,
                "uuid": "8c2058fd-6528-487f-9764-b8a8260d02d5",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should use settings.teamNames first, before random selection",
                "fullTitle": "TeamFactory #create(teams, settings) should use settings.teamNames first, before random selection",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "34104e71-7ddd-4f13-93df-5c1822e65c3f",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              },
              {
                "title": "should only create a single team when using unlimited teams",
                "fullTitle": "TeamFactory #create(teams, settings) should only create a single team when using unlimited teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "ced9266e-cb4d-4a6e-97b7-9315336bb693",
                "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 24
          },
          {
            "title": "#add(teams, settings)",
            "suites": [],
            "tests": [
              {
                "title": "should add a team",
                "fullTitle": "TeamFactory #add(teams, settings) should add a team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "367475bf-7948-42ef-abcd-a9a30c422421",
                "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
                "skipped": false
              },
              {
                "title": "should reuse team names specified in settings",
                "fullTitle": "TeamFactory #add(teams, settings) should reuse team names specified in settings",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
                "isRoot": false,
                "uuid": "843349c4-cf5d-45f2-9ab4-dde1a3873b24",
                "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
                "skipped": false
              },
              {
                "title": "should factor in team names which are already in use",
                "fullTitle": "TeamFactory #add(teams, settings) should factor in team names which are already in use",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
                "isRoot": false,
                "uuid": "caee2cee-cac1-4815-a941-1f9f0e70b428",
                "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamFactoryTests.js",
            "uuid": "58f549c5-ba24-425a-8279-c10ebf01aea0",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
            "passes": [
              {
                "title": "should add a team",
                "fullTitle": "TeamFactory #add(teams, settings) should add a team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "367475bf-7948-42ef-abcd-a9a30c422421",
                "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
                "skipped": false
              },
              {
                "title": "should reuse team names specified in settings",
                "fullTitle": "TeamFactory #add(teams, settings) should reuse team names specified in settings",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
                "isRoot": false,
                "uuid": "843349c4-cf5d-45f2-9ab4-dde1a3873b24",
                "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
                "skipped": false
              },
              {
                "title": "should factor in team names which are already in use",
                "fullTitle": "TeamFactory #add(teams, settings) should factor in team names which are already in use",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
                "isRoot": false,
                "uuid": "caee2cee-cac1-4815-a941-1f9f0e70b428",
                "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 107
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamFactoryTests.js",
        "uuid": "245ca60c-7f29-46f1-9f87-add8a8350f6f",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Team",
        "suites": [
          {
            "title": "#teamName",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "6bee4fa1-64cb-4995-9693-7a540cc66ab5",
                "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "92fa0aa5-bdb1-4eb9-9c51-00c2f2d05ebf",
                "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "6bee4fa1-64cb-4995-9693-7a540cc66ab5",
                "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "92fa0aa5-bdb1-4eb9-9c51-00c2f2d05ebf",
                "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamLeader",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamLeader should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "c168eba5-f198-4f5e-a813-a00d6e81105b",
                "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamLeader should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "964b7b54-347d-4fc7-8610-3e032c52808f",
                "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamLeader should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "c168eba5-f198-4f5e-a813-a00d6e81105b",
                "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamLeader should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "964b7b54-347d-4fc7-8610-3e032c52808f",
                "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#score",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6d925f7e-161d-4698-a3da-94489e5fa050",
                "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "b4164fdd-2608-47c2-a58d-7d680646f53c",
                "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "acfb9ca3-1075-4417-a6bd-68bea28de089",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6d925f7e-161d-4698-a3da-94489e5fa050",
                "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "b4164fdd-2608-47c2-a58d-7d680646f53c",
                "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contestants",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "26d4207d-8fa5-4e7d-95b3-15e538be0ced",
                "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
                "isRoot": false,
                "uuid": "a44af8df-fb93-46d7-81e6-4544ee21cc5a",
                "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "26d4207d-8fa5-4e7d-95b3-15e538be0ced",
                "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
                "isRoot": false,
                "uuid": "a44af8df-fb93-46d7-81e6-4544ee21cc5a",
                "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "when a contestant scores",
            "suites": [],
            "tests": [
              {
                "title": "should update the teams score",
                "fullTitle": "Team when a contestant scores should update the teams score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "19a4b326-1ab5-487f-a32d-d93f057a96a2",
                "parentUUID": "8dfdf8a5-8dd5-401f-976e-d5c91fdab770",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "8dfdf8a5-8dd5-401f-976e-d5c91fdab770",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should update the teams score",
                "fullTitle": "Team when a contestant scores should update the teams score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "19a4b326-1ab5-487f-a32d-d93f057a96a2",
                "parentUUID": "8dfdf8a5-8dd5-401f-976e-d5c91fdab770",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "tryAssignTeamLeader(contestant, hostOverride)",
            "suites": [],
            "tests": [
              {
                "title": "should allow it when no team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "72955730-ae4f-4c2d-9d3b-fa69044cbab6",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              },
              {
                "title": "should not allow it when a team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
                "isRoot": false,
                "uuid": "f9c5b1cf-4ffe-4e7f-8aa4-b5af77ec2bb1",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              },
              {
                "title": "should not allow it when a contestant is not in team",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
                "isRoot": false,
                "uuid": "96998fa8-4149-4268-a83b-b218c3963208",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              },
              {
                "title": "should allow it when a team leader is set and host override is flagged",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "0609abf1-2ea4-4334-b9b8-f72f6b8ebe54",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should allow it when no team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "72955730-ae4f-4c2d-9d3b-fa69044cbab6",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              },
              {
                "title": "should not allow it when a team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
                "isRoot": false,
                "uuid": "f9c5b1cf-4ffe-4e7f-8aa4-b5af77ec2bb1",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              },
              {
                "title": "should not allow it when a contestant is not in team",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
                "isRoot": false,
                "uuid": "96998fa8-4149-4268-a83b-b218c3963208",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              },
              {
                "title": "should allow it when a team leader is set and host override is flagged",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "0609abf1-2ea4-4334-b9b8-f72f6b8ebe54",
                "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryChangeTeamName(teamName, settings, hostOverride)",
            "suites": [
              {
                "title": "when host override",
                "suites": [],
                "tests": [
                  {
                    "title": "should change name when request is valid",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when request is valid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "a2eb5231-63ac-44f3-95c0-53b7178ddc6a",
                    "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                    "skipped": false
                  },
                  {
                    "title": "should change name when setting do not allow it",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when setting do not allow it",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "76829668-dac9-4b71-bc4b-7d2ada0cd9be",
                    "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                    "skipped": false
                  },
                  {
                    "title": "should change name when name contains profanity",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when name contains profanity",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "5a10a99e-672b-432b-b045-95f5d4acfe5f",
                    "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamTests.js",
                "uuid": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
                "passes": [
                  {
                    "title": "should change name when request is valid",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when request is valid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "a2eb5231-63ac-44f3-95c0-53b7178ddc6a",
                    "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                    "skipped": false
                  },
                  {
                    "title": "should change name when setting do not allow it",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when setting do not allow it",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "76829668-dac9-4b71-bc4b-7d2ada0cd9be",
                    "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                    "skipped": false
                  },
                  {
                    "title": "should change name when name contains profanity",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when name contains profanity",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "5a10a99e-672b-432b-b045-95f5d4acfe5f",
                    "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "should change name when request is valid",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                "isRoot": false,
                "uuid": "ffe3b6e0-c3ad-4790-b5a6-135adc516652",
                "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
                "skipped": false
              },
              {
                "title": "should not change name when setting do not allow it",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "bd19cf7c-f61b-4a4a-bb22-2c091af2224e",
                "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
                "skipped": false
              },
              {
                "title": "should not change name when name contains profanity",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "c501e8be-29c6-4cec-9f2f-1f3fb5982ee3",
                "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should change name when request is valid",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                "isRoot": false,
                "uuid": "ffe3b6e0-c3ad-4790-b5a6-135adc516652",
                "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
                "skipped": false
              },
              {
                "title": "should not change name when setting do not allow it",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "bd19cf7c-f61b-4a4a-bb22-2c091af2224e",
                "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
                "skipped": false
              },
              {
                "title": "should not change name when name contains profanity",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "c501e8be-29c6-4cec-9f2f-1f3fb5982ee3",
                "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "getContestantByUsername(username)",
            "suites": [],
            "tests": [
              {
                "title": "should get contestant when contest with username exists",
                "fullTitle": "Team getContestantByUsername(username) should get contestant when contest with username exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
                "isRoot": false,
                "uuid": "0a09dd63-b26c-4fa8-b443-684ea5bad871",
                "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
                "skipped": false
              },
              {
                "title": "should not get contestant when contest with username does not exist",
                "fullTitle": "Team getContestantByUsername(username) should not get contestant when contest with username does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
                "isRoot": false,
                "uuid": "1367f099-32ad-46a6-91a0-bafb85de51dd",
                "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "9e0e8376-5432-473d-aa88-548e7f766576",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should get contestant when contest with username exists",
                "fullTitle": "Team getContestantByUsername(username) should get contestant when contest with username exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
                "isRoot": false,
                "uuid": "0a09dd63-b26c-4fa8-b443-684ea5bad871",
                "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
                "skipped": false
              },
              {
                "title": "should not get contestant when contest with username does not exist",
                "fullTitle": "Team getContestantByUsername(username) should not get contestant when contest with username does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
                "isRoot": false,
                "uuid": "1367f099-32ad-46a6-91a0-bafb85de51dd",
                "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamTests.js",
        "uuid": "5cf95919-c2d6-40e5-a6a8-79f1784483ad",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Teams",
        "suites": [
          {
            "title": "#contains(teamName)",
            "suites": [],
            "tests": [
              {
                "title": "should return true when team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return true when team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
                "isRoot": false,
                "uuid": "0475a627-e946-4422-9bb5-3e5283a37d37",
                "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
                "skipped": false
              },
              {
                "title": "should return false when no team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return false when no team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "342ae1cb-454a-4243-aa49-cd36493c1672",
                "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should return true when team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return true when team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
                "isRoot": false,
                "uuid": "0475a627-e946-4422-9bb5-3e5283a37d37",
                "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
                "skipped": false
              },
              {
                "title": "should return false when no team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return false when no team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "342ae1cb-454a-4243-aa49-cd36493c1672",
                "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "f9e075b2-d924-467c-a898-c42003f6f4cb",
                "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "fefbfa5e-457b-4755-9361-6632e929736a",
                "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Teams #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "2780059c-21ab-4ae9-9015-6b72b0b1ad73",
                "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "c45f5600-3517-43a4-b150-20ad89418466",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "f9e075b2-d924-467c-a898-c42003f6f4cb",
                "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "fefbfa5e-457b-4755-9361-6632e929736a",
                "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Teams #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "2780059c-21ab-4ae9-9015-6b72b0b1ad73",
                "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#length",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "778b7247-98b3-46b6-a6d7-4d62231e51ec",
                "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "acc2407d-74e0-4114-bdf1-c441a60545e5",
                "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "e20eac56-faef-4d0a-b4de-bc7d40862723",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "778b7247-98b3-46b6-a6d7-4d62231e51ec",
                "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "acc2407d-74e0-4114-bdf1-c441a60545e5",
                "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#add(team)",
            "suites": [],
            "tests": [
              {
                "title": "should add the given team",
                "fullTitle": "Teams #add(team) should add the given team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "2d53fe90-73fd-4273-8725-ffec47b00c32",
                "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
                "skipped": false
              },
              {
                "title": "should error if team with teamName already exists",
                "fullTitle": "Teams #add(team) should error if team with teamName already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "7355f3e5-0d0b-4a4c-8a3e-cbff7204a371",
                "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should add the given team",
                "fullTitle": "Teams #add(team) should add the given team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "2d53fe90-73fd-4273-8725-ffec47b00c32",
                "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
                "skipped": false
              },
              {
                "title": "should error if team with teamName already exists",
                "fullTitle": "Teams #add(team) should error if team with teamName already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "7355f3e5-0d0b-4a4c-8a3e-cbff7204a371",
                "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#remove(team)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #remove(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "98126c5b-25ff-417d-824c-538ffc2d0f3e",
                "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #remove(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "adc7580d-f6f0-4133-87c8-c1f82aa30877",
                "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #remove(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "98126c5b-25ff-417d-824c-538ffc2d0f3e",
                "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #remove(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "adc7580d-f6f0-4133-87c8-c1f82aa30877",
                "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#removeByTeamName(team)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #removeByTeamName(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "0b0f6911-3945-44c1-a282-1e79ada9f285",
                "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
                "skipped": false
              },
              {
                "title": "should ignore team name case",
                "fullTitle": "Teams #removeByTeamName(team) should ignore team name case",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "ca9911bd-d306-4d59-9477-46005d8ff06a",
                "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #removeByTeamName(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "41e50f40-5add-4842-a8b8-5e06be85b6fe",
                "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #removeByTeamName(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "0b0f6911-3945-44c1-a282-1e79ada9f285",
                "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
                "skipped": false
              },
              {
                "title": "should ignore team name case",
                "fullTitle": "Teams #removeByTeamName(team) should ignore team name case",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "ca9911bd-d306-4d59-9477-46005d8ff06a",
                "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #removeByTeamName(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "41e50f40-5add-4842-a8b8-5e06be85b6fe",
                "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName)",
            "suites": [
              {
                "title": "when teams are full",
                "suites": [],
                "tests": [
                  {
                    "title": "should return a valid response",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teams are full should return a valid response",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "fdd76c19-2f63-47b7-89e2-56ebffd0647c",
                    "parentUUID": "9fbcc8fb-c7c1-4ce9-bbac-1fde8fb0ffb0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "9fbcc8fb-c7c1-4ce9-bbac-1fde8fb0ffb0",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should return a valid response",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teams are full should return a valid response",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "fdd76c19-2f63-47b7-89e2-56ebffd0647c",
                    "parentUUID": "9fbcc8fb-c7c1-4ce9-bbac-1fde8fb0ffb0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "when teamLeader selection is PLAYER_CHOICE",
                "suites": [],
                "tests": [
                  {
                    "title": "should inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "320dfc81-b23b-4108-8b81-a6418273a1dc",
                    "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
                    "skipped": false
                  },
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
                    "isRoot": false,
                    "uuid": "59059c68-9110-43eb-93bb-8abaf1a1a463",
                    "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant as teamLeader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
                    "isRoot": false,
                    "uuid": "334b83a7-5683-41e2-8b48-3f61afd07c9b",
                    "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "e4df9823-7e0f-401c-988e-33693b053e63",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "320dfc81-b23b-4108-8b81-a6418273a1dc",
                    "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
                    "skipped": false
                  },
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
                    "isRoot": false,
                    "uuid": "59059c68-9110-43eb-93bb-8abaf1a1a463",
                    "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant as teamLeader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
                    "isRoot": false,
                    "uuid": "334b83a7-5683-41e2-8b48-3f61afd07c9b",
                    "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "when teamLeader selection is RANDOM",
                "suites": [],
                "tests": [
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not inquire for team leader",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "1b1f35e7-61c2-403d-8b7c-835a41fcfa74",
                    "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
                    "skipped": false
                  },
                  {
                    "title": "should automatically add team leader when team is filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should automatically add team leader when team is filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
                    "isRoot": false,
                    "uuid": "0ff75372-27c1-4159-8cb5-5d57d73c075d",
                    "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
                    "skipped": false
                  },
                  {
                    "title": "should not automatically add team leader when team is not filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
                    "isRoot": false,
                    "uuid": "b913073b-3db6-4563-bd82-2ed88141dabc",
                    "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "987c3f20-a440-4c50-938a-bdc489e59314",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not inquire for team leader",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "1b1f35e7-61c2-403d-8b7c-835a41fcfa74",
                    "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
                    "skipped": false
                  },
                  {
                    "title": "should automatically add team leader when team is filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should automatically add team leader when team is filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
                    "isRoot": false,
                    "uuid": "0ff75372-27c1-4159-8cb5-5d57d73c075d",
                    "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
                    "skipped": false
                  },
                  {
                    "title": "should not automatically add team leader when team is not filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
                    "isRoot": false,
                    "uuid": "b913073b-3db6-4563-bd82-2ed88141dabc",
                    "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when set to use unlimited teams",
                "suites": [],
                "tests": [
                  {
                    "title": "should add team when teams are full",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when set to use unlimited teams should add team when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                    "isRoot": false,
                    "uuid": "64c51d3c-ffb0-42ab-b22d-3a3503be96bd",
                    "parentUUID": "2f794634-6504-41f9-bcf5-f8a0ebed30c4",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "2f794634-6504-41f9-bcf5-f8a0ebed30c4",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should add team when teams are full",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when set to use unlimited teams should add team when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                    "isRoot": false,
                    "uuid": "64c51d3c-ffb0-42ab-b22d-3a3503be96bd",
                    "parentUUID": "2f794634-6504-41f9-bcf5-f8a0ebed30c4",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when team selection method is PLAYER_CHOICE",
                "suites": [],
                "tests": [
                  {
                    "title": "should throw when no team name is given",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should throw when no team name is given",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
                    "isRoot": false,
                    "uuid": "21d48403-4690-43dc-a799-8bf00a9f9b84",
                    "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                    "skipped": false
                  },
                  {
                    "title": "should add contestant to correct team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should add contestant to correct team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "f323da7e-83c0-4c34-9cea-d6cccdd8d33c",
                    "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                    "skipped": false
                  },
                  {
                    "title": "should not add to full team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should not add to full team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "233153b6-4328-4b07-be6d-855e2482b0ab",
                    "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should throw when no team name is given",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should throw when no team name is given",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
                    "isRoot": false,
                    "uuid": "21d48403-4690-43dc-a799-8bf00a9f9b84",
                    "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                    "skipped": false
                  },
                  {
                    "title": "should add contestant to correct team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should add contestant to correct team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "f323da7e-83c0-4c34-9cea-d6cccdd8d33c",
                    "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                    "skipped": false
                  },
                  {
                    "title": "should not add to full team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should not add to full team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "233153b6-4328-4b07-be6d-855e2482b0ab",
                    "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "should give contestant an id",
                "fullTitle": "Teams addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
                "isRoot": false,
                "uuid": "5b14904a-5bd0-4ca9-b408-13eabdf82c53",
                "parentUUID": "805302e7-8c3e-414c-abce-9e6769c840d5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "805302e7-8c3e-414c-abce-9e6769c840d5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should give contestant an id",
                "fullTitle": "Teams addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
                "isRoot": false,
                "uuid": "5b14904a-5bd0-4ca9-b408-13eabdf82c53",
                "parentUUID": "805302e7-8c3e-414c-abce-9e6769c840d5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "getByContestant(contestant)",
            "suites": [],
            "tests": [
              {
                "title": "should get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
                "isRoot": false,
                "uuid": "4365bd0a-4f82-4994-910d-808c9298469c",
                "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
                "skipped": false
              },
              {
                "title": "should not get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should not get team of contestant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "3b7f460d-04d4-412d-818a-c896d51ca248",
                "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "be0b059f-01c1-42d4-8950-430069aa135c",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
                "isRoot": false,
                "uuid": "4365bd0a-4f82-4994-910d-808c9298469c",
                "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
                "skipped": false
              },
              {
                "title": "should not get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should not get team of contestant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "3b7f460d-04d4-412d-818a-c896d51ca248",
                "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "getByTeamName(temName)",
            "suites": [],
            "tests": [
              {
                "title": "should get team when team with name exists",
                "fullTitle": "Teams getByTeamName(temName) should get team when team with name exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
                "isRoot": false,
                "uuid": "5b9ef4d0-36f9-489a-ad8d-c19c9e6d2d1d",
                "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
                "skipped": false
              },
              {
                "title": "should not get team when team with name does not exist",
                "fullTitle": "Teams getByTeamName(temName) should not get team when team with name does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "d6212274-321c-4b3e-965b-d07828394f47",
                "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should get team when team with name exists",
                "fullTitle": "Teams getByTeamName(temName) should get team when team with name exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
                "isRoot": false,
                "uuid": "5b9ef4d0-36f9-489a-ad8d-c19c9e6d2d1d",
                "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
                "skipped": false
              },
              {
                "title": "should not get team when team with name does not exist",
                "fullTitle": "Teams getByTeamName(temName) should not get team when team with name does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "d6212274-321c-4b3e-965b-d07828394f47",
                "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "getAvailable(settings)",
            "suites": [],
            "tests": [
              {
                "title": "should not return full teams",
                "fullTitle": "Teams getAvailable(settings) should not return full teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "e5746b80-810b-41bd-b8e6-07f31ebab949",
                "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
                "skipped": false
              },
              {
                "title": "should return teams with space",
                "fullTitle": "Teams getAvailable(settings) should return teams with space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "50132a46-73bf-4295-a8cd-f1ee220570d6",
                "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
                "skipped": false
              },
              {
                "title": "should return teams with unlimited space",
                "fullTitle": "Teams getAvailable(settings) should return teams with unlimited space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "680aa551-0519-4229-8e95-12162eed9825",
                "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should not return full teams",
                "fullTitle": "Teams getAvailable(settings) should not return full teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "e5746b80-810b-41bd-b8e6-07f31ebab949",
                "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
                "skipped": false
              },
              {
                "title": "should return teams with space",
                "fullTitle": "Teams getAvailable(settings) should return teams with space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "50132a46-73bf-4295-a8cd-f1ee220570d6",
                "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
                "skipped": false
              },
              {
                "title": "should return teams with unlimited space",
                "fullTitle": "Teams getAvailable(settings) should return teams with unlimited space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "680aa551-0519-4229-8e95-12162eed9825",
                "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamsTests.js",
        "uuid": "a21de95f-68bd-486e-99ef-e64deef3f319",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "42f16576-cb91-46e0-a11a-838510853991",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should throw on set value",
      "fullTitle": "#wasSuccessful should throw on set value",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6ca9b123-50ab-4f77-9d28-77f000e6df3a",
      "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#wasSuccessful should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "606415d1-24e4-48e7-a600-e620d9f6c3c0",
      "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#enquireForTeamLeaderPosition should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "0d3278dd-d698-468b-a2c3-76297f617e01",
      "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#enquireForTeamLeaderPosition should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "a9bbb40b-1b97-46ea-9031-110741db425e",
      "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#errorMessage should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "3b60949b-b7de-4f3e-9588-ca3692c05339",
      "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#errorMessage should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
      "isRoot": false,
      "uuid": "11f69782-60ab-4665-8b03-48d8695abb52",
      "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
      "skipped": false
    },
    {
      "title": "should change the state to not successful",
      "fullTitle": "#setNotSuccessful(errorMessage) should change the state to not successful",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
      "isRoot": false,
      "uuid": "53697ca0-5d30-4705-95ea-e872481bf193",
      "parentUUID": "ab6cd783-d1b0-492d-9662-272fff3ef877",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#username should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "cd75d88a-bc05-49ac-bd8e-b322530da854",
      "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#username should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "f309c8d3-3f4d-4149-885b-efee99793549",
      "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "fd679f4b-3bbe-486f-ae61-4365ce47fcd9",
      "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "bc012c7d-9335-475c-94df-f31d4547cb3d",
      "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
      "skipped": false
    },
    {
      "title": "should increment the contestant's score",
      "fullTitle": "#incrementScore() should increment the contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8a0fa89d-cb94-44b4-b9da-7a99917d4702",
      "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
      "skipped": false
    },
    {
      "title": "should emit scoreUpdate event",
      "fullTitle": "#incrementScore() should emit scoreUpdate event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
      "isRoot": false,
      "uuid": "610ba58e-406b-4910-9d03-5198bfe7db2b",
      "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
      "skipped": false
    },
    {
      "title": "should return a non-null non-empty key",
      "fullTitle": "#generateSessionId() should return a non-null non-empty key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "472b2240-4521-42d5-9eda-42be3a8aa70a",
      "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
      "skipped": false
    },
    {
      "title": "should return a id of the correct length",
      "fullTitle": "#generateSessionId() should return a id of the correct length",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
      "isRoot": false,
      "uuid": "6e961ed6-981e-47f0-8691-ebc2861774c5",
      "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
      "skipped": false
    },
    {
      "title": "should record id so it cannot be reused.",
      "fullTitle": "#generateSessionId() should record id so it cannot be reused.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
      "isRoot": false,
      "uuid": "d9936c47-9e13-4a7c-acdb-2ba2ef4782f0",
      "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#generateParticipantId() should return a UUID",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
      "isRoot": false,
      "uuid": "08b9e91a-272c-45ff-a4f1-d3a3e8599117",
      "parentUUID": "cc06d067-84da-4037-aefe-ac7be4822bb1",
      "skipped": false
    },
    {
      "title": "should store the ids to stop reuse",
      "fullTitle": "#registerSessionIdsInUse(ids) should store the ids to stop reuse",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "e11a68fc-b878-4180-8a46-88d8ac21c64e",
      "parentUUID": "86de0c1a-3f81-4425-86d7-4d6a2752c2ed",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#releaseSessionId(id) should return a UUID",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "2a7c006a-b7b0-4174-a498-9ac75312c8d4",
      "parentUUID": "6865a662-021d-4d46-a3a6-c1fbe8bbb7f1",
      "skipped": false
    },
    {
      "title": "should return false when not referenced",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not referenced",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
      "isRoot": false,
      "uuid": "43694536-7181-4c6e-aa44-6cdafeefcf42",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return false when null",
      "fullTitle": "#isInstanceAndTypeOf() should return false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
      "isRoot": false,
      "uuid": "527e1fc3-0ef8-417e-b559-f74e17a2f750",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return false when not the correct type",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "6e556b53-0d16-40f4-834e-e15036a0c04a",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return true when is a built-in type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is a built-in type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
      "isRoot": false,
      "uuid": "2aa7235f-5c6a-45ad-acb6-96d375840188",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return true when is user defined type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is user defined type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
      "isRoot": false,
      "uuid": "1ec5f39d-a19c-4a04-894a-62d138d27e2d",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#id should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "7206c812-15e6-4732-ac29-0d79f7b00775",
      "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "fc9d1a52-bc13-4fb5-9770-0df14e0874cb",
      "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#isDisconnected should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "b1211225-e563-44e6-a44b-5d87262a59e0",
      "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#isDisconnected should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "768e013f-e549-4296-8d21-4f2c26cbdfd9",
      "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
      "skipped": false
    },
    {
      "title": "should change participant state to disconnected",
      "fullTitle": "#disconnect() should change participant state to disconnected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
      "isRoot": false,
      "uuid": "a4434b80-4dee-49e3-b973-340ca1a8c34f",
      "parentUUID": "1b7cf8e1-68df-4474-bd5c-38937becb49d",
      "skipped": false
    },
    {
      "title": "should change participant state to connected",
      "fullTitle": "#reconnect() should change participant state to connected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
      "isRoot": false,
      "uuid": "a2799958-be64-44dc-a101-bdba3ca0b290",
      "parentUUID": "26c9ee54-a822-46b2-87ec-018a01430ae6",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "bf8f614e-9d89-4614-9924-72e70242d8d5",
      "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "f7eadb7a-ec12-43f2-a893-3de12cdb405f",
      "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "b66ebab8-4dde-4ecb-8a7d-b6c47e7839bf",
      "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "168925f0-ca44-49ac-9a6a-1eae25734e0e",
      "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "26fc0932-a7d5-4e1b-b52a-8817dd83861d",
      "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
      "skipped": false
    },
    {
      "title": "should return true when id does exist",
      "fullTitle": "#contains(id) should return true when id does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
      "isRoot": false,
      "uuid": "2b801076-d013-4340-9ff2-0d4591e39529",
      "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
      "skipped": false
    },
    {
      "title": "should return false when id does not exist",
      "fullTitle": "#contains(id) should return false when id does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "1d589167-2ede-4a11-a055-5e7ee8f56626",
      "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
      "skipped": false
    },
    {
      "title": "should add the given participant",
      "fullTitle": "#add(participant) should add the given participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "259a2874-a6e2-4bff-bc10-3431e8bb32d4",
      "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
      "skipped": false
    },
    {
      "title": "should error if participant with id already exists",
      "fullTitle": "#add(participant) should error if participant with id already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "1c2eeb38-4b70-4583-9ba0-476289c79ffd",
      "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
      "skipped": false
    },
    {
      "title": "should emit add event",
      "fullTitle": "#add(participant) should emit add event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
      "isRoot": false,
      "uuid": "a63313f2-96a3-4397-a833-5fda582b8d0a",
      "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#remove(participant) should remove the existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "da3b46fb-7684-4c50-b07b-e16231b114cb",
      "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#remove(participant) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "f806d763-dbde-42c9-89f5-95c9a52f3e91",
      "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#removeById(id) should remove the existing participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "37b3a590-dc95-4c83-bd52-a4fe138eb352",
      "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#removeById(id) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b010250d-e7d4-4b46-ae7c-ec9a44814878",
      "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
      "skipped": false
    },
    {
      "title": "should create teams",
      "fullTitle": "#constructor should create teams",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "e628566a-0886-4771-8fc9-3fa224de9426",
      "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
      "skipped": false
    },
    {
      "title": "should not create teams",
      "fullTitle": "#constructor should not create teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
      "isRoot": false,
      "uuid": "f337bd72-f82e-4ea6-9024-3cc6cc81ce12",
      "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#id should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "df976ccf-f501-4f07-b56e-e56ea22739cf",
      "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "f632a05c-2e8b-4248-ad3a-f6372e0a9901",
      "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundsPlayed should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "379500bc-d095-490e-b3bd-06f4c1cac345",
      "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundsPlayed should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "c135c509-98de-45d5-a6b4-78feb4aa9c1c",
      "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#previousWinners should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "f3547bc5-2928-46dc-bcad-7064b50f6104",
      "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#previousWinners should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "4d81ec3d-f40f-43f1-9be1-83d128560f67",
      "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundWinner should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "7d641d98-be63-4a63-bb78-24f7792848f4",
      "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundWinner should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "3c2bccac-b16d-412f-bfa9-da1ec1ffe019",
      "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#observers should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d006327c-49d2-43a8-8602-eba473c101c3",
      "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#observers should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
      "isRoot": false,
      "uuid": "065aab14-2faf-4322-85c5-99133574166c",
      "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "4f5fcf5a-dff9-4fdc-ad53-2db55ce2948d",
      "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
      "isRoot": false,
      "uuid": "d0505aca-d0ec-4a96-8659-2853582c5dc4",
      "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#host should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "608a16b6-2b26-4afb-8dd6-94e560462451",
      "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#host should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
      "isRoot": false,
      "uuid": "decbc660-99da-4cf0-820c-29594662cc2b",
      "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#currentState should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "22707380-9645-4c65-ab28-8f7dbabaca72",
      "parentUUID": "e5c7224a-84ca-4e96-a63f-086d41ce6d5d",
      "skipped": false
    },
    {
      "title": "should increment rounds played",
      "fullTitle": "#incrementRoundsPlayed() should increment rounds played",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "3dd02914-30e8-41ec-966c-5aceb619ac4c",
      "parentUUID": "6a051b5c-3a4f-4cba-bb2a-0307d08cac97",
      "skipped": false
    },
    {
      "title": "should not allow a contestant username with bad words",
      "fullTitle": "#addContestant(contestant) should not allow a contestant username with bad words",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
      "isRoot": false,
      "uuid": "baa90d57-3244-4003-8c59-11196b140532",
      "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
      "skipped": false
    },
    {
      "title": "should not allow when username is empty",
      "fullTitle": "#addContestant(contestant) should not allow when username is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
      "isRoot": false,
      "uuid": "99cc2d11-73fc-4a8c-ae09-52560dbc1c59",
      "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
      "skipped": false
    },
    {
      "title": "should trim username",
      "fullTitle": "#addContestant(contestant) should trim username",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
      "isRoot": false,
      "uuid": "8b2762ad-1a52-4c03-a99d-06002fd47c5f",
      "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
      "skipped": false
    },
    {
      "title": "should add contestant when session is not full",
      "fullTitle": "when in individual mode should add contestant when session is not full",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "f67e9537-4673-4241-8e4d-3a3353195b48",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should not add contestant when session is full",
      "fullTitle": "when in individual mode should not add contestant when session is full",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
      "isRoot": false,
      "uuid": "4ed59bad-2b0d-466a-bedb-0e3d7b5d4725",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in individual mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "c13e9029-0db4-4ea1-bc30-66c201396156",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "BUG# username case should not matter",
      "fullTitle": "when in individual mode BUG# username case should not matter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "568a1959-de8e-4fac-ac3a-197fd3cc351e",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
      "fullTitle": "when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
      "isRoot": false,
      "uuid": "90734f95-a6f7-4fa2-88d8-f42df405a437",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should add contestant when teams is not full",
      "fullTitle": "when in team mode should add contestant when teams is not full",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "854cf76e-d384-4f63-912e-f97e821c8e07",
      "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
      "skipped": false
    },
    {
      "title": "should not add contestant when teams are full",
      "fullTitle": "when in team mode should not add contestant when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "6c48bf91-6fb3-42b0-a4fa-ea4a6dd230d0",
      "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in team mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "9a20bd8e-6ba9-4a05-9dd4-2f7b94103d5b",
      "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
      "skipped": false
    },
    {
      "title": "should subscribe callback to the correct event",
      "fullTitle": "#subscribeForStateChange(event, callback) should subscribe callback to the correct event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
      "isRoot": false,
      "uuid": "1e9bf4d8-3c28-4a47-9bce-228abddc384c",
      "parentUUID": "4332b873-d978-4718-885a-f9ae00260698",
      "skipped": false
    },
    {
      "title": "should register when state is ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should register when state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
      "isRoot": false,
      "uuid": "bcf1c516-aead-46f1-99ed-72f1e2799b46",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not register when state is not ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when state is not ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
      "isRoot": false,
      "uuid": "e6de00df-6b1f-4eb9-9a7c-44dda86d8e4b",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not register when contestant does not exist",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "52730d61-ee87-4c2f-af43-430c576b9ed6",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "5f71e646-bdc9-4c4d-86da-f4fa9e4a49ac",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not add previous round winner to winners list",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "6a2ce9fc-0201-437e-a20b-0b8e436afe46",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->ACCEPT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
      "isRoot": false,
      "uuid": "881bc3ff-643d-4d09-bd28-2a83068f93c8",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->ACCEPT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
      "isRoot": false,
      "uuid": "c2b91813-3c5c-4e12-87ae-2add9e950ebf",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should update contestant's score",
      "fullTitle": "action->ACCEPT should update contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "1b2994ad-96cf-4c0c-88d0-3e1443369555",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should update contestant's team score",
      "fullTitle": "action->ACCEPT should update contestant's team score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8ba9f8a1-8cb4-4815-90b3-2e4291da3150",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->ACCEPT should add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "dd42ab12-6166-4af0-8e57-351ec45d443e",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->ACCEPT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "c401e49f-7568-4bc2-831a-94cf09d757d6",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should clear pending winner",
      "fullTitle": "action->ACCEPT should clear pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "30335f1b-4eb1-4a70-b6b3-4ae85a8369d0",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->REJECT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
      "isRoot": false,
      "uuid": "e818eb8f-922a-4bab-8017-76f2ddc74921",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->REJECT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
      "isRoot": false,
      "uuid": "ee7a8e46-6fc0-4afa-b780-0303918e474b",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should not replace round winner with pending contestant",
      "fullTitle": "action->REJECT should not replace round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "778d33bd-0859-4b70-b4b6-fae6feaa1857",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should not update pending contestant's score",
      "fullTitle": "action->REJECT should not update pending contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "788a100e-5189-4dcb-a59b-0a4c13467ba3",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should add round winner to previous winners list",
      "fullTitle": "action->REJECT should add round winner to previous winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "ec0998b2-10be-43ab-8990-4b0d04b9bd4e",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->REJECT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "3059a84a-9751-4dc8-805f-da64e2825226",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->RESET should allow when game state is ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "de78832f-b28f-4ccd-9e1d-1abbc70b1eb7",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->RESET should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "44c682de-5bc0-4d9b-bb18-61f07df4073f",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->RESET should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "999119ec-789e-438a-9725-e8a67f81b28a",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->RESET should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "c042a4c3-ca3e-4fd1-bcc8-351f61f62cff",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->RESET should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "12927ae1-d7a2-4ba1-8862-2b7d176ca390",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->DISABLE should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "a6b7631e-56ba-40eb-85dd-307cdaa6f8cf",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->DISABLE should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "adcfc452-912d-4d0e-85a1-b7e7a41ca3e0",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->DISABLE should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "b5c9b06f-4f3a-4ad1-902d-8b8e8aba4ed4",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->DISABLE should add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "d53019d2-2be2-4bf7-bfbb-5835e8811af5",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should change game state to buzzerLock",
      "fullTitle": "action->DISABLE should change game state to buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
      "isRoot": false,
      "uuid": "25d4ea47-72e3-4e83-b75c-7a2196844970",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should allow when game state is buzzerLock",
      "fullTitle": "action->ENABLE should allow when game state is buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
      "isRoot": false,
      "uuid": "0de9a0b9-bad4-4256-9718-9725538e10a7",
      "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not buzzerLock",
      "fullTitle": "action->ENABLE should not allow when game state is not buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
      "isRoot": false,
      "uuid": "52e719d5-a7de-4ba0-a620-9b0d147e4c10",
      "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
      "skipped": false
    },
    {
      "title": "should change game state to ready",
      "fullTitle": "action->ENABLE should change game state to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "80fad4f4-d0f5-4d65-a6a7-3c2e8dc00f7d",
      "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
      "skipped": false
    },
    {
      "title": "should return the pending winner",
      "fullTitle": "#pendingWinner should return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
      "isRoot": false,
      "uuid": "d48e72ba-0d25-4147-b4c1-3117d5a24f4a",
      "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
      "skipped": false
    },
    {
      "title": "should not return the pending winner",
      "fullTitle": "#pendingWinner should not return the pending winner",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "87c54679-43b3-4b64-962d-97f9eb6f8456",
      "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
      "skipped": false
    },
    {
      "title": "should update session name",
      "fullTitle": "#updateSessionName(name) should update session name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
      "isRoot": false,
      "uuid": "9c49dc24-6cf3-4326-986f-1ea27d4e452e",
      "parentUUID": "64b2c568-8471-48df-8d32-ebe6fd20d411",
      "skipped": false
    },
    {
      "title": "should update max contestants",
      "fullTitle": "#updateMaxContestants(maxContestants) should update max contestants",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "1da35472-108c-42ed-832b-ac6ae5392238",
      "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
      "skipped": false
    },
    {
      "title": "should not allow below current connected amount",
      "fullTitle": "#updateMaxContestants(maxContestants) should not allow below current connected amount",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "6150768a-b371-4ef8-ac03-9057e9ea8beb",
      "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
      "skipped": false
    },
    {
      "title": "should update team size",
      "fullTitle": "#updateTeamSize(teamSize) should update team size",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "600ff09e-2c8f-4729-9b45-7c91f3790f5e",
      "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateTeamSize(teamSize) should not allow below current setting",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "14c95990-8156-4f1d-ae5f-5615d48b881c",
      "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
      "skipped": false
    },
    {
      "title": "should update max teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should update max teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "079e83f4-b286-4904-a998-4a7b910d76a9",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should add teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should add teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "24c366da-6bc7-4ef3-85ff-746a151ef5bf",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow below current setting",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "50bbc0f7-8f72-43d3-a199-bf2432014a85",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should not allow if teams are PLAYER_CHOICE",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "4451a5e1-ad6a-46e2-9f4b-d348008e40af",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "c7ab8405-5d8d-4089-8e0b-5cd3dda893f2",
      "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "4685e1df-7407-43fd-98e2-4283e39998c0",
      "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "533980c4-8472-44c0-ab83-e5dd84a0d03b",
      "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
      "skipped": false
    },
    {
      "title": "add and return session",
      "fullTitle": "#add(host, settings) add and return session",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
      "isRoot": false,
      "uuid": "67ab0e38-5fa1-4708-9faa-cf51c5688151",
      "parentUUID": "c159301c-20d1-4789-8e72-2802a2f644a5",
      "skipped": false
    },
    {
      "title": "when given valid id should return session",
      "fullTitle": "#getById(id) when given valid id should return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
      "isRoot": false,
      "uuid": "4485a5fb-15d1-4420-a852-972eb561e640",
      "parentUUID": "026d8756-b072-41ae-8c55-6dfede301a25",
      "skipped": false
    },
    {
      "title": "should remove complete sc",
      "fullTitle": "#purgeCompleted() should remove complete sc",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "16039d9e-7ce4-4ce0-85fa-3bcea93fb116",
      "parentUUID": "c006bfd9-74a1-4442-b7d4-af719687477c",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#hasTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "9c83d148-a8e6-4fcb-ac11-37fce2516dc7",
      "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#hasTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "54004df1-1767-4017-8ebf-60f923b2382e",
      "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamSize should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "15d662c9-da05-4489-a400-98d6943aa060",
      "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamSize should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "6a097a82-5f7b-40fb-b6df-17003c2e4022",
      "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "adbf4ccc-ce25-43ce-87ac-d7325f6ac166",
      "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "550356ff-b285-40e6-8653-d793bc89ee88",
      "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeaderSelectionMethod should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "0cecf8e4-779b-40c5-848e-a57045835ff1",
      "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamLeaderSelectionMethod should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "36854f9b-1ef8-4e22-a992-f786e6b0795c",
      "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeaderSelectionMethod should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "18a9ffb9-ab8a-479e-89e8-d1afe406e306",
      "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNameEdit should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "3be17c56-17ab-41ae-a4c8-1142e01e3b91",
      "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamNameEdit should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "e0ba5af4-1ff7-47bd-90ad-ba329c0a88d4",
      "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNameEdit should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "722cc3d2-d9ad-440e-90ca-d6b938c3c921",
      "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxContestants should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8c748089-9281-4f68-9d04-3869816dd03a",
      "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxContestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a90cf51e-cb97-4149-ae14-5955ec127a2c",
      "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#sessionName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "c89db083-ca7b-44bf-a382-2f540b87565c",
      "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#sessionName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "c1e8fe14-58ff-4f7e-9650-bb577d08341f",
      "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNames should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "98f7ddac-5d87-4833-8be7-7d6168be4845",
      "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNames should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "388c6ac8-1e65-4f6e-85eb-46c3097173f9",
      "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
      "skipped": false
    },
    {
      "title": "should throw when settings.maxTeams is less than 1",
      "fullTitle": "#create(teams, settings) should throw when settings.maxTeams is less than 1",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "f6bcebb7-5bfc-484b-93a9-a538786ce970",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should create the correct amount of teams",
      "fullTitle": "#create(teams, settings) should create the correct amount of teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "badda810-ab9f-4c10-b806-37fb9d131489",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should not fail with a large team size",
      "fullTitle": "#create(teams, settings) should not fail with a large team size",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
      "isRoot": false,
      "uuid": "8ccfcda8-4d87-4334-9c80-a447eab7343e",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should use settings.teamNames first, before random selection",
      "fullTitle": "#create(teams, settings) should use settings.teamNames first, before random selection",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "437043d7-27b7-49e7-9642-e7b5616cec14",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should only create a single team when using unlimited teams",
      "fullTitle": "#create(teams, settings) should only create a single team when using unlimited teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "01f193c6-6c77-4a52-a646-dc8d53d9bc4f",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should add a team",
      "fullTitle": "#add(teams, settings) should add a team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "ce42f47a-cdf1-4139-85bc-bddd5bd51bd2",
      "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
      "skipped": false
    },
    {
      "title": "should reuse team names specified in settings",
      "fullTitle": "#add(teams, settings) should reuse team names specified in settings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
      "isRoot": false,
      "uuid": "e5813222-2e8f-481f-aed2-d284ca179af7",
      "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
      "skipped": false
    },
    {
      "title": "should factor in team names which are already in use",
      "fullTitle": "#add(teams, settings) should factor in team names which are already in use",
      "timedOut": false,
      "duration": 107,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
      "isRoot": false,
      "uuid": "779071e6-5269-4d36-950f-292514e30044",
      "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "b29d8348-8763-4650-aeb9-7c1d89d55c9e",
      "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "cb04f41b-6ad3-4ec6-8ded-b36f22b66c3d",
      "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeader should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "540cd281-c5bb-4f37-91f4-cefec67b9ae5",
      "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeader should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "3da6cca7-57b5-473f-9cb7-d34c27fbe15d",
      "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d70f334b-5649-47e1-86ae-75d4cf156834",
      "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "86453773-17a9-47de-851d-df83aeda33b4",
      "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "fd8b8d1a-d8c8-419a-8048-dcc0588dda46",
      "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
      "isRoot": false,
      "uuid": "03cc0987-5488-4044-a796-7b5084e35923",
      "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
      "skipped": false
    },
    {
      "title": "should update the teams score",
      "fullTitle": "when a contestant scores should update the teams score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "6812ba86-144d-4a60-8784-1542c093d687",
      "parentUUID": "8dfdf8a5-8dd5-401f-976e-d5c91fdab770",
      "skipped": false
    },
    {
      "title": "should allow it when no team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "ec0b3292-f7e1-4b7f-9e2f-b9edac337cbd",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should not allow it when a team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
      "isRoot": false,
      "uuid": "19cba76c-a634-4698-ac7c-b42d2dfeaf46",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should not allow it when a contestant is not in team",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
      "isRoot": false,
      "uuid": "e4b7b663-4e42-4b49-931f-823233e6fd06",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should allow it when a team leader is set and host override is flagged",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "4e78ccc9-3a36-4e88-a998-36704080847c",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "5470c8c3-f79c-498f-a3da-333c7d2eae5c",
      "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
      "skipped": false
    },
    {
      "title": "should not change name when setting do not allow it",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "f2c6b988-8370-4976-ae47-42aa33ce23ad",
      "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
      "skipped": false
    },
    {
      "title": "should not change name when name contains profanity",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "61d1f232-72e4-40d9-823c-7c27fe3aace2",
      "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "when host override should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "7e461af6-83f8-492d-be58-8cfb50004e43",
      "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
      "skipped": false
    },
    {
      "title": "should change name when setting do not allow it",
      "fullTitle": "when host override should change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "f41137cc-7b97-4011-be65-4a6d56838b34",
      "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
      "skipped": false
    },
    {
      "title": "should change name when name contains profanity",
      "fullTitle": "when host override should change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "a8ebc27c-947a-4b23-8178-23aeef109f69",
      "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
      "skipped": false
    },
    {
      "title": "should get contestant when contest with username exists",
      "fullTitle": "getContestantByUsername(username) should get contestant when contest with username exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
      "isRoot": false,
      "uuid": "63ff0069-b7f2-4ccb-a910-9bcb96b43553",
      "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
      "skipped": false
    },
    {
      "title": "should not get contestant when contest with username does not exist",
      "fullTitle": "getContestantByUsername(username) should not get contestant when contest with username does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
      "isRoot": false,
      "uuid": "e2cfde1f-233c-4f10-9ab8-10ec3b2f2aee",
      "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
      "skipped": false
    },
    {
      "title": "should return true when team with teamName does exist",
      "fullTitle": "#contains(teamName) should return true when team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
      "isRoot": false,
      "uuid": "31d4e696-849b-4f9b-ba3c-9df43253e4bc",
      "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
      "skipped": false
    },
    {
      "title": "should return false when no team with teamName does exist",
      "fullTitle": "#contains(teamName) should return false when no team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "62b7cbc8-09fd-4813-b1ad-04877202dfbb",
      "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6bc67ae0-536a-4a68-bc14-13e2dc361aba",
      "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "e4a7810a-9320-4334-a560-5925ece5322a",
      "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "df580f70-5c8a-4c57-b0fe-360eba97fdcb",
      "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6b17ad4b-69c1-42d6-ae28-2a5e8e7b5a21",
      "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "5ab7616f-df9a-4fa0-85b6-369a4fc1e8ce",
      "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
      "skipped": false
    },
    {
      "title": "should add the given team",
      "fullTitle": "#add(team) should add the given team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "48b18fd7-09ba-4a5b-8d20-0c52b157671c",
      "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
      "skipped": false
    },
    {
      "title": "should error if team with teamName already exists",
      "fullTitle": "#add(team) should error if team with teamName already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "14f17b4a-d613-4f95-a175-984b20baf1f5",
      "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#remove(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "c801b818-f5a9-4555-90ca-b234d09769a4",
      "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#remove(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "21a78863-f321-4162-8cca-7fd5bcb1446d",
      "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#removeByTeamName(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "55d6f51a-c6e1-4c25-bd83-626c0d6b9c1a",
      "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
      "skipped": false
    },
    {
      "title": "should ignore team name case",
      "fullTitle": "#removeByTeamName(team) should ignore team name case",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "7cd0fb5b-3df6-4f7a-879e-8d15455e2650",
      "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#removeByTeamName(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "ca8984cd-feff-46fb-9d53-349bc0f2513a",
      "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
      "skipped": false
    },
    {
      "title": "should give contestant an id",
      "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
      "isRoot": false,
      "uuid": "120cbc03-04e1-4822-abc4-d9cf6942bbfc",
      "parentUUID": "805302e7-8c3e-414c-abce-9e6769c840d5",
      "skipped": false
    },
    {
      "title": "should return a valid response",
      "fullTitle": "when teams are full should return a valid response",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "dec06e69-abfe-4bed-a33a-142928a9fa54",
      "parentUUID": "9fbcc8fb-c7c1-4ce9-bbac-1fde8fb0ffb0",
      "skipped": false
    },
    {
      "title": "should inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
      "isRoot": false,
      "uuid": "099bac11-8cde-4939-b7a1-4faeeb904772",
      "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
      "isRoot": false,
      "uuid": "d65ab5c7-906d-4767-ae71-86b9335d29fb",
      "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
      "skipped": false
    },
    {
      "title": "should not add contestant as teamLeader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
      "isRoot": false,
      "uuid": "a57231a1-1f0f-42bc-9d2c-ba67e78336db",
      "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is RANDOM should not inquire for team leader",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
      "isRoot": false,
      "uuid": "ebf5aa5d-1fdd-4555-bff3-c838aab4b220",
      "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
      "skipped": false
    },
    {
      "title": "should automatically add team leader when team is filled",
      "fullTitle": "when teamLeader selection is RANDOM should automatically add team leader when team is filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
      "isRoot": false,
      "uuid": "d5775436-df9c-4534-8e87-6741507b93b2",
      "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
      "skipped": false
    },
    {
      "title": "should not automatically add team leader when team is not filled",
      "fullTitle": "when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
      "isRoot": false,
      "uuid": "df466849-7d3a-4b86-876f-fb1fe285057f",
      "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
      "skipped": false
    },
    {
      "title": "should add team when teams are full",
      "fullTitle": "when set to use unlimited teams should add team when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "7ca0f006-f9a6-413d-a81a-b3e674d12bce",
      "parentUUID": "2f794634-6504-41f9-bcf5-f8a0ebed30c4",
      "skipped": false
    },
    {
      "title": "should throw when no team name is given",
      "fullTitle": "when team selection method is PLAYER_CHOICE should throw when no team name is given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8e3dd04e-2d35-4def-8f3b-dbdcc61515ba",
      "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
      "skipped": false
    },
    {
      "title": "should add contestant to correct team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should add contestant to correct team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "30890681-e6b3-45d6-95f8-3f8fe98dae13",
      "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
      "skipped": false
    },
    {
      "title": "should not add to full team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not add to full team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "0ec1e628-23b0-4dfd-bee2-1368134392a5",
      "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
      "skipped": false
    },
    {
      "title": "should get team of contestant",
      "fullTitle": "getByContestant(contestant) should get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
      "isRoot": false,
      "uuid": "604d48eb-595c-4021-902d-c13e9285f8e7",
      "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
      "skipped": false
    },
    {
      "title": "should not get team of contestant",
      "fullTitle": "getByContestant(contestant) should not get team of contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "626d0265-ddf9-49b6-bd8c-a9f5e12d99de",
      "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
      "skipped": false
    },
    {
      "title": "should get team when team with name exists",
      "fullTitle": "getByTeamName(temName) should get team when team with name exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
      "isRoot": false,
      "uuid": "4e7d1e07-2a00-400d-bf07-69a761f6cdee",
      "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
      "skipped": false
    },
    {
      "title": "should not get team when team with name does not exist",
      "fullTitle": "getByTeamName(temName) should not get team when team with name does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "3c3ac5e6-6393-433d-a25c-6015a6c83044",
      "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
      "skipped": false
    },
    {
      "title": "should not return full teams",
      "fullTitle": "getAvailable(settings) should not return full teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8e44de34-49d4-4d7b-aff5-3dfa8d01f713",
      "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
      "skipped": false
    },
    {
      "title": "should return teams with space",
      "fullTitle": "getAvailable(settings) should return teams with space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "96fb64a0-6901-4508-8f22-4c28af5d3b3d",
      "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
      "skipped": false
    },
    {
      "title": "should return teams with unlimited space",
      "fullTitle": "getAvailable(settings) should return teams with unlimited space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "5139ef95-d2ee-42d2-bb85-04b9ac3b109c",
      "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should throw on set value",
      "fullTitle": "#wasSuccessful should throw on set value",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5ea710d1-f9d0-4f90-9cf6-bbd5be383b6a",
      "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#wasSuccessful should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "0af0bf33-4323-468f-b9c3-fa25a4b4d8e8",
      "parentUUID": "cc82a065-8552-4ea8-85e4-86149b728ccb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#enquireForTeamLeaderPosition should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "9713d1b5-2c84-49ba-bbbf-2e5223aa8ad8",
      "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#enquireForTeamLeaderPosition should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "8338415c-ed03-40c4-9b02-4a38fcfae151",
      "parentUUID": "c21db7c3-2839-43d1-8ff1-3b477348ff0f",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#errorMessage should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "458a13db-0333-4419-a6b7-643128255678",
      "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#errorMessage should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
      "isRoot": false,
      "uuid": "cb510718-d805-4868-9db2-72edce54d0d6",
      "parentUUID": "29d1ff79-9eed-4baf-aa81-5f2e1307cb23",
      "skipped": false
    },
    {
      "title": "should change the state to not successful",
      "fullTitle": "#setNotSuccessful(errorMessage) should change the state to not successful",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
      "isRoot": false,
      "uuid": "0ca9b6e5-83ac-4f64-9777-aec8bd165d22",
      "parentUUID": "ab6cd783-d1b0-492d-9662-272fff3ef877",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#username should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "e8ce7700-d5be-44f2-82c3-237bc1597eea",
      "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#username should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "41796cfe-a984-4c03-b0d4-eb9bed010676",
      "parentUUID": "3af419b7-a5ff-4287-ae38-0e26d08f0bbe",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "bd0dd167-5741-498f-8b4a-0421c0813b85",
      "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "56489aa0-7ac6-4d77-8e92-6160bc96964b",
      "parentUUID": "f27f4394-4cbd-4777-9d3f-8b9fee58a018",
      "skipped": false
    },
    {
      "title": "should increment the contestant's score",
      "fullTitle": "#incrementScore() should increment the contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "7b25d976-3801-463a-b0e3-7af4a833c359",
      "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
      "skipped": false
    },
    {
      "title": "should emit scoreUpdate event",
      "fullTitle": "#incrementScore() should emit scoreUpdate event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
      "isRoot": false,
      "uuid": "eeadc627-47ad-44e7-8e78-6d5f3df56a87",
      "parentUUID": "d894505f-6174-43d9-906f-36729f00b733",
      "skipped": false
    },
    {
      "title": "should return a non-null non-empty key",
      "fullTitle": "#generateSessionId() should return a non-null non-empty key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "c545fe51-85d5-477d-85cd-90d5672abcb1",
      "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
      "skipped": false
    },
    {
      "title": "should return a id of the correct length",
      "fullTitle": "#generateSessionId() should return a id of the correct length",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
      "isRoot": false,
      "uuid": "e41570c8-1df6-4689-8a13-ab459fa363b9",
      "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
      "skipped": false
    },
    {
      "title": "should record id so it cannot be reused.",
      "fullTitle": "#generateSessionId() should record id so it cannot be reused.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
      "isRoot": false,
      "uuid": "60a683e8-88e3-4c40-913c-9859aa865601",
      "parentUUID": "3d67eb7e-b646-4f12-82ef-e453753a737e",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#generateParticipantId() should return a UUID",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
      "isRoot": false,
      "uuid": "25211548-c9db-4648-8623-a68ac4a6fae7",
      "parentUUID": "cc06d067-84da-4037-aefe-ac7be4822bb1",
      "skipped": false
    },
    {
      "title": "should store the ids to stop reuse",
      "fullTitle": "#registerSessionIdsInUse(ids) should store the ids to stop reuse",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "030b5cfa-2622-4c56-97cb-c363d6225d90",
      "parentUUID": "86de0c1a-3f81-4425-86d7-4d6a2752c2ed",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#releaseSessionId(id) should return a UUID",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "88493831-5d4e-4fdd-90be-dd29e9f35fae",
      "parentUUID": "6865a662-021d-4d46-a3a6-c1fbe8bbb7f1",
      "skipped": false
    },
    {
      "title": "should return false when not referenced",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not referenced",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
      "isRoot": false,
      "uuid": "d520b797-dd73-494f-bb74-9621dad17921",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return false when null",
      "fullTitle": "#isInstanceAndTypeOf() should return false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
      "isRoot": false,
      "uuid": "557d0dcd-b10e-4f30-a872-7f73054ef806",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return false when not the correct type",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "898e0ee7-4082-4bd1-a35f-16bf60696356",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return true when is a built-in type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is a built-in type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
      "isRoot": false,
      "uuid": "d97f5a70-b6a1-4d86-a756-8f872028d8c7",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should return true when is user defined type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is user defined type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
      "isRoot": false,
      "uuid": "391678c9-e5a5-477d-8b68-07f4b7df6d63",
      "parentUUID": "37826f19-a5dc-4f25-839c-67aa0d067daa",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#id should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "862cf7e9-48e0-409d-afd7-fe8292319d78",
      "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "2d3e097a-ad8d-4037-abce-024ff25395f8",
      "parentUUID": "a2c39d5f-b6ac-4766-9641-4325638d1d6d",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#isDisconnected should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "e5022323-1331-47cc-b198-b3ff6553c8b1",
      "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#isDisconnected should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "512ffd4a-4617-4221-a41f-bd823324e626",
      "parentUUID": "3687d21f-5946-4e59-8e08-ee9f79d92219",
      "skipped": false
    },
    {
      "title": "should change participant state to disconnected",
      "fullTitle": "#disconnect() should change participant state to disconnected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
      "isRoot": false,
      "uuid": "9c0d9f83-f851-47b5-8690-2e0804874666",
      "parentUUID": "1b7cf8e1-68df-4474-bd5c-38937becb49d",
      "skipped": false
    },
    {
      "title": "should change participant state to connected",
      "fullTitle": "#reconnect() should change participant state to connected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
      "isRoot": false,
      "uuid": "c2a92ca5-5f46-4857-85ca-604851978069",
      "parentUUID": "26c9ee54-a822-46b2-87ec-018a01430ae6",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d4685cda-9973-4623-8481-873ebb739414",
      "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "eee7dec6-cdb3-457b-93e2-151fd34099ed",
      "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "c734d81d-ae58-4744-abcb-ea4d1b44e8e5",
      "parentUUID": "e3f13cb9-b01e-4923-86c0-2aed64b2b7eb",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "636c8a04-04fe-4b82-a0e3-26c87f946211",
      "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "1ca77257-68cb-4e07-b3c4-8940fd3d1483",
      "parentUUID": "b0649c05-948e-4418-a778-9acccb3dd83f",
      "skipped": false
    },
    {
      "title": "should return true when id does exist",
      "fullTitle": "#contains(id) should return true when id does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
      "isRoot": false,
      "uuid": "5be96449-396d-4f5b-90c7-d38a860bcf16",
      "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
      "skipped": false
    },
    {
      "title": "should return false when id does not exist",
      "fullTitle": "#contains(id) should return false when id does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "87519e7c-1f9a-4d93-a916-cc2b5491eb9f",
      "parentUUID": "e40802ad-2507-44c9-8fae-6dd552ee1c86",
      "skipped": false
    },
    {
      "title": "should add the given participant",
      "fullTitle": "#add(participant) should add the given participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "28f7d88c-f8ea-4b6e-a903-5e53ac276059",
      "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
      "skipped": false
    },
    {
      "title": "should error if participant with id already exists",
      "fullTitle": "#add(participant) should error if participant with id already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "528c7379-f8c9-414b-9872-5e4dd6937c9d",
      "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
      "skipped": false
    },
    {
      "title": "should emit add event",
      "fullTitle": "#add(participant) should emit add event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
      "isRoot": false,
      "uuid": "de37d422-c5b6-477c-afe7-58f051c24fb7",
      "parentUUID": "eda62c54-f958-4d95-936d-ab608fbf8bed",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#remove(participant) should remove the existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "f8c60d38-4dba-4c11-bab4-ac7e6d1f4b2a",
      "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#remove(participant) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "0aab1fa5-78a7-410e-937b-64963f35239c",
      "parentUUID": "841c79bf-f64b-4eb4-b7c2-834be1dc21a9",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#removeById(id) should remove the existing participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "19fa322f-2830-4053-babc-5054b5ee0e52",
      "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#removeById(id) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "657d0f3a-6ef8-4a4b-9c52-121d5e2da7c1",
      "parentUUID": "ed5e6b18-f369-421f-adbf-6b68da04d5ff",
      "skipped": false
    },
    {
      "title": "should create teams",
      "fullTitle": "#constructor should create teams",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "0b6c89e6-391e-4a42-98ab-734dc9625cee",
      "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
      "skipped": false
    },
    {
      "title": "should not create teams",
      "fullTitle": "#constructor should not create teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
      "isRoot": false,
      "uuid": "3f003c72-5d9d-4f68-afbc-7ce3cdf5f816",
      "parentUUID": "b40ce8f8-5d1d-4f75-838b-811836928473",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#id should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ccde59f7-2f65-49de-af9e-6f94c840ce0e",
      "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "7a62004e-0e47-482b-b6c9-e228088ef034",
      "parentUUID": "e720b001-4809-4cef-bdd6-e2e2e4c3a2b2",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundsPlayed should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5407958b-ad85-4d02-b680-077be9786e90",
      "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundsPlayed should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "423847e9-2bb6-47ec-bbfb-c82b09f3c35a",
      "parentUUID": "b2d16cc1-788c-47bf-aa09-e8ceb76d7ca6",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#previousWinners should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "2ee7afd1-f24d-4a17-a4cd-e48382335630",
      "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#previousWinners should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "2cc0a536-17f6-4aa5-a802-ca8bcdb23895",
      "parentUUID": "5442fbc1-6b44-43a0-a6b6-a6d584ecc4c4",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundWinner should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "f710f66c-3a8f-4801-89bf-596df03e442b",
      "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundWinner should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "92c7a8b8-d1b2-4950-862b-80b74ad58803",
      "parentUUID": "fcdf86a9-f38f-4a02-ad3f-9d2131c7a98d",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#observers should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ac3c11a8-d64d-46fd-8aa2-a8b5f59e4b86",
      "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#observers should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
      "isRoot": false,
      "uuid": "04660997-4a74-491b-8daf-1d0a53673dcc",
      "parentUUID": "4187db17-e5ec-444e-918b-48b656ce9b5c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6af6e8a6-c3c7-4979-8a1e-c959f0121da1",
      "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
      "isRoot": false,
      "uuid": "125d7fc1-2432-4700-9265-2a8b4138fc99",
      "parentUUID": "aa756a4a-3df4-448c-9b50-62ce116a3c88",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#host should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "18f66daa-698e-46d9-b1d7-affeb1fb5b94",
      "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#host should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
      "isRoot": false,
      "uuid": "1b0b05c8-63bb-4360-9185-b246000dc697",
      "parentUUID": "426f7256-d535-4e9e-89c5-5665c4b94629",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#currentState should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "00659861-8518-497f-bcf8-88c9c6e9b51e",
      "parentUUID": "e5c7224a-84ca-4e96-a63f-086d41ce6d5d",
      "skipped": false
    },
    {
      "title": "should increment rounds played",
      "fullTitle": "#incrementRoundsPlayed() should increment rounds played",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "87f869ea-5f4b-48fa-9001-7d9a0a2cc48b",
      "parentUUID": "6a051b5c-3a4f-4cba-bb2a-0307d08cac97",
      "skipped": false
    },
    {
      "title": "should not allow a contestant username with bad words",
      "fullTitle": "#addContestant(contestant) should not allow a contestant username with bad words",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
      "isRoot": false,
      "uuid": "7045cb21-d314-4716-8c2b-631ebab24a6a",
      "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
      "skipped": false
    },
    {
      "title": "should not allow when username is empty",
      "fullTitle": "#addContestant(contestant) should not allow when username is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
      "isRoot": false,
      "uuid": "61f1914e-d0d5-4860-b7cf-354e046bf5eb",
      "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
      "skipped": false
    },
    {
      "title": "should trim username",
      "fullTitle": "#addContestant(contestant) should trim username",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
      "isRoot": false,
      "uuid": "dcaf7dad-b8b1-49a9-b1c7-70d639722002",
      "parentUUID": "af9e1be2-e405-4105-bb3a-2bc8166018d2",
      "skipped": false
    },
    {
      "title": "should add contestant when session is not full",
      "fullTitle": "when in individual mode should add contestant when session is not full",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "f96a13d4-cd44-432f-96ec-5de0fecca05c",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should not add contestant when session is full",
      "fullTitle": "when in individual mode should not add contestant when session is full",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
      "isRoot": false,
      "uuid": "8b7e78d4-928b-451c-a124-d29acef5f9a6",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in individual mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "79627eed-12d7-4f9c-9c24-059fbabbaeec",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "BUG# username case should not matter",
      "fullTitle": "when in individual mode BUG# username case should not matter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "339a26e6-1ace-4448-be7b-2ff442175487",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
      "fullTitle": "when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
      "isRoot": false,
      "uuid": "9ee1bf9d-2060-449c-8550-d37213338bb2",
      "parentUUID": "c474c4dc-eed6-44ad-b3c5-65296f5acceb",
      "skipped": false
    },
    {
      "title": "should add contestant when teams is not full",
      "fullTitle": "when in team mode should add contestant when teams is not full",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "4b502eac-b00c-47d5-8954-b7e35f419fdf",
      "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
      "skipped": false
    },
    {
      "title": "should not add contestant when teams are full",
      "fullTitle": "when in team mode should not add contestant when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "0425a21a-3363-4fcb-8c56-4bf0b216777a",
      "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in team mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "f9999201-ca7e-46c9-9c3e-b2f91ba4da2e",
      "parentUUID": "d6f925b6-030a-4b97-a3c0-2d2f867e504c",
      "skipped": false
    },
    {
      "title": "should subscribe callback to the correct event",
      "fullTitle": "#subscribeForStateChange(event, callback) should subscribe callback to the correct event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
      "isRoot": false,
      "uuid": "2b35c3ec-dc1d-4251-988d-2317dfb70390",
      "parentUUID": "4332b873-d978-4718-885a-f9ae00260698",
      "skipped": false
    },
    {
      "title": "should register when state is ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should register when state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
      "isRoot": false,
      "uuid": "1328e0de-0aa2-4b11-9998-f2ec3adfacfa",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not register when state is not ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when state is not ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
      "isRoot": false,
      "uuid": "1322a362-02dd-48cc-a85c-e588dcda7342",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not register when contestant does not exist",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "3665a511-8f2f-468b-91af-26fcad11c827",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "3bee2147-d709-4b75-b8b9-1fd56db6485d",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should not add previous round winner to winners list",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "5bf7e23a-446b-4d05-bfb5-9f39efd2fbc6",
      "parentUUID": "b64d089d-6718-45e2-b49b-f38175c94e84",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->ACCEPT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
      "isRoot": false,
      "uuid": "adc9ede9-a2d9-42b0-99e8-bb4b1427d602",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->ACCEPT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
      "isRoot": false,
      "uuid": "e377a885-7704-4421-8b1b-c2509027b97d",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should update contestant's score",
      "fullTitle": "action->ACCEPT should update contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "e05dd1d9-417f-4978-a80c-f3e756cdc08d",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should update contestant's team score",
      "fullTitle": "action->ACCEPT should update contestant's team score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "3a865d77-e0fd-415a-837a-dbe42e75b0a7",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->ACCEPT should add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "3c87f818-8190-4069-b071-86d708b55555",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->ACCEPT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "4b32d7b2-7337-47bc-9df3-6c14472c2dc8",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should clear pending winner",
      "fullTitle": "action->ACCEPT should clear pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "fac0a286-baca-4179-965b-6a5ebaa0254f",
      "parentUUID": "2dfceeb5-9752-4138-a8a1-9ba686dcd740",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->REJECT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
      "isRoot": false,
      "uuid": "e9e52828-d317-4573-9e1d-8a52a68272ee",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->REJECT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
      "isRoot": false,
      "uuid": "b08b66ab-c92d-4dd7-b6be-655643fc8cc5",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should not replace round winner with pending contestant",
      "fullTitle": "action->REJECT should not replace round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "176c4bf9-12f2-451d-b323-c5af8101c4bd",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should not update pending contestant's score",
      "fullTitle": "action->REJECT should not update pending contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "f26f84c8-42f7-434e-b189-a7a3529654ee",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should add round winner to previous winners list",
      "fullTitle": "action->REJECT should add round winner to previous winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "015590ea-6910-41ca-828f-7feed2b6d01c",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->REJECT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "b0cb114d-1b2d-444f-a9a1-9f0bcc296591",
      "parentUUID": "8b8b208b-bd54-445a-8b58-7973b4897324",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->RESET should allow when game state is ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "7d9c094d-2379-4ab0-8d56-cc68dd14ab9f",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->RESET should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "391160b3-fc1f-49c8-b069-ff1d8fd1b2a4",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->RESET should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "840e695c-d0e5-4c62-8f1a-178b28cac08e",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->RESET should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "20261770-8529-4264-a226-9535ce8ae3b3",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->RESET should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "21d5b0b7-0b5a-4c81-a0ed-02c09ae73956",
      "parentUUID": "4260d1f2-4506-4324-8952-20863c652b8a",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->DISABLE should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "e88c4fdc-1928-4691-825f-fcdc8dbd259c",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->DISABLE should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "c2b5eee7-d4cf-44d1-bfae-4492fb7ed55b",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->DISABLE should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "66b2f9cb-fa29-41c5-b883-664b3831ee16",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->DISABLE should add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "39a19807-6cdd-4500-84e8-19617cb2a2aa",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should change game state to buzzerLock",
      "fullTitle": "action->DISABLE should change game state to buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
      "isRoot": false,
      "uuid": "7035a0e8-9c56-4f7d-b10b-90686d7c2b63",
      "parentUUID": "a870422c-3715-4e0e-b8bf-b1b413e3eaeb",
      "skipped": false
    },
    {
      "title": "should allow when game state is buzzerLock",
      "fullTitle": "action->ENABLE should allow when game state is buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
      "isRoot": false,
      "uuid": "ffe0179f-51ba-4ba0-8e86-b0ab5563de8f",
      "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not buzzerLock",
      "fullTitle": "action->ENABLE should not allow when game state is not buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
      "isRoot": false,
      "uuid": "6f6d2c35-af21-46e5-a68d-f7ebb3ba6261",
      "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
      "skipped": false
    },
    {
      "title": "should change game state to ready",
      "fullTitle": "action->ENABLE should change game state to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "6b0b3a6a-6d26-47c2-b9e3-ed3c23b058b7",
      "parentUUID": "f0ae2122-4570-45fa-af61-98b5711350d3",
      "skipped": false
    },
    {
      "title": "should return the pending winner",
      "fullTitle": "#pendingWinner should return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
      "isRoot": false,
      "uuid": "c0a35806-b5af-49c5-9cc8-033f89820e46",
      "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
      "skipped": false
    },
    {
      "title": "should not return the pending winner",
      "fullTitle": "#pendingWinner should not return the pending winner",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "9ceea3fe-784d-4c72-8ee4-1ea1d8ef03c2",
      "parentUUID": "bee99667-f88e-4806-806c-f4e658ca419e",
      "skipped": false
    },
    {
      "title": "should update session name",
      "fullTitle": "#updateSessionName(name) should update session name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
      "isRoot": false,
      "uuid": "b03479c8-1d2c-4cb8-a029-c132cbc3c470",
      "parentUUID": "64b2c568-8471-48df-8d32-ebe6fd20d411",
      "skipped": false
    },
    {
      "title": "should update max contestants",
      "fullTitle": "#updateMaxContestants(maxContestants) should update max contestants",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "c74d4341-b174-4432-8b8d-5e04e6ca9a2f",
      "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
      "skipped": false
    },
    {
      "title": "should not allow below current connected amount",
      "fullTitle": "#updateMaxContestants(maxContestants) should not allow below current connected amount",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "0d030067-f539-4c31-8252-b4d86c762df5",
      "parentUUID": "0cc5ed98-24d4-4aa0-959d-9953e15c0e7d",
      "skipped": false
    },
    {
      "title": "should update team size",
      "fullTitle": "#updateTeamSize(teamSize) should update team size",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "1c9f963f-d689-4983-9e37-17017c15b0a5",
      "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateTeamSize(teamSize) should not allow below current setting",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "a03d7631-7f66-441c-bebe-d8ba2c2ecc7f",
      "parentUUID": "45bb19a7-6af1-4118-9483-3ac621953677",
      "skipped": false
    },
    {
      "title": "should update max teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should update max teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "ef59451f-4116-4782-8d04-a97e5c4cbf13",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should add teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should add teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "6f1d8fc5-49f7-4f59-ae73-e7809e77aa68",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow below current setting",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "8997af59-0679-42c4-9253-62cfdb054bbf",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should not allow if teams are PLAYER_CHOICE",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "caa1fb40-7c85-4600-808a-68452973a820",
      "parentUUID": "0c1f5d74-e5df-4843-beae-a959760f5124",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "1c6ed4e2-5613-44f6-9c6d-77ec200793f2",
      "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "a542ffd4-deb0-4de9-8078-2a516859d619",
      "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "25e2294b-71ec-4534-8e3a-1a526852cc1b",
      "parentUUID": "b524515d-a2a9-4667-92f7-056c7c1db15d",
      "skipped": false
    },
    {
      "title": "add and return session",
      "fullTitle": "#add(host, settings) add and return session",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
      "isRoot": false,
      "uuid": "09bd5dfd-dc04-49eb-83b6-d343cbab8c17",
      "parentUUID": "c159301c-20d1-4789-8e72-2802a2f644a5",
      "skipped": false
    },
    {
      "title": "when given valid id should return session",
      "fullTitle": "#getById(id) when given valid id should return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
      "isRoot": false,
      "uuid": "9ecebd71-0152-4c0d-ab91-649ec1a2494d",
      "parentUUID": "026d8756-b072-41ae-8c55-6dfede301a25",
      "skipped": false
    },
    {
      "title": "should remove complete sc",
      "fullTitle": "#purgeCompleted() should remove complete sc",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "e1c204cb-3690-4dff-8a66-cf4b132bf74e",
      "parentUUID": "c006bfd9-74a1-4442-b7d4-af719687477c",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#hasTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "339a1c0b-ebd3-4474-b470-cbfb1240ddc4",
      "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#hasTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "0c4b5dc1-0adc-4733-870e-22799d379691",
      "parentUUID": "9b1551f5-d710-4dd0-8697-0cc858f8f331",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamSize should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "d2d654aa-3b94-48fd-b67f-2917160e0488",
      "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamSize should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "7fcb6385-6efc-4edb-a064-326b68d50ea2",
      "parentUUID": "dc14de16-4d00-4a04-9bfb-128ff78adde5",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "618baa7a-628c-4747-9fd6-9b80bbb26036",
      "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "d4d9916d-844f-4701-82a5-4ea1e3daf31d",
      "parentUUID": "2f8f85d2-35e8-4766-8d88-51f3d4e25e53",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeaderSelectionMethod should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "69d6e1bd-03d1-466f-9045-6b8d0604e660",
      "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamLeaderSelectionMethod should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "fb58f53b-2aa8-46c8-be36-62417abb4614",
      "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeaderSelectionMethod should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "24d04011-5962-417d-894b-0b45ff3917dd",
      "parentUUID": "51d308ad-f8b8-447f-884a-9ca0c568b55f",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNameEdit should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "bd9c6dae-d477-4110-b913-9221f0c3688c",
      "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamNameEdit should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "4924a57a-3b58-417b-800b-93b869cd0ace",
      "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNameEdit should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "24e6a63f-cecd-48a1-a9f5-eaf857ef9111",
      "parentUUID": "c3c1dcd3-90e6-4060-9db0-4b2a0ff2c7d5",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxContestants should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "079d3a3c-160d-4887-b3c7-29f6e9ebb734",
      "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxContestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "5ce39c9f-84cb-449f-8922-baa18bf49554",
      "parentUUID": "1f372a24-a47b-482a-8966-961bb9f5a68b",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#sessionName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "cf83e59b-effe-4b36-b551-23e8b172dc00",
      "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#sessionName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "11da9f0e-9556-409a-8607-f211a6c483d4",
      "parentUUID": "b307a91d-d3ca-43e3-98f5-4fdb875a9601",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNames should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "090d3103-123f-4308-9ef5-a4fa599859b1",
      "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNames should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "1ac0ae41-1639-43f8-8569-927bb0495945",
      "parentUUID": "95ba3f80-c0ca-410a-b038-1438cf38129c",
      "skipped": false
    },
    {
      "title": "should throw when settings.maxTeams is less than 1",
      "fullTitle": "#create(teams, settings) should throw when settings.maxTeams is less than 1",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "08dd4a81-310f-4ce8-913a-0935278014b1",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should create the correct amount of teams",
      "fullTitle": "#create(teams, settings) should create the correct amount of teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "7c8dd751-099d-4c32-8de2-c2e0f126d166",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should not fail with a large team size",
      "fullTitle": "#create(teams, settings) should not fail with a large team size",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
      "isRoot": false,
      "uuid": "b670191f-f3f9-48ed-a9f3-46b554de9497",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should use settings.teamNames first, before random selection",
      "fullTitle": "#create(teams, settings) should use settings.teamNames first, before random selection",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a3befb36-e2ec-42fa-9fa3-e39bcc268031",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should only create a single team when using unlimited teams",
      "fullTitle": "#create(teams, settings) should only create a single team when using unlimited teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "97f44663-cea2-450c-8795-ade0690443e2",
      "parentUUID": "5e284834-65ca-4b29-9bb3-e2e04f78f46d",
      "skipped": false
    },
    {
      "title": "should add a team",
      "fullTitle": "#add(teams, settings) should add a team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "3a83f73b-fa0b-4f2e-beff-3b354e57f219",
      "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
      "skipped": false
    },
    {
      "title": "should reuse team names specified in settings",
      "fullTitle": "#add(teams, settings) should reuse team names specified in settings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
      "isRoot": false,
      "uuid": "a755564e-cb8e-4ec8-b29c-86bd46ed645e",
      "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
      "skipped": false
    },
    {
      "title": "should factor in team names which are already in use",
      "fullTitle": "#add(teams, settings) should factor in team names which are already in use",
      "timedOut": false,
      "duration": 107,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
      "isRoot": false,
      "uuid": "cd9211a6-ddc1-43ad-a9ca-d6366df1a42e",
      "parentUUID": "58f549c5-ba24-425a-8279-c10ebf01aea0",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "71b332e6-8d71-4d52-8388-51e74d552e0a",
      "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "85563149-ca02-4825-b8ce-e05b7245b3b5",
      "parentUUID": "69b9470c-b396-4f52-a4a6-22ec582cfa8e",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeader should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "101d8839-0483-48c8-9fa1-8e35301193d8",
      "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeader should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "f2c7c8ca-ec21-4790-ae27-0f72d9df7984",
      "parentUUID": "c00b5631-75f7-48fb-bcc6-a5f1ce8ee56c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "919fd56e-4d58-4f6b-a59d-0d91a59c0154",
      "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "07330352-085c-4500-92f8-2ceeb2159725",
      "parentUUID": "acfb9ca3-1075-4417-a6bd-68bea28de089",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "cbdd0bcf-1200-4d36-92a2-b172a8c497a0",
      "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
      "isRoot": false,
      "uuid": "14a1bb39-c1a7-4d0b-85c1-b84dc9da1357",
      "parentUUID": "59ec6acc-6c4a-4d8e-ad67-bfed7c7e7f85",
      "skipped": false
    },
    {
      "title": "should update the teams score",
      "fullTitle": "when a contestant scores should update the teams score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "4a78917f-e0e1-485f-82be-09f5156b8f6c",
      "parentUUID": "8dfdf8a5-8dd5-401f-976e-d5c91fdab770",
      "skipped": false
    },
    {
      "title": "should allow it when no team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "ffe53a01-8a74-4014-bdc0-eed76180dbe2",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should not allow it when a team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
      "isRoot": false,
      "uuid": "a40ee793-39be-4dd0-98b6-ad31dbb3fa28",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should not allow it when a contestant is not in team",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
      "isRoot": false,
      "uuid": "5f42c648-77a6-4700-82a8-6b774a063b2b",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should allow it when a team leader is set and host override is flagged",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "43f0c65e-f6e5-4d9f-91e0-7d4c53309047",
      "parentUUID": "a148bdd0-f854-4e1b-84bd-19a9aa01795d",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "a6b6bcca-f972-465d-a13c-d6633e1a975b",
      "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
      "skipped": false
    },
    {
      "title": "should not change name when setting do not allow it",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "56388a54-b8f7-4a6d-84e6-8f75cd07b179",
      "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
      "skipped": false
    },
    {
      "title": "should not change name when name contains profanity",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "9c442488-bae0-4345-a123-136ffbbeab9f",
      "parentUUID": "2e3d0c67-93b3-4a42-9881-0bc8f7e66f5b",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "when host override should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "77f97981-8ec3-499f-bedb-a208d6cb2c27",
      "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
      "skipped": false
    },
    {
      "title": "should change name when setting do not allow it",
      "fullTitle": "when host override should change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "1bbabf66-8cf7-4072-a60f-e9f1b9579292",
      "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
      "skipped": false
    },
    {
      "title": "should change name when name contains profanity",
      "fullTitle": "when host override should change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "8ca8ef4d-b07d-4c35-982f-8ea82a7d9ea0",
      "parentUUID": "fa750027-1ee0-4006-a6d7-1e5ebcb6fb38",
      "skipped": false
    },
    {
      "title": "should get contestant when contest with username exists",
      "fullTitle": "getContestantByUsername(username) should get contestant when contest with username exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
      "isRoot": false,
      "uuid": "ee223e05-37b8-4b96-88fa-e2aa65683f14",
      "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
      "skipped": false
    },
    {
      "title": "should not get contestant when contest with username does not exist",
      "fullTitle": "getContestantByUsername(username) should not get contestant when contest with username does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
      "isRoot": false,
      "uuid": "10271cd3-6510-4f4f-ab43-006e63762746",
      "parentUUID": "9e0e8376-5432-473d-aa88-548e7f766576",
      "skipped": false
    },
    {
      "title": "should return true when team with teamName does exist",
      "fullTitle": "#contains(teamName) should return true when team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
      "isRoot": false,
      "uuid": "245ee1bc-5d0c-40ee-968d-327ac8371eed",
      "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
      "skipped": false
    },
    {
      "title": "should return false when no team with teamName does exist",
      "fullTitle": "#contains(teamName) should return false when no team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "a846026f-9db6-48ab-b834-197f0aa12f6d",
      "parentUUID": "ea36e66e-a3fb-4ed6-b2c8-c99d59914042",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "db37f3d3-d755-4cf4-9934-dc66736fd505",
      "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "cba0efb3-7fe3-410f-8a11-ad2f1f5f9191",
      "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "0329dd9f-0e6d-429b-80c6-3ef8de83daf8",
      "parentUUID": "c45f5600-3517-43a4-b150-20ad89418466",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "e72e72f0-49b6-419e-8b13-544ac42a0102",
      "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "4ad8dac8-c974-43be-ba1b-e890825d5cd0",
      "parentUUID": "e20eac56-faef-4d0a-b4de-bc7d40862723",
      "skipped": false
    },
    {
      "title": "should add the given team",
      "fullTitle": "#add(team) should add the given team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "cef1aeab-29f1-498c-820c-59873f727fa1",
      "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
      "skipped": false
    },
    {
      "title": "should error if team with teamName already exists",
      "fullTitle": "#add(team) should error if team with teamName already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "864de669-cfdb-49b7-af8c-2f02512bf9af",
      "parentUUID": "7b9e5ed8-1f7d-4fd2-846c-ba647b941924",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#remove(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "8dd9ad36-cd1b-4174-86b1-9f69ae9e2a04",
      "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#remove(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a315cc18-c6a9-4aab-97fb-43e43970342e",
      "parentUUID": "94d02e28-bf78-4b80-b1b7-0df18b2c6f76",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#removeByTeamName(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "ccab8c08-7a0f-4cc5-9022-30bee6d0fb24",
      "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
      "skipped": false
    },
    {
      "title": "should ignore team name case",
      "fullTitle": "#removeByTeamName(team) should ignore team name case",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "0723ffdd-dd29-442e-bbc4-9b16b1c77b94",
      "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#removeByTeamName(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b1ff0324-bae8-4080-9d3f-a6c7379fa5ad",
      "parentUUID": "8901e37d-8eba-4b9c-a5e8-006a8230b849",
      "skipped": false
    },
    {
      "title": "should give contestant an id",
      "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
      "isRoot": false,
      "uuid": "ee32fac8-27b1-4639-8dd2-938d855dcaef",
      "parentUUID": "805302e7-8c3e-414c-abce-9e6769c840d5",
      "skipped": false
    },
    {
      "title": "should return a valid response",
      "fullTitle": "when teams are full should return a valid response",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "8fedb045-21c6-48b2-bc55-d4029f60926e",
      "parentUUID": "9fbcc8fb-c7c1-4ce9-bbac-1fde8fb0ffb0",
      "skipped": false
    },
    {
      "title": "should inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
      "isRoot": false,
      "uuid": "0537a962-4517-42a0-9c85-7805803d6cca",
      "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
      "isRoot": false,
      "uuid": "7475dd21-4c79-4534-b5c9-2734bbc4b4ca",
      "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
      "skipped": false
    },
    {
      "title": "should not add contestant as teamLeader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
      "isRoot": false,
      "uuid": "9a75b824-fc35-44d5-b909-5641dd9dbd76",
      "parentUUID": "e4df9823-7e0f-401c-988e-33693b053e63",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is RANDOM should not inquire for team leader",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
      "isRoot": false,
      "uuid": "f8cfbfdf-2a66-46f1-b789-3f61893cbb26",
      "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
      "skipped": false
    },
    {
      "title": "should automatically add team leader when team is filled",
      "fullTitle": "when teamLeader selection is RANDOM should automatically add team leader when team is filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
      "isRoot": false,
      "uuid": "a11ac1bd-d736-4b80-b743-6c8765bc8234",
      "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
      "skipped": false
    },
    {
      "title": "should not automatically add team leader when team is not filled",
      "fullTitle": "when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
      "isRoot": false,
      "uuid": "2202a68c-2e92-4cc0-a608-caa06df70418",
      "parentUUID": "987c3f20-a440-4c50-938a-bdc489e59314",
      "skipped": false
    },
    {
      "title": "should add team when teams are full",
      "fullTitle": "when set to use unlimited teams should add team when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "7e07ff88-275e-4ed5-ab7f-230afa358616",
      "parentUUID": "2f794634-6504-41f9-bcf5-f8a0ebed30c4",
      "skipped": false
    },
    {
      "title": "should throw when no team name is given",
      "fullTitle": "when team selection method is PLAYER_CHOICE should throw when no team name is given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
      "isRoot": false,
      "uuid": "926537c8-b59d-492a-9cd8-d2ba6455b1ad",
      "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
      "skipped": false
    },
    {
      "title": "should add contestant to correct team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should add contestant to correct team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a827acba-fdf1-4f91-9b67-67c770e25317",
      "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
      "skipped": false
    },
    {
      "title": "should not add to full team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not add to full team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "e69ce001-3bfe-4d62-ba04-4652aa7b1ae4",
      "parentUUID": "b4c638de-fe77-4a69-a920-e79bbf87162b",
      "skipped": false
    },
    {
      "title": "should get team of contestant",
      "fullTitle": "getByContestant(contestant) should get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
      "isRoot": false,
      "uuid": "d4e5e573-951e-4190-9b38-aa5005bcb766",
      "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
      "skipped": false
    },
    {
      "title": "should not get team of contestant",
      "fullTitle": "getByContestant(contestant) should not get team of contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "de33232b-8e44-4edb-9ac9-673ffc382557",
      "parentUUID": "be0b059f-01c1-42d4-8950-430069aa135c",
      "skipped": false
    },
    {
      "title": "should get team when team with name exists",
      "fullTitle": "getByTeamName(temName) should get team when team with name exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
      "isRoot": false,
      "uuid": "a006afa1-1355-46b0-a340-cf097fede32a",
      "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
      "skipped": false
    },
    {
      "title": "should not get team when team with name does not exist",
      "fullTitle": "getByTeamName(temName) should not get team when team with name does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "9526f5a1-0be9-4bd9-b537-2f105a5954a2",
      "parentUUID": "8025bf5e-8049-49c7-8a8d-97a5834db35b",
      "skipped": false
    },
    {
      "title": "should not return full teams",
      "fullTitle": "getAvailable(settings) should not return full teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "067095da-223b-410d-942d-5faf2b16e5e7",
      "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
      "skipped": false
    },
    {
      "title": "should return teams with space",
      "fullTitle": "getAvailable(settings) should return teams with space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "767e3f02-9073-4eaf-98e2-2c77655fb9a3",
      "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
      "skipped": false
    },
    {
      "title": "should return teams with unlimited space",
      "fullTitle": "getAvailable(settings) should return teams with unlimited space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "853d4a16-85c8-4612-aabd-994a389716f9",
      "parentUUID": "6a275fd5-46f4-4595-89ea-f735bc6eb104",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}