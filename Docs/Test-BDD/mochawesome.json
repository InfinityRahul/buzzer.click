{
  "reportTitle": "buzzer.click",
  "stats": {
    "suites": 98,
    "tests": 202,
    "passes": 202,
    "pending": 0,
    "failures": 0,
    "start": "2016-09-30T01:33:25.904Z",
    "end": "2016-09-30T01:33:26.790Z",
    "duration": 886,
    "testsRegistered": 202,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "AddContestantResponse",
        "suites": [
          {
            "title": "#wasSuccessful",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #wasSuccessful should throw on set value",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9340e0b4-8737-46df-91a8-782344934b43",
                "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #wasSuccessful should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
                "isRoot": false,
                "uuid": "f47ad849-eb7e-4bf6-a7b5-2e87ec299f16",
                "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #wasSuccessful should throw on set value",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9340e0b4-8737-46df-91a8-782344934b43",
                "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #wasSuccessful should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
                "isRoot": false,
                "uuid": "f47ad849-eb7e-4bf6-a7b5-2e87ec299f16",
                "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "#enquireForTeamLeaderPosition",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "3a1bd56d-adcc-4151-80c5-886fc1be464e",
                "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "350899c5-a2c4-42bb-a6df-0da92c1574be",
                "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "97109006-6911-4471-b2e0-fec877cdfa3e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "3a1bd56d-adcc-4151-80c5-886fc1be464e",
                "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "350899c5-a2c4-42bb-a6df-0da92c1574be",
                "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#errorMessage",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #errorMessage should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9b72aec3-ab53-47a7-8195-c5966fc62964",
                "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #errorMessage should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
                "isRoot": false,
                "uuid": "07760ef4-e0db-4d65-a692-2176039479f8",
                "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #errorMessage should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9b72aec3-ab53-47a7-8195-c5966fc62964",
                "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #errorMessage should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
                "isRoot": false,
                "uuid": "07760ef4-e0db-4d65-a692-2176039479f8",
                "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#setNotSuccessful(errorMessage)",
            "suites": [],
            "tests": [
              {
                "title": "should change the state to not successful",
                "fullTitle": "AddContestantResponse #setNotSuccessful(errorMessage) should change the state to not successful",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
                "isRoot": false,
                "uuid": "5d53ae84-d19f-4800-9144-8c1bfb34a330",
                "parentUUID": "6383027f-57dc-4224-9695-51354ce59e20",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "6383027f-57dc-4224-9695-51354ce59e20",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should change the state to not successful",
                "fullTitle": "AddContestantResponse #setNotSuccessful(errorMessage) should change the state to not successful",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
                "isRoot": false,
                "uuid": "5d53ae84-d19f-4800-9144-8c1bfb34a330",
                "parentUUID": "6383027f-57dc-4224-9695-51354ce59e20",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/AddContestantResponseTests.js",
        "uuid": "4cc8cd89-e165-4825-9d3e-df7e6168fead",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Contestant",
        "suites": [
          {
            "title": "#username",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Contestant #username should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "1674bfe8-4701-45ca-aa9e-691ab5f9b903",
                "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #username should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "106a5a05-51c4-4d09-9ce6-c25ebbcd8ae1",
                "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Contestant #username should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "1674bfe8-4701-45ca-aa9e-691ab5f9b903",
                "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #username should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "106a5a05-51c4-4d09-9ce6-c25ebbcd8ae1",
                "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#score",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Contestant #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "bed09184-e290-45f1-b338-ec428863fb49",
                "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3f8fc234-0c66-421f-8560-b7a842d196b9",
                "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Contestant #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "bed09184-e290-45f1-b338-ec428863fb49",
                "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3f8fc234-0c66-421f-8560-b7a842d196b9",
                "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#incrementScore()",
            "suites": [],
            "tests": [
              {
                "title": "should increment the contestant's score",
                "fullTitle": "Contestant #incrementScore() should increment the contestant's score",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3cc882f9-c49d-4da8-8110-d3bdc2c40791",
                "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
                "skipped": false
              },
              {
                "title": "should emit scoreUpdate event",
                "fullTitle": "Contestant #incrementScore() should emit scoreUpdate event",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
                "isRoot": false,
                "uuid": "411a7fea-cd83-4321-bf98-81f7cf7e60d4",
                "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should increment the contestant's score",
                "fullTitle": "Contestant #incrementScore() should increment the contestant's score",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3cc882f9-c49d-4da8-8110-d3bdc2c40791",
                "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
                "skipped": false
              },
              {
                "title": "should emit scoreUpdate event",
                "fullTitle": "Contestant #incrementScore() should emit scoreUpdate event",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
                "isRoot": false,
                "uuid": "411a7fea-cd83-4321-bf98-81f7cf7e60d4",
                "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ContestantTests.js",
        "uuid": "f1b40c0e-7de1-4b40-b61c-828aa67a29af",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "IdentifierUtility",
        "suites": [
          {
            "title": "#generateSessionId()",
            "suites": [],
            "tests": [
              {
                "title": "should return a non-null non-empty key",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a non-null non-empty key",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "f293d740-77be-42c6-8b01-68a44f9ef071",
                "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
                "skipped": false
              },
              {
                "title": "should return a id of the correct length",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a id of the correct length",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
                "isRoot": false,
                "uuid": "73b1300b-d214-484c-819c-0e977fee77ef",
                "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
                "skipped": false
              },
              {
                "title": "should record id so it cannot be reused.",
                "fullTitle": "IdentifierUtility #generateSessionId() should record id so it cannot be reused.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
                "isRoot": false,
                "uuid": "5f5f54f3-551d-47d8-8781-0d9f1b032287",
                "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a non-null non-empty key",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a non-null non-empty key",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "f293d740-77be-42c6-8b01-68a44f9ef071",
                "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
                "skipped": false
              },
              {
                "title": "should return a id of the correct length",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a id of the correct length",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
                "isRoot": false,
                "uuid": "73b1300b-d214-484c-819c-0e977fee77ef",
                "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
                "skipped": false
              },
              {
                "title": "should record id so it cannot be reused.",
                "fullTitle": "IdentifierUtility #generateSessionId() should record id so it cannot be reused.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
                "isRoot": false,
                "uuid": "5f5f54f3-551d-47d8-8781-0d9f1b032287",
                "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "#generateParticipantId()",
            "suites": [],
            "tests": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #generateParticipantId() should return a UUID",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
                "isRoot": false,
                "uuid": "a9223ddd-72fc-4aea-8dc5-10afa698776e",
                "parentUUID": "93e7afef-e19c-40e7-a005-6aeae295187e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "93e7afef-e19c-40e7-a005-6aeae295187e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #generateParticipantId() should return a UUID",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
                "isRoot": false,
                "uuid": "a9223ddd-72fc-4aea-8dc5-10afa698776e",
                "parentUUID": "93e7afef-e19c-40e7-a005-6aeae295187e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4
          },
          {
            "title": "#registerSessionIdsInUse(ids)",
            "suites": [],
            "tests": [
              {
                "title": "should store the ids to stop reuse",
                "fullTitle": "IdentifierUtility #registerSessionIdsInUse(ids) should store the ids to stop reuse",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "87715ee6-565f-4a9c-a8ff-7e913a7a9c8d",
                "parentUUID": "5e7870d2-4c43-4f9d-b26d-494c36cb9855",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "5e7870d2-4c43-4f9d-b26d-494c36cb9855",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should store the ids to stop reuse",
                "fullTitle": "IdentifierUtility #registerSessionIdsInUse(ids) should store the ids to stop reuse",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "87715ee6-565f-4a9c-a8ff-7e913a7a9c8d",
                "parentUUID": "5e7870d2-4c43-4f9d-b26d-494c36cb9855",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#releaseSessionId(id)",
            "suites": [],
            "tests": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #releaseSessionId(id) should return a UUID",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "f05699d6-070c-43bf-8b17-18810452dd47",
                "parentUUID": "60f132e2-f28e-4e9e-832c-8f46d0348901",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "60f132e2-f28e-4e9e-832c-8f46d0348901",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #releaseSessionId(id) should return a UUID",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "f05699d6-070c-43bf-8b17-18810452dd47",
                "parentUUID": "60f132e2-f28e-4e9e-832c-8f46d0348901",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
        "uuid": "ba44c39c-6e3e-4db4-a7e4-6ba4c0b337f1",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "ParamCheck",
        "suites": [
          {
            "title": "#isInstanceAndTypeOf()",
            "suites": [],
            "tests": [
              {
                "title": "should return false when not referenced",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not referenced",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
                "isRoot": false,
                "uuid": "a5797d70-af5d-46c0-9cc7-b88042ed3b3b",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return false when null",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
                "isRoot": false,
                "uuid": "7f07015c-e55c-43f2-9a5e-1d11867d48f5",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return false when not the correct type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not the correct type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "c22aa9fd-988e-4d8c-ab26-603ce30ec300",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return true when is a built-in type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is a built-in type",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
                "isRoot": false,
                "uuid": "ee7ad2c1-0185-45cb-a2f8-d80f64bfad6e",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return true when is user defined type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is user defined type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
                "isRoot": false,
                "uuid": "5427b7bb-3085-4477-bb18-9638d3ccb8dc",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParamCheckTests.js",
            "uuid": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParamCheckTests.js",
            "passes": [
              {
                "title": "should return false when not referenced",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not referenced",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
                "isRoot": false,
                "uuid": "a5797d70-af5d-46c0-9cc7-b88042ed3b3b",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return false when null",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
                "isRoot": false,
                "uuid": "7f07015c-e55c-43f2-9a5e-1d11867d48f5",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return false when not the correct type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not the correct type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "c22aa9fd-988e-4d8c-ab26-603ce30ec300",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return true when is a built-in type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is a built-in type",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
                "isRoot": false,
                "uuid": "ee7ad2c1-0185-45cb-a2f8-d80f64bfad6e",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              },
              {
                "title": "should return true when is user defined type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is user defined type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
                "isRoot": false,
                "uuid": "5427b7bb-3085-4477-bb18-9638d3ccb8dc",
                "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParamCheckTests.js",
        "uuid": "0ffcd166-52fe-49fb-84d7-cc2c3cc86f55",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParamCheckTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Participant",
        "suites": [
          {
            "title": "#id",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Participant #id should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "b4bd25b7-d3ec-475a-a759-c93c61ff1f3f",
                "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "a936051e-7f89-480c-9274-ac12ff56be45",
                "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "ab08717b-d592-43be-9249-1f659bff3889",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Participant #id should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "b4bd25b7-d3ec-475a-a759-c93c61ff1f3f",
                "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "a936051e-7f89-480c-9274-ac12ff56be45",
                "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#isDisconnected",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participant #isDisconnected should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "b418af02-0bdc-4a76-9bba-4ec8ac6211f3",
                "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #isDisconnected should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "3b1bbede-b7ee-4ef4-8bdd-228cb05a1faa",
                "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participant #isDisconnected should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "b418af02-0bdc-4a76-9bba-4ec8ac6211f3",
                "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #isDisconnected should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "3b1bbede-b7ee-4ef4-8bdd-228cb05a1faa",
                "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#disconnect()",
            "suites": [],
            "tests": [
              {
                "title": "should change participant state to disconnected",
                "fullTitle": "Participant #disconnect() should change participant state to disconnected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
                "isRoot": false,
                "uuid": "c4a492ee-7a71-4bcd-a45e-fa5c5e842f9d",
                "parentUUID": "72f85333-7346-4fdc-87e4-3c9249abe262",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "72f85333-7346-4fdc-87e4-3c9249abe262",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should change participant state to disconnected",
                "fullTitle": "Participant #disconnect() should change participant state to disconnected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
                "isRoot": false,
                "uuid": "c4a492ee-7a71-4bcd-a45e-fa5c5e842f9d",
                "parentUUID": "72f85333-7346-4fdc-87e4-3c9249abe262",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#reconnect()",
            "suites": [],
            "tests": [
              {
                "title": "should change participant state to connected",
                "fullTitle": "Participant #reconnect() should change participant state to connected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
                "isRoot": false,
                "uuid": "d31b8444-f0eb-4673-a822-fb1ab330b71b",
                "parentUUID": "73342c28-8737-4423-b560-5484ea666116",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "73342c28-8737-4423-b560-5484ea666116",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should change participant state to connected",
                "fullTitle": "Participant #reconnect() should change participant state to connected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
                "isRoot": false,
                "uuid": "d31b8444-f0eb-4673-a822-fb1ab330b71b",
                "parentUUID": "73342c28-8737-4423-b560-5484ea666116",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParticipantTests.js",
        "uuid": "718c61b2-3bb4-45eb-bcef-9e9fd7ba0b08",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Participants",
        "suites": [
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "ae2c54f0-3019-446c-a81a-d8f8780a39fa",
                "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #all should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "77350b80-6ea8-4eab-abb0-07262d269836",
                "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Participants #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "e42fef23-753b-442c-b66e-0750bed12378",
                "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "ae2c54f0-3019-446c-a81a-d8f8780a39fa",
                "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #all should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "77350b80-6ea8-4eab-abb0-07262d269836",
                "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Participants #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "e42fef23-753b-442c-b66e-0750bed12378",
                "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#length",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #length should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "afcb8a33-307c-4da4-bdfd-09c518da388c",
                "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "66a29bec-258d-4d2f-8a04-29c11575cd11",
                "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #length should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "afcb8a33-307c-4da4-bdfd-09c518da388c",
                "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "66a29bec-258d-4d2f-8a04-29c11575cd11",
                "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contains(id)",
            "suites": [],
            "tests": [
              {
                "title": "should return true when id does exist",
                "fullTitle": "Participants #contains(id) should return true when id does exist",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
                "isRoot": false,
                "uuid": "4cea9da7-0ebe-4976-a570-2f2e92d86534",
                "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
                "skipped": false
              },
              {
                "title": "should return false when id does not exist",
                "fullTitle": "Participants #contains(id) should return false when id does not exist",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "ab1de675-9c8e-4f1b-912f-4529485b7f69",
                "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should return true when id does exist",
                "fullTitle": "Participants #contains(id) should return true when id does exist",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
                "isRoot": false,
                "uuid": "4cea9da7-0ebe-4976-a570-2f2e92d86534",
                "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
                "skipped": false
              },
              {
                "title": "should return false when id does not exist",
                "fullTitle": "Participants #contains(id) should return false when id does not exist",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "ab1de675-9c8e-4f1b-912f-4529485b7f69",
                "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#add(participant)",
            "suites": [],
            "tests": [
              {
                "title": "should add the given participant",
                "fullTitle": "Participants #add(participant) should add the given participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "15737b6e-ec78-45e4-beab-ae19ac1f33ab",
                "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
                "skipped": false
              },
              {
                "title": "should error if participant with id already exists",
                "fullTitle": "Participants #add(participant) should error if participant with id already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "7e51fb5d-e678-4e9b-8a6f-cded4fbd4232",
                "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
                "skipped": false
              },
              {
                "title": "should emit add event",
                "fullTitle": "Participants #add(participant) should emit add event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
                "isRoot": false,
                "uuid": "510116aa-ab04-4d38-ad5d-a23ce8fe4b8f",
                "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should add the given participant",
                "fullTitle": "Participants #add(participant) should add the given participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "15737b6e-ec78-45e4-beab-ae19ac1f33ab",
                "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
                "skipped": false
              },
              {
                "title": "should error if participant with id already exists",
                "fullTitle": "Participants #add(participant) should error if participant with id already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "7e51fb5d-e678-4e9b-8a6f-cded4fbd4232",
                "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
                "skipped": false
              },
              {
                "title": "should emit add event",
                "fullTitle": "Participants #add(participant) should emit add event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
                "isRoot": false,
                "uuid": "510116aa-ab04-4d38-ad5d-a23ce8fe4b8f",
                "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#remove(participant)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #remove(participant) should remove the existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "72c91ece-3ea2-4716-898d-42f88a885ebb",
                "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #remove(participant) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "9b16d67e-bef0-4d7a-b7bd-e0234155fbca",
                "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "b9ab61d0-0909-4024-9ea2-e116824914c5",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #remove(participant) should remove the existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "72c91ece-3ea2-4716-898d-42f88a885ebb",
                "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #remove(participant) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "9b16d67e-bef0-4d7a-b7bd-e0234155fbca",
                "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#removeById(id)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #removeById(id) should remove the existing participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "ec2e62b0-2d9e-4d36-b878-ed0924980269",
                "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #removeById(id) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "f3e1ea93-d0dd-4d35-8d25-ca5fd14c8347",
                "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #removeById(id) should remove the existing participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "ec2e62b0-2d9e-4d36-b878-ed0924980269",
                "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #removeById(id) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "f3e1ea93-d0dd-4d35-8d25-ca5fd14c8347",
                "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParticipantsTests.js",
        "uuid": "6cb99808-1fe1-4f60-b7f8-89cf49a8b3c1",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Session",
        "suites": [
          {
            "title": "#constructor",
            "suites": [],
            "tests": [
              {
                "title": "should create teams",
                "fullTitle": "Session #constructor should create teams",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "31a78433-2628-4923-a275-2954e0ddbb81",
                "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
                "skipped": false
              },
              {
                "title": "should not create teams",
                "fullTitle": "Session #constructor should not create teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
                "isRoot": false,
                "uuid": "8d54a98b-14ac-4987-8edc-a032893670ec",
                "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "43ccfd42-9119-407c-bccb-b9de4367c691",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should create teams",
                "fullTitle": "Session #constructor should create teams",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "31a78433-2628-4923-a275-2954e0ddbb81",
                "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
                "skipped": false
              },
              {
                "title": "should not create teams",
                "fullTitle": "Session #constructor should not create teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
                "isRoot": false,
                "uuid": "8d54a98b-14ac-4987-8edc-a032893670ec",
                "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6
          },
          {
            "title": "#id",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #id should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "1fa1e23a-0d88-4022-aac0-393bdcce081f",
                "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #id should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "f33b2a16-d6c6-47a7-9776-9600f283212d",
                "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #id should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "1fa1e23a-0d88-4022-aac0-393bdcce081f",
                "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #id should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "f33b2a16-d6c6-47a7-9776-9600f283212d",
                "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#roundsPlayed",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundsPlayed should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4ebb88f2-09aa-4084-936f-f2f69ffd8a92",
                "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundsPlayed should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "063cf50a-6ea6-46e0-87ae-1c8cafe72a1c",
                "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundsPlayed should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4ebb88f2-09aa-4084-936f-f2f69ffd8a92",
                "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundsPlayed should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "063cf50a-6ea6-46e0-87ae-1c8cafe72a1c",
                "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#previousWinners",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #previousWinners should throw on set value",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "82dc37a1-a743-48d1-bf18-afa3c334e935",
                "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #previousWinners should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "13dbff15-b09d-458c-8c05-3c2340426379",
                "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #previousWinners should throw on set value",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "82dc37a1-a743-48d1-bf18-afa3c334e935",
                "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #previousWinners should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "13dbff15-b09d-458c-8c05-3c2340426379",
                "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "#roundWinner",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundWinner should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9f04ce7e-0b71-47d1-a696-ae6bdfce6105",
                "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundWinner should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "e26bf150-e518-45dc-8cf1-672dcc77d142",
                "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundWinner should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9f04ce7e-0b71-47d1-a696-ae6bdfce6105",
                "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundWinner should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "e26bf150-e518-45dc-8cf1-672dcc77d142",
                "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#isSessionCompleted",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "f22049e1-120c-4a84-902e-78ba05a3f9d5",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#observers",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #observers should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "feda1c15-0bd2-4964-8ba5-028e8f465e57",
                "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #observers should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
                "isRoot": false,
                "uuid": "4b04ddd5-39f0-4df1-815a-39cb949cbb77",
                "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "e5ce108a-d936-43ca-b06e-158bf5690486",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #observers should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "feda1c15-0bd2-4964-8ba5-028e8f465e57",
                "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #observers should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
                "isRoot": false,
                "uuid": "4b04ddd5-39f0-4df1-815a-39cb949cbb77",
                "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contestants",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "402868f3-1dae-465c-a446-cc77e87b39a6",
                "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
                "isRoot": false,
                "uuid": "2ceeaf4a-f30b-41e3-8aef-3ff157a40441",
                "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "402868f3-1dae-465c-a446-cc77e87b39a6",
                "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
                "isRoot": false,
                "uuid": "2ceeaf4a-f30b-41e3-8aef-3ff157a40441",
                "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#host",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #host should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "637f3e0a-b5ed-4e9e-9f05-5f3a8563242e",
                "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #host should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
                "isRoot": false,
                "uuid": "cddd9ec0-7c00-4f21-8d44-86251a191ae4",
                "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #host should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "637f3e0a-b5ed-4e9e-9f05-5f3a8563242e",
                "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #host should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
                "isRoot": false,
                "uuid": "cddd9ec0-7c00-4f21-8d44-86251a191ae4",
                "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#currentState",
            "suites": [],
            "tests": [
              {
                "title": "should get value",
                "fullTitle": "Session #currentState should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "577d5364-906c-4c9d-8163-4adb90389e28",
                "parentUUID": "5cd07bdf-e9c2-4a0d-9271-a7b8cd67b7c3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "5cd07bdf-e9c2-4a0d-9271-a7b8cd67b7c3",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should get value",
                "fullTitle": "Session #currentState should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "577d5364-906c-4c9d-8163-4adb90389e28",
                "parentUUID": "5cd07bdf-e9c2-4a0d-9271-a7b8cd67b7c3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#incrementRoundsPlayed()",
            "suites": [],
            "tests": [
              {
                "title": "should increment rounds played",
                "fullTitle": "Session #incrementRoundsPlayed() should increment rounds played",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "804d6f38-795f-47e0-b66b-fcc26224195c",
                "parentUUID": "8d1c2067-0a22-48d3-9674-cbf90697527b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "8d1c2067-0a22-48d3-9674-cbf90697527b",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should increment rounds played",
                "fullTitle": "Session #incrementRoundsPlayed() should increment rounds played",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "804d6f38-795f-47e0-b66b-fcc26224195c",
                "parentUUID": "8d1c2067-0a22-48d3-9674-cbf90697527b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#addContestant(contestant)",
            "suites": [
              {
                "title": "when in individual mode",
                "suites": [],
                "tests": [
                  {
                    "title": "should add contestant when session is not full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should add contestant when session is not full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "971caa4a-7f8c-40f4-bad5-1f7b920c3c4d",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when session is full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when session is full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
                    "isRoot": false,
                    "uuid": "d5fde06a-b06a-4c81-8067-5a9d1ec2d0c2",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "9141d16a-601c-4367-b909-8e9d2950cdad",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "BUG# username case should not matter",
                    "fullTitle": "#addContestant(contestant) when in individual mode BUG# username case should not matter",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "cc8be501-0c60-48c8-88a3-78dd2cc7a037",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "fullTitle": "#addContestant(contestant) when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "timedOut": false,
                    "duration": 413,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
                    "isRoot": false,
                    "uuid": "094ebd8e-ff05-4ff1-aa5a-3ee91f7f3123",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should add contestant when session is not full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should add contestant when session is not full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "971caa4a-7f8c-40f4-bad5-1f7b920c3c4d",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when session is full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when session is full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
                    "isRoot": false,
                    "uuid": "d5fde06a-b06a-4c81-8067-5a9d1ec2d0c2",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "9141d16a-601c-4367-b909-8e9d2950cdad",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "BUG# username case should not matter",
                    "fullTitle": "#addContestant(contestant) when in individual mode BUG# username case should not matter",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "cc8be501-0c60-48c8-88a3-78dd2cc7a037",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  },
                  {
                    "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "fullTitle": "#addContestant(contestant) when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "timedOut": false,
                    "duration": 413,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
                    "isRoot": false,
                    "uuid": "094ebd8e-ff05-4ff1-aa5a-3ee91f7f3123",
                    "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 417
              },
              {
                "title": "when in team mode",
                "suites": [],
                "tests": [
                  {
                    "title": "should add contestant when teams is not full",
                    "fullTitle": "#addContestant(contestant) when in team mode should add contestant when teams is not full",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "52feb5eb-c512-42d7-aa73-97cb8a6e71bb",
                    "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when teams are full",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "19a3fe9f-6ca6-4ea2-90cb-8aed937ad136",
                    "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "ccec1f99-56a4-440e-9641-708f5c105cc1",
                    "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should add contestant when teams is not full",
                    "fullTitle": "#addContestant(contestant) when in team mode should add contestant when teams is not full",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "52feb5eb-c512-42d7-aa73-97cb8a6e71bb",
                    "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when teams are full",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "19a3fe9f-6ca6-4ea2-90cb-8aed937ad136",
                    "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "ccec1f99-56a4-440e-9641-708f5c105cc1",
                    "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5
              }
            ],
            "tests": [
              {
                "title": "should not allow a contestant username with bad words",
                "fullTitle": "Session #addContestant(contestant) should not allow a contestant username with bad words",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
                "isRoot": false,
                "uuid": "fccf3a1c-2012-4c03-b358-e8aacf1fc88c",
                "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
                "skipped": false
              },
              {
                "title": "should not allow when username is empty",
                "fullTitle": "Session #addContestant(contestant) should not allow when username is empty",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
                "isRoot": false,
                "uuid": "2edf12c7-e779-40bc-9cdc-bc7af6455fd9",
                "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
                "skipped": false
              },
              {
                "title": "should trim username",
                "fullTitle": "Session #addContestant(contestant) should trim username",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
                "isRoot": false,
                "uuid": "b12d65f3-a9b8-4bcf-8708-a826c45ee85e",
                "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "866aa5f8-fe89-4f94-9777-9cd384955c07",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should not allow a contestant username with bad words",
                "fullTitle": "Session #addContestant(contestant) should not allow a contestant username with bad words",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
                "isRoot": false,
                "uuid": "fccf3a1c-2012-4c03-b358-e8aacf1fc88c",
                "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
                "skipped": false
              },
              {
                "title": "should not allow when username is empty",
                "fullTitle": "Session #addContestant(contestant) should not allow when username is empty",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
                "isRoot": false,
                "uuid": "2edf12c7-e779-40bc-9cdc-bc7af6455fd9",
                "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
                "skipped": false
              },
              {
                "title": "should trim username",
                "fullTitle": "Session #addContestant(contestant) should trim username",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
                "isRoot": false,
                "uuid": "b12d65f3-a9b8-4bcf-8708-a826c45ee85e",
                "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5
          },
          {
            "title": "#subscribeForStateChange(event, callback)",
            "suites": [],
            "tests": [
              {
                "title": "should subscribe callback to the correct event",
                "fullTitle": "Session #subscribeForStateChange(event, callback) should subscribe callback to the correct event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
                "isRoot": false,
                "uuid": "ab3077f3-0d25-4a96-977c-167fbb129988",
                "parentUUID": "ec0f7caa-727b-4f7c-a5e1-97dddc878f53",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "ec0f7caa-727b-4f7c-a5e1-97dddc878f53",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should subscribe callback to the correct event",
                "fullTitle": "Session #subscribeForStateChange(event, callback) should subscribe callback to the correct event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
                "isRoot": false,
                "uuid": "ab3077f3-0d25-4a96-977c-167fbb129988",
                "parentUUID": "ec0f7caa-727b-4f7c-a5e1-97dddc878f53",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryBuzzerPressRegister(contestantId)",
            "suites": [],
            "tests": [
              {
                "title": "should register when state is ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should register when state is ready",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
                "isRoot": false,
                "uuid": "78f4654a-282c-45fc-8c10-699a27b3fb81",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not register when state is not ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when state is not ready",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
                "isRoot": false,
                "uuid": "87fc4429-509f-4b90-8701-1046893a3066",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not register when contestant does not exist",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "053aa5ce-9590-42d4-bc4b-a997e38bc433",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not replace previous round winner with pending contestant",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                "isRoot": false,
                "uuid": "2754228d-5245-495f-b624-9474c31bfb5d",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not add previous round winner to winners list",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "d7ffe25f-70ed-4b9c-ad79-8a164ef9c0f4",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should register when state is ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should register when state is ready",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
                "isRoot": false,
                "uuid": "78f4654a-282c-45fc-8c10-699a27b3fb81",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not register when state is not ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when state is not ready",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
                "isRoot": false,
                "uuid": "87fc4429-509f-4b90-8701-1046893a3066",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not register when contestant does not exist",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "053aa5ce-9590-42d4-bc4b-a997e38bc433",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not replace previous round winner with pending contestant",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                "isRoot": false,
                "uuid": "2754228d-5245-495f-b624-9474c31bfb5d",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              },
              {
                "title": "should not add previous round winner to winners list",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "d7ffe25f-70ed-4b9c-ad79-8a164ef9c0f4",
                "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "tryBuzzerAction(action)",
            "suites": [
              {
                "title": "action->ACCEPT",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
                    "isRoot": false,
                    "uuid": "b2683555-5844-4397-85d9-72d9b5e674f2",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
                    "isRoot": false,
                    "uuid": "127c0223-9f33-4287-9561-030d35dc969c",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "4504f490-0240-4905-990e-888e203fe8ee",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's team score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's team score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "b8d8d11a-07b5-428c-a8ee-520e4282ff5a",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "fddb7699-a5be-4937-87c9-c9ab19ff1b34",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "e71b4fb0-f25e-4956-8a20-ab9cbb7b2830",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should clear pending winner",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should clear pending winner",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
                    "isRoot": false,
                    "uuid": "0eb5b378-23c0-44e2-aa4d-ed28ffe7af2f",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "3a0ade71-6242-4012-b556-05ee2afa087a",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
                    "isRoot": false,
                    "uuid": "b2683555-5844-4397-85d9-72d9b5e674f2",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
                    "isRoot": false,
                    "uuid": "127c0223-9f33-4287-9561-030d35dc969c",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "4504f490-0240-4905-990e-888e203fe8ee",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's team score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's team score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "b8d8d11a-07b5-428c-a8ee-520e4282ff5a",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "fddb7699-a5be-4937-87c9-c9ab19ff1b34",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "e71b4fb0-f25e-4956-8a20-ab9cbb7b2830",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  },
                  {
                    "title": "should clear pending winner",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should clear pending winner",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
                    "isRoot": false,
                    "uuid": "0eb5b378-23c0-44e2-aa4d-ed28ffe7af2f",
                    "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5
              },
              {
                "title": "action->REJECT",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
                    "isRoot": false,
                    "uuid": "9afe3010-521e-49b0-9638-490d670da6af",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
                    "isRoot": false,
                    "uuid": "3f365ca0-3432-4d0b-937f-f1906378c771",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should not replace round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not replace round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "e1d4aef9-4438-4665-8bc6-1d6c8851706b",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should not update pending contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not update pending contestant's score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
                    "isRoot": false,
                    "uuid": "1bd45aa0-9ee6-4095-933b-0a064677bb5e",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should add round winner to previous winners list",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should add round winner to previous winners list",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "0b23a0f8-7bb3-4411-b226-4f5879b8160d",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "24c65f16-246c-40ff-923f-21be72651bf9",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
                    "isRoot": false,
                    "uuid": "9afe3010-521e-49b0-9638-490d670da6af",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
                    "isRoot": false,
                    "uuid": "3f365ca0-3432-4d0b-937f-f1906378c771",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should not replace round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not replace round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "e1d4aef9-4438-4665-8bc6-1d6c8851706b",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should not update pending contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not update pending contestant's score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
                    "isRoot": false,
                    "uuid": "1bd45aa0-9ee6-4095-933b-0a064677bb5e",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should add round winner to previous winners list",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should add round winner to previous winners list",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "0b23a0f8-7bb3-4411-b226-4f5879b8160d",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "24c65f16-246c-40ff-923f-21be72651bf9",
                    "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              },
              {
                "title": "action->RESET",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "65da985f-7e55-410c-a17f-4ee5e2e4761b",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "f35cbfdd-222e-4f3f-b8c5-6f5f363e8887",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "f661b28e-6fef-413f-ae0a-fe627eae1e78",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "51cb2039-9cbc-4de2-9014-149b12823216",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should change game state back to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "80718e99-3ecd-46b0-844c-4a8211eea216",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "65da985f-7e55-410c-a17f-4ee5e2e4761b",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "f35cbfdd-222e-4f3f-b8c5-6f5f363e8887",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "f661b28e-6fef-413f-ae0a-fe627eae1e78",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "51cb2039-9cbc-4de2-9014-149b12823216",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should change game state back to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "80718e99-3ecd-46b0-844c-4a8211eea216",
                    "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              },
              {
                "title": "action->DISABLE",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "e5ad6e9e-53b0-4575-a6aa-2a083557b267",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "f0ed124d-5044-4550-88f3-e0c8d963a589",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "2dae3ee0-a0ed-4b30-8470-57294ce882bb",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "88fa9abf-1a0d-443c-bda5-282b825453ae",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should change game state to buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
                    "isRoot": false,
                    "uuid": "9f96f226-ca84-41c4-87ef-a229658f16e5",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "e5ad6e9e-53b0-4575-a6aa-2a083557b267",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "f0ed124d-5044-4550-88f3-e0c8d963a589",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "2dae3ee0-a0ed-4b30-8470-57294ce882bb",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "88fa9abf-1a0d-443c-bda5-282b825453ae",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should change game state to buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
                    "isRoot": false,
                    "uuid": "9f96f226-ca84-41c4-87ef-a229658f16e5",
                    "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "action->ENABLE",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should allow when game state is buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "dc3e8c03-f0ba-4fdf-9bdc-a69451cd742e",
                    "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should not allow when game state is not buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
                    "isRoot": false,
                    "uuid": "b4d2ca38-b54b-4e21-929a-e27e883e237e",
                    "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should change game state to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "d9e21d88-7a7f-47da-932a-488d1797f0e6",
                    "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "372edada-4364-4477-abfc-306c9cbffe14",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should allow when game state is buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "dc3e8c03-f0ba-4fdf-9bdc-a69451cd742e",
                    "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should not allow when game state is not buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
                    "isRoot": false,
                    "uuid": "b4d2ca38-b54b-4e21-929a-e27e883e237e",
                    "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should change game state to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "d9e21d88-7a7f-47da-932a-488d1797f0e6",
                    "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "7be3913e-e497-425d-b6d5-b50dfdc8ef8c",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#pendingWinner",
            "suites": [],
            "tests": [
              {
                "title": "should return the pending winner",
                "fullTitle": "Session #pendingWinner should return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
                "isRoot": false,
                "uuid": "23732a87-e27e-4cdc-8259-0dcc60fdfd15",
                "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
                "skipped": false
              },
              {
                "title": "should not return the pending winner",
                "fullTitle": "Session #pendingWinner should not return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
                "isRoot": false,
                "uuid": "a80e266d-44d8-4dc6-b302-1a6321370a15",
                "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should return the pending winner",
                "fullTitle": "Session #pendingWinner should return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
                "isRoot": false,
                "uuid": "23732a87-e27e-4cdc-8259-0dcc60fdfd15",
                "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
                "skipped": false
              },
              {
                "title": "should not return the pending winner",
                "fullTitle": "Session #pendingWinner should not return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
                "isRoot": false,
                "uuid": "a80e266d-44d8-4dc6-b302-1a6321370a15",
                "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#updateSessionName(name)",
            "suites": [],
            "tests": [
              {
                "title": "should update session name",
                "fullTitle": "Session #updateSessionName(name) should update session name",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
                "isRoot": false,
                "uuid": "efae0be1-3147-41f7-871a-c42d1648d3b2",
                "parentUUID": "7c266ef4-fe94-4db2-8b1a-db48936ca7f0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "7c266ef4-fe94-4db2-8b1a-db48936ca7f0",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update session name",
                "fullTitle": "Session #updateSessionName(name) should update session name",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
                "isRoot": false,
                "uuid": "efae0be1-3147-41f7-871a-c42d1648d3b2",
                "parentUUID": "7c266ef4-fe94-4db2-8b1a-db48936ca7f0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#updateMaxContestants(maxContestants)",
            "suites": [],
            "tests": [
              {
                "title": "should update max contestants",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should update max contestants",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "84060219-06d2-4496-ac1d-f00597cab1fe",
                "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
                "skipped": false
              },
              {
                "title": "should not allow below current connected amount",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should not allow below current connected amount",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "e2a2a515-179f-4c3c-a178-abd1e68224fd",
                "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update max contestants",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should update max contestants",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "84060219-06d2-4496-ac1d-f00597cab1fe",
                "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
                "skipped": false
              },
              {
                "title": "should not allow below current connected amount",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should not allow below current connected amount",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "e2a2a515-179f-4c3c-a178-abd1e68224fd",
                "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#updateTeamSize(teamSize)",
            "suites": [],
            "tests": [
              {
                "title": "should update team size",
                "fullTitle": "Session #updateTeamSize(teamSize) should update team size",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "96cde61e-2470-40c2-9c84-b159a6e33512",
                "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateTeamSize(teamSize) should not allow below current setting",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "5a9f465b-05c8-45d7-93d7-d836cd9356bb",
                "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update team size",
                "fullTitle": "Session #updateTeamSize(teamSize) should update team size",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "96cde61e-2470-40c2-9c84-b159a6e33512",
                "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateTeamSize(teamSize) should not allow below current setting",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "5a9f465b-05c8-45d7-93d7-d836cd9356bb",
                "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "#updateMaxTeams(maxTeams)",
            "suites": [],
            "tests": [
              {
                "title": "should update max teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should update max teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "10da6130-259f-4542-a9c0-8fd8014a2214",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              },
              {
                "title": "should add teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should add teams",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "e5decfda-45f4-45f2-acf4-8bd930e53de2",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow below current setting",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "d6011fa6-d947-4ea9-a44c-7a822e171669",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              },
              {
                "title": "should not allow if teams are PLAYER_CHOICE",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "01cc02b7-d023-489d-93e5-65591938cc1d",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update max teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should update max teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "10da6130-259f-4542-a9c0-8fd8014a2214",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              },
              {
                "title": "should add teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should add teams",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "e5decfda-45f4-45f2-acf4-8bd930e53de2",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow below current setting",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "d6011fa6-d947-4ea9-a44c-7a822e171669",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              },
              {
                "title": "should not allow if teams are PLAYER_CHOICE",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "01cc02b7-d023-489d-93e5-65591938cc1d",
                "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SessionTests.js",
        "uuid": "fca128c8-4e71-4142-bf77-81c382c64c5c",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Sessions",
        "suites": [
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Sessions #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "2dd15943-dcdd-463e-952a-00e7e8180bc3",
                "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Sessions #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "dae78de6-45bb-4d53-a88d-ae8a050737b4",
                "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Sessions #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "1d26eba3-c05a-431b-adbb-8373152e8244",
                "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Sessions #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "2dd15943-dcdd-463e-952a-00e7e8180bc3",
                "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Sessions #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "dae78de6-45bb-4d53-a88d-ae8a050737b4",
                "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Sessions #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "1d26eba3-c05a-431b-adbb-8373152e8244",
                "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#add(host, settings)",
            "suites": [],
            "tests": [
              {
                "title": "add and return session",
                "fullTitle": "Sessions #add(host, settings) add and return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
                "isRoot": false,
                "uuid": "27c8f70e-2451-4bec-b8a8-767b1634edcf",
                "parentUUID": "77261d38-59eb-4124-927e-0f24bbb9782e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "77261d38-59eb-4124-927e-0f24bbb9782e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "add and return session",
                "fullTitle": "Sessions #add(host, settings) add and return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
                "isRoot": false,
                "uuid": "27c8f70e-2451-4bec-b8a8-767b1634edcf",
                "parentUUID": "77261d38-59eb-4124-927e-0f24bbb9782e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#getById(id)",
            "suites": [],
            "tests": [
              {
                "title": "when given valid id should return session",
                "fullTitle": "Sessions #getById(id) when given valid id should return session",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
                "isRoot": false,
                "uuid": "687983c9-5fa3-49f9-9904-aa6cf66c705c",
                "parentUUID": "43b12cfc-68a5-4e6a-98ac-6487a742be90",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "43b12cfc-68a5-4e6a-98ac-6487a742be90",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "when given valid id should return session",
                "fullTitle": "Sessions #getById(id) when given valid id should return session",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
                "isRoot": false,
                "uuid": "687983c9-5fa3-49f9-9904-aa6cf66c705c",
                "parentUUID": "43b12cfc-68a5-4e6a-98ac-6487a742be90",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#purgeCompleted()",
            "suites": [],
            "tests": [
              {
                "title": "should remove complete sc",
                "fullTitle": "Sessions #purgeCompleted() should remove complete sc",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "d63dbd26-3e7f-462e-acb5-b10ebdcac89d",
                "parentUUID": "a3150e83-6386-4458-bf02-59b5b28c4ecb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "a3150e83-6386-4458-bf02-59b5b28c4ecb",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "should remove complete sc",
                "fullTitle": "Sessions #purgeCompleted() should remove complete sc",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "d63dbd26-3e7f-462e-acb5-b10ebdcac89d",
                "parentUUID": "a3150e83-6386-4458-bf02-59b5b28c4ecb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SessionsTests.js",
        "uuid": "29b17769-6a93-4af4-9d4d-eadc64eebbf2",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SessionsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Settings",
        "suites": [
          {
            "title": "#hasTeams",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #hasTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "26df8a2d-a2e1-46e9-979d-4195cb44fb5a",
                "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #hasTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "41fce7ca-e793-4648-8447-dfc98953ad0f",
                "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #hasTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "26df8a2d-a2e1-46e9-979d-4195cb44fb5a",
                "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #hasTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "41fce7ca-e793-4648-8447-dfc98953ad0f",
                "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamSize",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamSize should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3b77ede1-1afa-4c7d-8b57-68efd940a635",
                "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamSize should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "9f153573-fcfc-4fe1-864b-6bcf74d3d860",
                "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamSize should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3b77ede1-1afa-4c7d-8b57-68efd940a635",
                "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamSize should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "9f153573-fcfc-4fe1-864b-6bcf74d3d860",
                "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#maxTeams",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "a19fade3-0339-4e65-8ba1-af92ed558334",
                "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "fb02d9e5-d85e-431f-88a6-127ad0dac103",
                "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "a19fade3-0339-4e65-8ba1-af92ed558334",
                "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "fb02d9e5-d85e-431f-88a6-127ad0dac103",
                "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamLeaderSelectionMethod",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "a4a3d040-b829-416b-a787-4e6f285ce6b5",
                "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamLeaderSelectionMethod should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "05a7008f-f305-4cc4-bffb-31378712aab5",
                "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "3bedbe65-2d64-4a1e-ab6e-84a6bd5978c7",
                "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "b03b3352-dcc7-49ea-b754-f843336a90de",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "a4a3d040-b829-416b-a787-4e6f285ce6b5",
                "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamLeaderSelectionMethod should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "05a7008f-f305-4cc4-bffb-31378712aab5",
                "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "3bedbe65-2d64-4a1e-ab6e-84a6bd5978c7",
                "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#teamNameEdit",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNameEdit should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "200a5f3c-fbeb-4792-b98a-04a3946e867c",
                "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamNameEdit should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8f7cce24-fd2e-446e-b8ce-d5acf3bb936a",
                "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNameEdit should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "10852f5a-b178-4550-8751-91a47856b9c2",
                "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "0718a908-e293-4480-acb6-0bb8cc372ec1",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNameEdit should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "200a5f3c-fbeb-4792-b98a-04a3946e867c",
                "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamNameEdit should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8f7cce24-fd2e-446e-b8ce-d5acf3bb936a",
                "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNameEdit should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "10852f5a-b178-4550-8751-91a47856b9c2",
                "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#maxContestants",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxContestants should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "16e316a6-8638-48de-b29d-0b1abf2d504b",
                "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxContestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "1009195f-ce17-4286-a769-dba9ee1f8205",
                "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "b601bbb0-56e1-4424-875e-8470d4989b9f",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxContestants should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "16e316a6-8638-48de-b29d-0b1abf2d504b",
                "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxContestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "1009195f-ce17-4286-a769-dba9ee1f8205",
                "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#sessionName",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #sessionName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "819ae728-8242-42c8-abdf-f39941aad142",
                "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #sessionName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "1df07640-b1a0-4454-9bbc-1814ef69e76e",
                "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "6143d346-434a-43ca-8f4d-a25094ab5741",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #sessionName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "819ae728-8242-42c8-abdf-f39941aad142",
                "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #sessionName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "1df07640-b1a0-4454-9bbc-1814ef69e76e",
                "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamNames",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNames should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "02dc8a4e-aafd-436b-ad62-6ea77d9807fe",
                "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNames should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "6292855f-fe59-4cdc-a9be-1d1573db2513",
                "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNames should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "02dc8a4e-aafd-436b-ad62-6ea77d9807fe",
                "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNames should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "6292855f-fe59-4cdc-a9be-1d1573db2513",
                "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SettingsTests.js",
        "uuid": "a2399968-c2db-4152-a165-d1a9a4a01040",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/SettingsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "TeamFactory",
        "suites": [
          {
            "title": "#create(teams, settings)",
            "suites": [],
            "tests": [
              {
                "title": "should throw when settings.maxTeams is less than 1",
                "fullTitle": "TeamFactory #create(teams, settings) should throw when settings.maxTeams is less than 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6f671b4d-3cd5-480f-a09e-da3541c37487",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should create the correct amount of teams",
                "fullTitle": "TeamFactory #create(teams, settings) should create the correct amount of teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "ad492cd0-bdfb-4a16-9a88-089f7139bd88",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should not fail with a large team size",
                "fullTitle": "TeamFactory #create(teams, settings) should not fail with a large team size",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
                "isRoot": false,
                "uuid": "0a178069-1db7-45e5-bc10-8bfcf03bec65",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should use settings.teamNames first, before random selection",
                "fullTitle": "TeamFactory #create(teams, settings) should use settings.teamNames first, before random selection",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "9028eb67-4ecc-4080-82df-b570433c441d",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should only create a single team when using unlimited teams",
                "fullTitle": "TeamFactory #create(teams, settings) should only create a single team when using unlimited teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "62f1d939-0452-4301-b9bd-0267f4e457d0",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamFactoryTests.js",
            "uuid": "7de2bca0-fea7-4bb5-8472-27770df51b25",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
            "passes": [
              {
                "title": "should throw when settings.maxTeams is less than 1",
                "fullTitle": "TeamFactory #create(teams, settings) should throw when settings.maxTeams is less than 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6f671b4d-3cd5-480f-a09e-da3541c37487",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should create the correct amount of teams",
                "fullTitle": "TeamFactory #create(teams, settings) should create the correct amount of teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "ad492cd0-bdfb-4a16-9a88-089f7139bd88",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should not fail with a large team size",
                "fullTitle": "TeamFactory #create(teams, settings) should not fail with a large team size",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
                "isRoot": false,
                "uuid": "0a178069-1db7-45e5-bc10-8bfcf03bec65",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should use settings.teamNames first, before random selection",
                "fullTitle": "TeamFactory #create(teams, settings) should use settings.teamNames first, before random selection",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "9028eb67-4ecc-4080-82df-b570433c441d",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              },
              {
                "title": "should only create a single team when using unlimited teams",
                "fullTitle": "TeamFactory #create(teams, settings) should only create a single team when using unlimited teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "62f1d939-0452-4301-b9bd-0267f4e457d0",
                "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 45
          },
          {
            "title": "#add(teams, settings)",
            "suites": [],
            "tests": [
              {
                "title": "should add a team",
                "fullTitle": "TeamFactory #add(teams, settings) should add a team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "f102b671-5f95-4857-8fd5-0f9eb44d7e8d",
                "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
                "skipped": false
              },
              {
                "title": "should reuse team names specified in settings",
                "fullTitle": "TeamFactory #add(teams, settings) should reuse team names specified in settings",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
                "isRoot": false,
                "uuid": "ad211e15-ac34-48f9-a0c4-f46ec510c659",
                "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
                "skipped": false
              },
              {
                "title": "should factor in team names which are already in use",
                "fullTitle": "TeamFactory #add(teams, settings) should factor in team names which are already in use",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
                "isRoot": false,
                "uuid": "909db18e-592b-4b5c-bb4d-426598cbef98",
                "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamFactoryTests.js",
            "uuid": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
            "passes": [
              {
                "title": "should add a team",
                "fullTitle": "TeamFactory #add(teams, settings) should add a team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "f102b671-5f95-4857-8fd5-0f9eb44d7e8d",
                "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
                "skipped": false
              },
              {
                "title": "should reuse team names specified in settings",
                "fullTitle": "TeamFactory #add(teams, settings) should reuse team names specified in settings",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
                "isRoot": false,
                "uuid": "ad211e15-ac34-48f9-a0c4-f46ec510c659",
                "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
                "skipped": false
              },
              {
                "title": "should factor in team names which are already in use",
                "fullTitle": "TeamFactory #add(teams, settings) should factor in team names which are already in use",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
                "isRoot": false,
                "uuid": "909db18e-592b-4b5c-bb4d-426598cbef98",
                "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 207
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamFactoryTests.js",
        "uuid": "7b374e5e-ac42-4ced-b6a0-5fe646490852",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Team",
        "suites": [
          {
            "title": "#teamName",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "64084159-ee3b-49d3-bf01-a5890e701c8a",
                "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "1ce8f9d8-6068-421c-8967-8e537bb84ae6",
                "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "64084159-ee3b-49d3-bf01-a5890e701c8a",
                "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "1ce8f9d8-6068-421c-8967-8e537bb84ae6",
                "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamLeader",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamLeader should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "9da31752-42d1-4466-80ac-57d94bd09c3e",
                "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamLeader should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "6a5fa165-ba27-4bf0-9c45-8fbd741e8818",
                "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamLeader should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "9da31752-42d1-4466-80ac-57d94bd09c3e",
                "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamLeader should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "6a5fa165-ba27-4bf0-9c45-8fbd741e8818",
                "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#score",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8ed768f6-a222-4910-91f6-ab2c7c4f12c0",
                "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #score should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "41808574-557f-4517-8a77-c53796c3c56a",
                "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8ed768f6-a222-4910-91f6-ab2c7c4f12c0",
                "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #score should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "41808574-557f-4517-8a77-c53796c3c56a",
                "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contestants",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "d4e84585-da00-4a68-a4f6-2acc0ad5e9dd",
                "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
                "isRoot": false,
                "uuid": "a6ae1c30-b17a-48a4-a445-f0e0cf05bb90",
                "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "d4e84585-da00-4a68-a4f6-2acc0ad5e9dd",
                "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
                "isRoot": false,
                "uuid": "a6ae1c30-b17a-48a4-a445-f0e0cf05bb90",
                "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "when a contestant scores",
            "suites": [],
            "tests": [
              {
                "title": "should update the teams score",
                "fullTitle": "Team when a contestant scores should update the teams score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "329355a8-28a3-48b5-a5f8-5b4bae4d8e1f",
                "parentUUID": "ef6c2ad7-51e2-4852-a2c8-c3ac5e17fbc9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "ef6c2ad7-51e2-4852-a2c8-c3ac5e17fbc9",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should update the teams score",
                "fullTitle": "Team when a contestant scores should update the teams score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "329355a8-28a3-48b5-a5f8-5b4bae4d8e1f",
                "parentUUID": "ef6c2ad7-51e2-4852-a2c8-c3ac5e17fbc9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "tryAssignTeamLeader(contestant, hostOverride)",
            "suites": [],
            "tests": [
              {
                "title": "should allow it when no team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "845c6f49-6bbb-4249-9365-4ddf4897bab7",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              },
              {
                "title": "should not allow it when a team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
                "isRoot": false,
                "uuid": "5677f781-6d54-43ea-9207-ddffd5c4f39f",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              },
              {
                "title": "should not allow it when a contestant is not in team",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
                "isRoot": false,
                "uuid": "3d491085-76a4-453d-9a3a-7a9e51c40246",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              },
              {
                "title": "should allow it when a team leader is set and host override is flagged",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "d101b56f-63b2-420a-92a9-d1fb194855f6",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should allow it when no team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "845c6f49-6bbb-4249-9365-4ddf4897bab7",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              },
              {
                "title": "should not allow it when a team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
                "isRoot": false,
                "uuid": "5677f781-6d54-43ea-9207-ddffd5c4f39f",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              },
              {
                "title": "should not allow it when a contestant is not in team",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
                "isRoot": false,
                "uuid": "3d491085-76a4-453d-9a3a-7a9e51c40246",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              },
              {
                "title": "should allow it when a team leader is set and host override is flagged",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "d101b56f-63b2-420a-92a9-d1fb194855f6",
                "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryChangeTeamName(teamName, settings, hostOverride)",
            "suites": [
              {
                "title": "when host override",
                "suites": [],
                "tests": [
                  {
                    "title": "should change name when request is valid",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when request is valid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "bd851619-c417-41e1-a097-481e861949bd",
                    "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
                    "skipped": false
                  },
                  {
                    "title": "should change name when setting do not allow it",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when setting do not allow it",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "f067f1d9-881d-42cf-b3f1-50787b7cef8a",
                    "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
                    "skipped": false
                  },
                  {
                    "title": "should change name when name contains profanity",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when name contains profanity",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "7df4ae9b-697b-498d-b883-6af02b14d39b",
                    "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamTests.js",
                "uuid": "890da7b4-2309-4c33-adde-1804091a14c8",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
                "passes": [
                  {
                    "title": "should change name when request is valid",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when request is valid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "bd851619-c417-41e1-a097-481e861949bd",
                    "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
                    "skipped": false
                  },
                  {
                    "title": "should change name when setting do not allow it",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when setting do not allow it",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "f067f1d9-881d-42cf-b3f1-50787b7cef8a",
                    "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
                    "skipped": false
                  },
                  {
                    "title": "should change name when name contains profanity",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when name contains profanity",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "7df4ae9b-697b-498d-b883-6af02b14d39b",
                    "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "should change name when request is valid",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                "isRoot": false,
                "uuid": "c5f8e80a-7df6-4522-84fd-dc092b33268c",
                "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
                "skipped": false
              },
              {
                "title": "should not change name when setting do not allow it",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "ac6524b3-d82f-45b1-85bc-e96c741b8542",
                "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
                "skipped": false
              },
              {
                "title": "should not change name when name contains profanity",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "0346be98-2c81-4208-854e-bf9ef047415d",
                "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "55d302c9-284c-4472-9c40-621c7f0d11ab",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should change name when request is valid",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                "isRoot": false,
                "uuid": "c5f8e80a-7df6-4522-84fd-dc092b33268c",
                "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
                "skipped": false
              },
              {
                "title": "should not change name when setting do not allow it",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "ac6524b3-d82f-45b1-85bc-e96c741b8542",
                "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
                "skipped": false
              },
              {
                "title": "should not change name when name contains profanity",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "0346be98-2c81-4208-854e-bf9ef047415d",
                "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "getContestantByUsername(username)",
            "suites": [],
            "tests": [
              {
                "title": "should get contestant when contest with username exists",
                "fullTitle": "Team getContestantByUsername(username) should get contestant when contest with username exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
                "isRoot": false,
                "uuid": "1be18494-93f5-42fb-9abd-905ababa2125",
                "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
                "skipped": false
              },
              {
                "title": "should not get contestant when contest with username does not exist",
                "fullTitle": "Team getContestantByUsername(username) should not get contestant when contest with username does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
                "isRoot": false,
                "uuid": "0cbee487-b305-426a-8bc8-9376bb0fbe0e",
                "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should get contestant when contest with username exists",
                "fullTitle": "Team getContestantByUsername(username) should get contestant when contest with username exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
                "isRoot": false,
                "uuid": "1be18494-93f5-42fb-9abd-905ababa2125",
                "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
                "skipped": false
              },
              {
                "title": "should not get contestant when contest with username does not exist",
                "fullTitle": "Team getContestantByUsername(username) should not get contestant when contest with username does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
                "isRoot": false,
                "uuid": "0cbee487-b305-426a-8bc8-9376bb0fbe0e",
                "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamTests.js",
        "uuid": "0a3bc418-158e-4c49-93a0-77c6bf8ee629",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Teams",
        "suites": [
          {
            "title": "#contains(teamName)",
            "suites": [],
            "tests": [
              {
                "title": "should return true when team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return true when team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
                "isRoot": false,
                "uuid": "5086dd49-7aed-4a06-b76d-923b3260d319",
                "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
                "skipped": false
              },
              {
                "title": "should return false when no team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return false when no team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "a39b4141-9af9-4ebd-9128-2dd180f7f341",
                "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "be61d410-de5b-486a-b41b-0a3880afb64f",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should return true when team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return true when team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
                "isRoot": false,
                "uuid": "5086dd49-7aed-4a06-b76d-923b3260d319",
                "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
                "skipped": false
              },
              {
                "title": "should return false when no team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return false when no team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "a39b4141-9af9-4ebd-9128-2dd180f7f341",
                "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "398fe225-d49f-4c3f-b2df-e896bb91f7e8",
                "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "9e2d196f-3db4-480b-a725-340694c3fd85",
                "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Teams #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "8404e549-345b-4e84-8622-8b04ef398bde",
                "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "746c0575-15a2-47ff-9cc9-4692e45915d3",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "398fe225-d49f-4c3f-b2df-e896bb91f7e8",
                "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "9e2d196f-3db4-480b-a725-340694c3fd85",
                "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Teams #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "8404e549-345b-4e84-8622-8b04ef398bde",
                "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#length",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9bdcf31c-9a26-4e30-a1b5-8989924d9030",
                "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "48d0f9db-d67b-4ae7-a52b-74dd0c0db4a7",
                "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9bdcf31c-9a26-4e30-a1b5-8989924d9030",
                "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "48d0f9db-d67b-4ae7-a52b-74dd0c0db4a7",
                "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#add(team)",
            "suites": [],
            "tests": [
              {
                "title": "should add the given team",
                "fullTitle": "Teams #add(team) should add the given team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "f6ccb36a-1ab1-4847-a906-ac25e47ce065",
                "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
                "skipped": false
              },
              {
                "title": "should error if team with teamName already exists",
                "fullTitle": "Teams #add(team) should error if team with teamName already exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "b7705238-1ee5-4eb9-ad16-2db22788d12c",
                "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should add the given team",
                "fullTitle": "Teams #add(team) should add the given team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "f6ccb36a-1ab1-4847-a906-ac25e47ce065",
                "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
                "skipped": false
              },
              {
                "title": "should error if team with teamName already exists",
                "fullTitle": "Teams #add(team) should error if team with teamName already exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "b7705238-1ee5-4eb9-ad16-2db22788d12c",
                "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove(team)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #remove(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "b22678c5-fc50-462b-a6cb-601f32867da9",
                "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #remove(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "a3e0d2c9-a16e-4e75-8966-9dcdcd4be7e6",
                "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #remove(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "b22678c5-fc50-462b-a6cb-601f32867da9",
                "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #remove(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "a3e0d2c9-a16e-4e75-8966-9dcdcd4be7e6",
                "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#removeByTeamName(team)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #removeByTeamName(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "10fbecb3-b231-4e3b-b136-914a2cddcce0",
                "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
                "skipped": false
              },
              {
                "title": "should ignore team name case",
                "fullTitle": "Teams #removeByTeamName(team) should ignore team name case",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "08e6e397-cc72-4fca-83f4-db1d6602de06",
                "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #removeByTeamName(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b1a694a3-5209-401b-891b-c56e67d28c9c",
                "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #removeByTeamName(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "10fbecb3-b231-4e3b-b136-914a2cddcce0",
                "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
                "skipped": false
              },
              {
                "title": "should ignore team name case",
                "fullTitle": "Teams #removeByTeamName(team) should ignore team name case",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "08e6e397-cc72-4fca-83f4-db1d6602de06",
                "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #removeByTeamName(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b1a694a3-5209-401b-891b-c56e67d28c9c",
                "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName)",
            "suites": [
              {
                "title": "when teams are full",
                "suites": [],
                "tests": [
                  {
                    "title": "should return a valid response",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teams are full should return a valid response",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "5caa8039-5447-4d1d-83f4-254e484652b3",
                    "parentUUID": "7cee38ce-a3f1-4a45-a819-7e2334560790",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "7cee38ce-a3f1-4a45-a819-7e2334560790",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should return a valid response",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teams are full should return a valid response",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "5caa8039-5447-4d1d-83f4-254e484652b3",
                    "parentUUID": "7cee38ce-a3f1-4a45-a819-7e2334560790",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when teamLeader selection is PLAYER_CHOICE",
                "suites": [],
                "tests": [
                  {
                    "title": "should inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "e5dc0ef3-e466-461b-af02-75181eb78272",
                    "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                    "skipped": false
                  },
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
                    "isRoot": false,
                    "uuid": "c6916a4b-f248-4ade-9db9-a76887f89cea",
                    "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant as teamLeader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
                    "isRoot": false,
                    "uuid": "c6a47838-e305-4309-9636-94811b6bfc4f",
                    "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "e5dc0ef3-e466-461b-af02-75181eb78272",
                    "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                    "skipped": false
                  },
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
                    "isRoot": false,
                    "uuid": "c6916a4b-f248-4ade-9db9-a76887f89cea",
                    "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant as teamLeader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
                    "isRoot": false,
                    "uuid": "c6a47838-e305-4309-9636-94811b6bfc4f",
                    "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when teamLeader selection is RANDOM",
                "suites": [],
                "tests": [
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "fb6574f3-8ade-42e1-8dad-1e5a7fbe8cac",
                    "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
                    "skipped": false
                  },
                  {
                    "title": "should automatically add team leader when team is filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should automatically add team leader when team is filled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
                    "isRoot": false,
                    "uuid": "fd2d3d9b-2f24-4db1-9d58-dc04865b44b3",
                    "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
                    "skipped": false
                  },
                  {
                    "title": "should not automatically add team leader when team is not filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
                    "isRoot": false,
                    "uuid": "bdb806a5-c813-44f5-b1f0-78ea76e0af15",
                    "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "23e8d717-6bd8-491f-a908-69745e75aaea",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "fb6574f3-8ade-42e1-8dad-1e5a7fbe8cac",
                    "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
                    "skipped": false
                  },
                  {
                    "title": "should automatically add team leader when team is filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should automatically add team leader when team is filled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
                    "isRoot": false,
                    "uuid": "fd2d3d9b-2f24-4db1-9d58-dc04865b44b3",
                    "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
                    "skipped": false
                  },
                  {
                    "title": "should not automatically add team leader when team is not filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
                    "isRoot": false,
                    "uuid": "bdb806a5-c813-44f5-b1f0-78ea76e0af15",
                    "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when set to use unlimited teams",
                "suites": [],
                "tests": [
                  {
                    "title": "should add team when teams are full",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when set to use unlimited teams should add team when teams are full",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                    "isRoot": false,
                    "uuid": "a183377e-8a42-4c3b-838c-182550052330",
                    "parentUUID": "c17e4717-9391-4a81-85ff-6c6d0da0ab15",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "c17e4717-9391-4a81-85ff-6c6d0da0ab15",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should add team when teams are full",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when set to use unlimited teams should add team when teams are full",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                    "isRoot": false,
                    "uuid": "a183377e-8a42-4c3b-838c-182550052330",
                    "parentUUID": "c17e4717-9391-4a81-85ff-6c6d0da0ab15",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "when team selection method is PLAYER_CHOICE",
                "suites": [],
                "tests": [
                  {
                    "title": "should throw when no team name is given",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should throw when no team name is given",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
                    "isRoot": false,
                    "uuid": "0ad6b361-8d9c-4afb-aa0e-31d6bd83081d",
                    "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                    "skipped": false
                  },
                  {
                    "title": "should add contestant to correct team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should add contestant to correct team",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "98a457ae-4492-4196-9c7b-23d2405d9a34",
                    "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                    "skipped": false
                  },
                  {
                    "title": "should not add to full team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should not add to full team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "d93e83e6-d4d2-414e-8e2e-5b2fc40af690",
                    "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should throw when no team name is given",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should throw when no team name is given",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
                    "isRoot": false,
                    "uuid": "0ad6b361-8d9c-4afb-aa0e-31d6bd83081d",
                    "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                    "skipped": false
                  },
                  {
                    "title": "should add contestant to correct team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should add contestant to correct team",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "98a457ae-4492-4196-9c7b-23d2405d9a34",
                    "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                    "skipped": false
                  },
                  {
                    "title": "should not add to full team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should not add to full team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "d93e83e6-d4d2-414e-8e2e-5b2fc40af690",
                    "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [
              {
                "title": "should give contestant an id",
                "fullTitle": "Teams addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
                "isRoot": false,
                "uuid": "3eb512f8-962a-4929-ac4f-c3276b178767",
                "parentUUID": "06d1bc72-40ee-444c-968a-68aea1553a91",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "06d1bc72-40ee-444c-968a-68aea1553a91",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should give contestant an id",
                "fullTitle": "Teams addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
                "isRoot": false,
                "uuid": "3eb512f8-962a-4929-ac4f-c3276b178767",
                "parentUUID": "06d1bc72-40ee-444c-968a-68aea1553a91",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "getByContestant(contestant)",
            "suites": [],
            "tests": [
              {
                "title": "should get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
                "isRoot": false,
                "uuid": "859158f4-8a47-4279-b1cb-2f5abaed3634",
                "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
                "skipped": false
              },
              {
                "title": "should not get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should not get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "9e54a270-ad5e-4abc-b98a-ea5a569fa640",
                "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
                "isRoot": false,
                "uuid": "859158f4-8a47-4279-b1cb-2f5abaed3634",
                "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
                "skipped": false
              },
              {
                "title": "should not get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should not get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "9e54a270-ad5e-4abc-b98a-ea5a569fa640",
                "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "getByTeamName(temName)",
            "suites": [],
            "tests": [
              {
                "title": "should get team when team with name exists",
                "fullTitle": "Teams getByTeamName(temName) should get team when team with name exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
                "isRoot": false,
                "uuid": "f5fa1a9c-490e-4d23-a843-231e9fe7eacf",
                "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
                "skipped": false
              },
              {
                "title": "should not get team when team with name does not exist",
                "fullTitle": "Teams getByTeamName(temName) should not get team when team with name does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "7ebb567c-0d4b-40c2-adf1-f5ea5bc93a51",
                "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should get team when team with name exists",
                "fullTitle": "Teams getByTeamName(temName) should get team when team with name exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
                "isRoot": false,
                "uuid": "f5fa1a9c-490e-4d23-a843-231e9fe7eacf",
                "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
                "skipped": false
              },
              {
                "title": "should not get team when team with name does not exist",
                "fullTitle": "Teams getByTeamName(temName) should not get team when team with name does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "7ebb567c-0d4b-40c2-adf1-f5ea5bc93a51",
                "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "getAvailable(settings)",
            "suites": [],
            "tests": [
              {
                "title": "should not return full teams",
                "fullTitle": "Teams getAvailable(settings) should not return full teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0b83ce6a-caac-484d-a054-4886b54197d0",
                "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
                "skipped": false
              },
              {
                "title": "should return teams with space",
                "fullTitle": "Teams getAvailable(settings) should return teams with space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "9ef4d604-569e-49ad-9bd0-c06dfd4c4fb8",
                "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
                "skipped": false
              },
              {
                "title": "should return teams with unlimited space",
                "fullTitle": "Teams getAvailable(settings) should return teams with unlimited space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "1ea45824-0c4d-4ecc-a1ac-e2be840029f9",
                "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "ef46bb4d-a250-4c94-943a-07887aba85e2",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should not return full teams",
                "fullTitle": "Teams getAvailable(settings) should not return full teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0b83ce6a-caac-484d-a054-4886b54197d0",
                "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
                "skipped": false
              },
              {
                "title": "should return teams with space",
                "fullTitle": "Teams getAvailable(settings) should return teams with space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "9ef4d604-569e-49ad-9bd0-c06dfd4c4fb8",
                "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
                "skipped": false
              },
              {
                "title": "should return teams with unlimited space",
                "fullTitle": "Teams getAvailable(settings) should return teams with unlimited space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "1ea45824-0c4d-4ecc-a1ac-e2be840029f9",
                "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamsTests.js",
        "uuid": "37f51217-f5cb-4cdf-9997-5a64521d9595",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/BDD/lib/TeamsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "be516e74-c989-4651-be41-3cd8e47a330d",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should throw on set value",
      "fullTitle": "#wasSuccessful should throw on set value",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "2dc61272-6407-4b7c-8f65-9990d29d4eb2",
      "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#wasSuccessful should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "b91cb3ac-7b6a-4dad-9c90-d949ab787c5a",
      "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#enquireForTeamLeaderPosition should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "07a0b78b-3c1f-4f50-8c21-23a473607660",
      "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#enquireForTeamLeaderPosition should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "5be77a92-803e-41ed-b04d-7f60b498a89b",
      "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#errorMessage should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d8d0b341-a35d-4811-b2bc-fbe20a677d07",
      "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#errorMessage should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
      "isRoot": false,
      "uuid": "ff703b37-affc-482b-beca-55307422e02c",
      "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
      "skipped": false
    },
    {
      "title": "should change the state to not successful",
      "fullTitle": "#setNotSuccessful(errorMessage) should change the state to not successful",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
      "isRoot": false,
      "uuid": "2da7bda3-a108-47bd-b9d5-bd88f1dc7a20",
      "parentUUID": "6383027f-57dc-4224-9695-51354ce59e20",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#username should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "6bbdb3b2-3092-4b42-91d9-fba47353a3be",
      "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#username should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "23847ae9-3a2f-4c8b-8fac-787e0f09c3c1",
      "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d1c64eb9-0883-453e-bf5c-94451ee5fdca",
      "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "9a3dceb0-ce3d-42bc-9d4c-4b78fe2c9311",
      "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
      "skipped": false
    },
    {
      "title": "should increment the contestant's score",
      "fullTitle": "#incrementScore() should increment the contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "16e45768-ca99-4bfa-b2e8-e9261ed80898",
      "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
      "skipped": false
    },
    {
      "title": "should emit scoreUpdate event",
      "fullTitle": "#incrementScore() should emit scoreUpdate event",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
      "isRoot": false,
      "uuid": "aab6933b-663a-4ad7-ad35-593b1f434986",
      "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
      "skipped": false
    },
    {
      "title": "should return a non-null non-empty key",
      "fullTitle": "#generateSessionId() should return a non-null non-empty key",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "cb450f6d-d110-40ee-a3a8-2e8f21db684e",
      "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
      "skipped": false
    },
    {
      "title": "should return a id of the correct length",
      "fullTitle": "#generateSessionId() should return a id of the correct length",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
      "isRoot": false,
      "uuid": "902020e9-656e-44b9-85bb-7f76caa3288b",
      "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
      "skipped": false
    },
    {
      "title": "should record id so it cannot be reused.",
      "fullTitle": "#generateSessionId() should record id so it cannot be reused.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
      "isRoot": false,
      "uuid": "12083940-8090-46d3-a8de-10b9878db692",
      "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#generateParticipantId() should return a UUID",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
      "isRoot": false,
      "uuid": "5ea53056-ce10-4dd7-ae32-3e19681c8fd4",
      "parentUUID": "93e7afef-e19c-40e7-a005-6aeae295187e",
      "skipped": false
    },
    {
      "title": "should store the ids to stop reuse",
      "fullTitle": "#registerSessionIdsInUse(ids) should store the ids to stop reuse",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "ac164b24-d431-4e4c-8525-5cd8339d8449",
      "parentUUID": "5e7870d2-4c43-4f9d-b26d-494c36cb9855",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#releaseSessionId(id) should return a UUID",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "7c87a199-7235-433c-a507-7980d301ffec",
      "parentUUID": "60f132e2-f28e-4e9e-832c-8f46d0348901",
      "skipped": false
    },
    {
      "title": "should return false when not referenced",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not referenced",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
      "isRoot": false,
      "uuid": "050c38f4-efe5-424b-ac3b-cd3e6c06c0f1",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return false when null",
      "fullTitle": "#isInstanceAndTypeOf() should return false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
      "isRoot": false,
      "uuid": "b268ab48-c08d-40b9-939a-b8b2e2023114",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return false when not the correct type",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "cc7aa14c-7eef-48ad-837f-26751efe935b",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return true when is a built-in type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is a built-in type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
      "isRoot": false,
      "uuid": "ce635968-ea5a-477b-9386-14395beb3d59",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return true when is user defined type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is user defined type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
      "isRoot": false,
      "uuid": "077e585f-012c-4269-b204-f0ba025e39f6",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#id should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "4cb493e2-1791-4f0d-9461-8adb0ca055b8",
      "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "6ec4e4c9-49f0-4a71-9795-afb927a266be",
      "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#isDisconnected should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "137e8fa5-ed1c-4f74-af19-e1f1697ca754",
      "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#isDisconnected should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "57d69e66-1121-4b47-97bc-acb5b50aaf22",
      "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
      "skipped": false
    },
    {
      "title": "should change participant state to disconnected",
      "fullTitle": "#disconnect() should change participant state to disconnected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
      "isRoot": false,
      "uuid": "cc99353b-8571-4e98-b930-6444ce7e0ae2",
      "parentUUID": "72f85333-7346-4fdc-87e4-3c9249abe262",
      "skipped": false
    },
    {
      "title": "should change participant state to connected",
      "fullTitle": "#reconnect() should change participant state to connected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
      "isRoot": false,
      "uuid": "103d3732-06ac-4eea-92d8-5541136a6520",
      "parentUUID": "73342c28-8737-4423-b560-5484ea666116",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "a81e8ca9-2e0a-4cfe-a188-df7a7a60ca1a",
      "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "3e059ee1-70bc-479b-a48a-b79d5e4a31fb",
      "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "c2063fed-8f2c-4c20-833f-0b2a46631a69",
      "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "b51536e8-7955-40b5-987b-523e86af2b31",
      "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "eee2e806-e12c-4d7f-9edb-4b22efef18c9",
      "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
      "skipped": false
    },
    {
      "title": "should return true when id does exist",
      "fullTitle": "#contains(id) should return true when id does exist",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
      "isRoot": false,
      "uuid": "a10a89a3-41d4-47cc-8859-38cd35da6029",
      "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
      "skipped": false
    },
    {
      "title": "should return false when id does not exist",
      "fullTitle": "#contains(id) should return false when id does not exist",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "d9da7565-662c-40d3-ae98-b63af64d647f",
      "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
      "skipped": false
    },
    {
      "title": "should add the given participant",
      "fullTitle": "#add(participant) should add the given participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "b35629ef-2d67-487c-a57d-7a8aa0a33125",
      "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
      "skipped": false
    },
    {
      "title": "should error if participant with id already exists",
      "fullTitle": "#add(participant) should error if participant with id already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ba4e050b-84a7-4c90-9c62-c0d86a65802b",
      "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
      "skipped": false
    },
    {
      "title": "should emit add event",
      "fullTitle": "#add(participant) should emit add event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
      "isRoot": false,
      "uuid": "b055adef-fdd6-44b6-8020-36185234accc",
      "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#remove(participant) should remove the existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "30bf56b0-43b2-4166-8e7d-8e6b8d37109b",
      "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#remove(participant) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "db465de0-781c-49dc-a682-005b0060a182",
      "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#removeById(id) should remove the existing participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "b94a54e0-4e24-4232-8d20-31acb6124fbb",
      "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#removeById(id) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "ec104dab-5eb9-40af-8b4a-1cedf9b9c0ac",
      "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
      "skipped": false
    },
    {
      "title": "should create teams",
      "fullTitle": "#constructor should create teams",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "9747aa23-2dd9-42fd-9afd-10e5ab7734c3",
      "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
      "skipped": false
    },
    {
      "title": "should not create teams",
      "fullTitle": "#constructor should not create teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
      "isRoot": false,
      "uuid": "3b3bf248-19a4-40f2-82a9-e0f777dd13df",
      "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#id should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "57dea37c-3c6b-4525-91da-b2b947e24c60",
      "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "68ffc566-a572-43d4-8000-a5e105f3d6da",
      "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundsPlayed should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "4fa149c5-abb8-42f0-bb8e-d2ebcba344d9",
      "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundsPlayed should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "be6b81b9-886b-4b1b-9c78-02ea0a4017f1",
      "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#previousWinners should throw on set value",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6014d7f4-3525-4893-89b3-8b09a6470c62",
      "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#previousWinners should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "3ceb1d03-0bb1-48b0-81df-434d3fec315a",
      "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundWinner should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "a96ec786-9027-4c5a-8bd7-bd713dccf32f",
      "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundWinner should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "65727287-1ee4-41bb-a132-fc8062948dc0",
      "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#observers should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "a4d5e521-2837-4f26-904a-3d8e7f43ff09",
      "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#observers should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
      "isRoot": false,
      "uuid": "11769ba8-59fb-4d61-b874-93024295420d",
      "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "970377d0-61bd-4ec5-8cd1-06a5917b6ba3",
      "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
      "isRoot": false,
      "uuid": "4a56e560-bdf5-42c8-9d4e-370047c66d14",
      "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#host should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "06577177-f5df-4281-9d8f-18c678b6f64f",
      "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#host should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
      "isRoot": false,
      "uuid": "74457ea1-e455-4ad0-a305-5da54a0b16f9",
      "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#currentState should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "e7b170e5-f7ab-4630-80cb-6fc4a9ffed20",
      "parentUUID": "5cd07bdf-e9c2-4a0d-9271-a7b8cd67b7c3",
      "skipped": false
    },
    {
      "title": "should increment rounds played",
      "fullTitle": "#incrementRoundsPlayed() should increment rounds played",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "e564bffb-500e-4c35-a406-1c702908ee4b",
      "parentUUID": "8d1c2067-0a22-48d3-9674-cbf90697527b",
      "skipped": false
    },
    {
      "title": "should not allow a contestant username with bad words",
      "fullTitle": "#addContestant(contestant) should not allow a contestant username with bad words",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
      "isRoot": false,
      "uuid": "8f33ec4a-82b0-4319-89cf-07e98ad786c6",
      "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
      "skipped": false
    },
    {
      "title": "should not allow when username is empty",
      "fullTitle": "#addContestant(contestant) should not allow when username is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
      "isRoot": false,
      "uuid": "2aad01b7-2cd3-488e-98d1-179d4df0238d",
      "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
      "skipped": false
    },
    {
      "title": "should trim username",
      "fullTitle": "#addContestant(contestant) should trim username",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
      "isRoot": false,
      "uuid": "d11dd8de-394a-4dd6-b072-61291269a4d5",
      "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
      "skipped": false
    },
    {
      "title": "should add contestant when session is not full",
      "fullTitle": "when in individual mode should add contestant when session is not full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "77bfe3bf-c7c4-4679-b230-c4600f48f14b",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should not add contestant when session is full",
      "fullTitle": "when in individual mode should not add contestant when session is full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
      "isRoot": false,
      "uuid": "95b3779d-eca0-425c-aa14-d25ff953ea79",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in individual mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "15c45786-7777-4e69-b369-9f0bd1b75ff3",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "BUG# username case should not matter",
      "fullTitle": "when in individual mode BUG# username case should not matter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "de32e9dd-0c5e-4e9e-b028-7a7b94f89a85",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
      "fullTitle": "when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
      "timedOut": false,
      "duration": 413,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
      "isRoot": false,
      "uuid": "45dbd3cf-b07d-42a6-8502-922aea975de7",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should add contestant when teams is not full",
      "fullTitle": "when in team mode should add contestant when teams is not full",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "67bd5caa-3818-4452-8b0b-81cc03d914a8",
      "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
      "skipped": false
    },
    {
      "title": "should not add contestant when teams are full",
      "fullTitle": "when in team mode should not add contestant when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "c0ac43e7-6829-4a84-8746-c1bf60f16ae5",
      "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in team mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "e9a0dc2c-2b2a-42a5-8e0c-3cae4b2f8f4a",
      "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
      "skipped": false
    },
    {
      "title": "should subscribe callback to the correct event",
      "fullTitle": "#subscribeForStateChange(event, callback) should subscribe callback to the correct event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
      "isRoot": false,
      "uuid": "53beb0fa-d3d4-4d4d-bf28-41a10625528c",
      "parentUUID": "ec0f7caa-727b-4f7c-a5e1-97dddc878f53",
      "skipped": false
    },
    {
      "title": "should register when state is ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should register when state is ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
      "isRoot": false,
      "uuid": "e0283711-6816-4f61-90f7-d8d14e8291b6",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not register when state is not ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when state is not ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
      "isRoot": false,
      "uuid": "e47be117-1a71-4044-8e8e-0a6d0e996af3",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not register when contestant does not exist",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "23314f3e-26b4-47bb-8a76-6f1e69d57715",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "4296f957-c7b2-42a0-ad32-3e8be621e44c",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not add previous round winner to winners list",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "588efd65-191c-4e1d-baae-64edcf4058a9",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->ACCEPT should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
      "isRoot": false,
      "uuid": "d8f1e29d-370e-4e08-89f8-1b78a51942ce",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->ACCEPT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
      "isRoot": false,
      "uuid": "8ffb5525-a139-46a2-9c8c-36d3ad7961c3",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should update contestant's score",
      "fullTitle": "action->ACCEPT should update contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "e0a99f6f-8e33-481d-9148-d6b069fde834",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should update contestant's team score",
      "fullTitle": "action->ACCEPT should update contestant's team score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "5b77356a-b15c-4bfc-bbe6-f89d3feaf945",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->ACCEPT should add previous round winner to winners list",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "41a4758b-2b95-4834-a245-6cd2e6efa480",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->ACCEPT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "7cd11feb-6e27-4fc4-96ac-7fbc3a5fcd13",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should clear pending winner",
      "fullTitle": "action->ACCEPT should clear pending winner",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "49af79dc-1ab1-4dbb-8322-79d4f4f9630e",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->REJECT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
      "isRoot": false,
      "uuid": "902da77a-aa40-4586-ac39-4e95f0f5daa2",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->REJECT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
      "isRoot": false,
      "uuid": "32a877d6-9bc8-4c95-8442-22fae585be20",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should not replace round winner with pending contestant",
      "fullTitle": "action->REJECT should not replace round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "69f6ab76-30f6-4c31-904a-88397241b7a5",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should not update pending contestant's score",
      "fullTitle": "action->REJECT should not update pending contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "89714a0e-15f3-4847-adfe-84ce4c0e9957",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should add round winner to previous winners list",
      "fullTitle": "action->REJECT should add round winner to previous winners list",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "4d44fc27-34e7-4a24-98ea-78d5431881f8",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->REJECT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "8b354138-4f38-441d-b763-fe6acb510bca",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->RESET should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "1420df9d-99fc-4232-a143-61ffb379e5fb",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->RESET should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "4a4d65cf-6cd3-49a5-b43b-9cb2aea71b56",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->RESET should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "e3623abf-176f-4596-83c6-b465ae551832",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->RESET should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "4dc287c6-aa73-45d6-8faf-bb620b6c020a",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->RESET should change game state back to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "00dc6d5b-5d81-4ca1-9500-724154a97e81",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->DISABLE should allow when game state is ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "6d84a78d-2948-4da7-879b-edbf81dfee33",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->DISABLE should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "5d95fa58-ad40-4647-bb1e-48bdc873b28d",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->DISABLE should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "fa44ad44-3e1b-419d-9501-ff75ba3a7bd0",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->DISABLE should add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "fb8f6eef-e083-41a5-a65f-44e753b9c4fb",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should change game state to buzzerLock",
      "fullTitle": "action->DISABLE should change game state to buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
      "isRoot": false,
      "uuid": "09fcccf5-116b-4ca1-9294-dfd16254fd68",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should allow when game state is buzzerLock",
      "fullTitle": "action->ENABLE should allow when game state is buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
      "isRoot": false,
      "uuid": "0ffadaac-01b1-4ed2-99c7-1be3f82a9194",
      "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not buzzerLock",
      "fullTitle": "action->ENABLE should not allow when game state is not buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
      "isRoot": false,
      "uuid": "e1c4904f-0fe8-444c-8f37-cfc6a38a21db",
      "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
      "skipped": false
    },
    {
      "title": "should change game state to ready",
      "fullTitle": "action->ENABLE should change game state to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "7512cf22-3b6f-4c50-b690-b559616703b2",
      "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
      "skipped": false
    },
    {
      "title": "should return the pending winner",
      "fullTitle": "#pendingWinner should return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
      "isRoot": false,
      "uuid": "5fe3a7aa-a140-49ab-9610-a133bac0616e",
      "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
      "skipped": false
    },
    {
      "title": "should not return the pending winner",
      "fullTitle": "#pendingWinner should not return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "b907b489-2e2e-43c6-adff-a8b9b7bbb6c7",
      "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
      "skipped": false
    },
    {
      "title": "should update session name",
      "fullTitle": "#updateSessionName(name) should update session name",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
      "isRoot": false,
      "uuid": "dabed2bf-c925-425c-8012-21069a0f0880",
      "parentUUID": "7c266ef4-fe94-4db2-8b1a-db48936ca7f0",
      "skipped": false
    },
    {
      "title": "should update max contestants",
      "fullTitle": "#updateMaxContestants(maxContestants) should update max contestants",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "b9218d8f-fb66-4051-ba4b-9b45dbbc8362",
      "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
      "skipped": false
    },
    {
      "title": "should not allow below current connected amount",
      "fullTitle": "#updateMaxContestants(maxContestants) should not allow below current connected amount",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "8766d4af-9601-46eb-91d3-0868258eaeb1",
      "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
      "skipped": false
    },
    {
      "title": "should update team size",
      "fullTitle": "#updateTeamSize(teamSize) should update team size",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "980b88fe-70f3-45c5-bc4b-ee959d1bf3ec",
      "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateTeamSize(teamSize) should not allow below current setting",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "ae5413eb-b390-4db5-9024-1cacf13b7c43",
      "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
      "skipped": false
    },
    {
      "title": "should update max teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should update max teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "eafee07e-4e53-40e3-9de7-5e95b4dbbbca",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should add teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should add teams",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "7d0bab7e-4cfa-48d5-932b-8e77fb49655d",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow below current setting",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "996b00a0-01a1-4f30-80ea-53d181031609",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should not allow if teams are PLAYER_CHOICE",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "f03d4552-7e15-4838-ac6c-a1c66c716dd8",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "bfcf0edf-55eb-4913-ad9b-a888b3bc81d7",
      "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "e1372c59-e1b6-4d23-8f13-2bc04deeaf80",
      "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "2ac88d75-6463-4412-b060-af9151a6cd01",
      "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
      "skipped": false
    },
    {
      "title": "add and return session",
      "fullTitle": "#add(host, settings) add and return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
      "isRoot": false,
      "uuid": "041316c8-5a54-4adb-89f2-fdb28f4f63e0",
      "parentUUID": "77261d38-59eb-4124-927e-0f24bbb9782e",
      "skipped": false
    },
    {
      "title": "when given valid id should return session",
      "fullTitle": "#getById(id) when given valid id should return session",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
      "isRoot": false,
      "uuid": "b407dd3b-51a5-475d-86fb-f63c0df66f16",
      "parentUUID": "43b12cfc-68a5-4e6a-98ac-6487a742be90",
      "skipped": false
    },
    {
      "title": "should remove complete sc",
      "fullTitle": "#purgeCompleted() should remove complete sc",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "887cdb80-4219-43ed-8369-23045056dc2c",
      "parentUUID": "a3150e83-6386-4458-bf02-59b5b28c4ecb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#hasTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "ba8b4a0c-03e0-4168-a419-b2690d9a1f04",
      "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#hasTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "6a3d0f5c-e0ae-4179-bb76-daac4f3b6975",
      "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamSize should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "08fef357-09a9-40a4-8590-59b33b84d670",
      "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamSize should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "f0c6424f-44ff-4005-8301-abc76a834008",
      "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "825081df-1891-40e0-a03e-6aed36c72ac8",
      "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a5fe336f-3c94-4c5d-bcc2-d20dd7f26b4a",
      "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeaderSelectionMethod should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "cfff8815-0352-454d-9597-f306aa071007",
      "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamLeaderSelectionMethod should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "9f360d15-e11e-452c-ad96-decd3671f806",
      "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeaderSelectionMethod should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "d53215e4-9743-47b2-9b18-a9ab6a403e5e",
      "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNameEdit should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "02f72a13-41af-4a67-9f4c-4719a1ef6688",
      "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamNameEdit should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d4e80809-aa5b-454a-acf2-402593f311b9",
      "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNameEdit should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "a529b34b-08bf-4df6-9657-62b5b2492267",
      "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxContestants should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "107fd03e-e399-42b4-840e-1ae15cc5feb9",
      "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxContestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "eab1263f-e582-458c-8eee-851ae5d2b050",
      "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#sessionName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "38a5ad00-4dd4-45a5-80d6-f83fb451c4c9",
      "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#sessionName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "0dbe48bc-4637-4f97-a599-a90f3293d540",
      "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNames should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "e417c0f2-0e42-4ca7-901a-e3c6978b01a1",
      "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNames should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "8361719c-edfe-4ea1-907d-8520764cb8aa",
      "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
      "skipped": false
    },
    {
      "title": "should throw when settings.maxTeams is less than 1",
      "fullTitle": "#create(teams, settings) should throw when settings.maxTeams is less than 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6c13387f-5186-444b-a368-e11b96499ab2",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should create the correct amount of teams",
      "fullTitle": "#create(teams, settings) should create the correct amount of teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "e6fca627-8145-44aa-b23a-facfbde6a87f",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should not fail with a large team size",
      "fullTitle": "#create(teams, settings) should not fail with a large team size",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
      "isRoot": false,
      "uuid": "b11833cf-6c3c-4879-bc73-4c9a05959c55",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should use settings.teamNames first, before random selection",
      "fullTitle": "#create(teams, settings) should use settings.teamNames first, before random selection",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "623dc559-69ff-4ea6-9f88-88629b7ada85",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should only create a single team when using unlimited teams",
      "fullTitle": "#create(teams, settings) should only create a single team when using unlimited teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "32c8179d-f4da-4f39-9b7a-1d67fb748b5c",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should add a team",
      "fullTitle": "#add(teams, settings) should add a team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "315d34cc-8830-4554-9512-e158ce4910d8",
      "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
      "skipped": false
    },
    {
      "title": "should reuse team names specified in settings",
      "fullTitle": "#add(teams, settings) should reuse team names specified in settings",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
      "isRoot": false,
      "uuid": "6dc8a375-ae02-47bd-93f6-d1f41dd2babd",
      "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
      "skipped": false
    },
    {
      "title": "should factor in team names which are already in use",
      "fullTitle": "#add(teams, settings) should factor in team names which are already in use",
      "timedOut": false,
      "duration": 206,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
      "isRoot": false,
      "uuid": "3ac5d87a-8ba0-4c9b-8999-676bbe2cfd65",
      "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "22bbe753-76f8-471a-96c7-5e888f01aab1",
      "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "24fb1143-80cd-4f72-a9cb-f056a3ea0260",
      "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeader should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "1c96deba-558f-42e9-a919-f778f7c2fced",
      "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeader should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "1a6436fe-255a-4f76-9b67-92d49fba83e6",
      "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "01778092-4864-4c73-8818-01058ab600bf",
      "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "0a511bb1-38a4-48b3-a6bd-e640b450022a",
      "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "3133ade6-1c66-4695-8e96-9091e044e148",
      "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
      "isRoot": false,
      "uuid": "fd049084-3f68-4f8e-8906-910475caef03",
      "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
      "skipped": false
    },
    {
      "title": "should update the teams score",
      "fullTitle": "when a contestant scores should update the teams score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "69224b1c-5d44-49a2-84e2-11cce5bdb8c6",
      "parentUUID": "ef6c2ad7-51e2-4852-a2c8-c3ac5e17fbc9",
      "skipped": false
    },
    {
      "title": "should allow it when no team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "1c1e7c64-a70b-4d07-af45-569d3e60ced1",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should not allow it when a team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
      "isRoot": false,
      "uuid": "de67d3d3-f03e-46fd-82dd-cabf5ef06850",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should not allow it when a contestant is not in team",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
      "isRoot": false,
      "uuid": "0bd41660-94f2-4a67-8e28-b34b174dcf9e",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should allow it when a team leader is set and host override is flagged",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "ab601e39-0e47-4898-9303-da6381cbfb29",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "1d3864bb-0d1b-4597-bd0f-7393c9c41b9c",
      "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
      "skipped": false
    },
    {
      "title": "should not change name when setting do not allow it",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "917d0c74-160a-4a1c-8577-6381ce2051e0",
      "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
      "skipped": false
    },
    {
      "title": "should not change name when name contains profanity",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "3353c4db-edf7-4789-bace-80aa5114748f",
      "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "when host override should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "f52770c4-e64a-412c-bcdd-883b9b6e1b0b",
      "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
      "skipped": false
    },
    {
      "title": "should change name when setting do not allow it",
      "fullTitle": "when host override should change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "502373af-8a2a-4055-9203-9521a967508a",
      "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
      "skipped": false
    },
    {
      "title": "should change name when name contains profanity",
      "fullTitle": "when host override should change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "97f8d6e6-211d-4d33-80e5-64dc1b80d813",
      "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
      "skipped": false
    },
    {
      "title": "should get contestant when contest with username exists",
      "fullTitle": "getContestantByUsername(username) should get contestant when contest with username exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
      "isRoot": false,
      "uuid": "53046b74-0235-4686-8ac1-71f53931b113",
      "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
      "skipped": false
    },
    {
      "title": "should not get contestant when contest with username does not exist",
      "fullTitle": "getContestantByUsername(username) should not get contestant when contest with username does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
      "isRoot": false,
      "uuid": "4bdcbbd6-7094-44c2-ac15-4aa532b4f55e",
      "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
      "skipped": false
    },
    {
      "title": "should return true when team with teamName does exist",
      "fullTitle": "#contains(teamName) should return true when team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
      "isRoot": false,
      "uuid": "8902ad9c-72cd-4475-be00-674c9342d144",
      "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
      "skipped": false
    },
    {
      "title": "should return false when no team with teamName does exist",
      "fullTitle": "#contains(teamName) should return false when no team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "c20bd6ff-0ec7-4c41-9ad1-fdf5a3364c1a",
      "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8cd7d2fc-9684-4716-81ff-550f74fdacbd",
      "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "419916bd-6979-4adf-97a7-f8c15cacd41c",
      "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "39afaef5-b0aa-44c4-a803-e5979bde454a",
      "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "efaa8877-faa0-43a5-b98e-533f7a7f0736",
      "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "82fe21a4-7026-460f-9ec1-72057538d35e",
      "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
      "skipped": false
    },
    {
      "title": "should add the given team",
      "fullTitle": "#add(team) should add the given team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "527e86aa-0bea-42b0-b176-e2c68be1342b",
      "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
      "skipped": false
    },
    {
      "title": "should error if team with teamName already exists",
      "fullTitle": "#add(team) should error if team with teamName already exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "9a72ebf2-c138-49be-ad6f-219f189d8dd2",
      "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#remove(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "094952b5-0d3d-429a-aba5-700935c9ae09",
      "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#remove(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "7c2c0b7b-14ba-40d3-bb4b-788b3c52b369",
      "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#removeByTeamName(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "0b46a64e-95a2-4fd0-89c1-e62f9de4d8f3",
      "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
      "skipped": false
    },
    {
      "title": "should ignore team name case",
      "fullTitle": "#removeByTeamName(team) should ignore team name case",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "c47fc76f-2437-47ac-a488-17a811ad58a7",
      "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#removeByTeamName(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a5bf3b2f-b2a8-490d-89d1-c1b623848344",
      "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
      "skipped": false
    },
    {
      "title": "should give contestant an id",
      "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
      "isRoot": false,
      "uuid": "7836a0d3-e741-4b83-abd1-663a8d4c6c2f",
      "parentUUID": "06d1bc72-40ee-444c-968a-68aea1553a91",
      "skipped": false
    },
    {
      "title": "should return a valid response",
      "fullTitle": "when teams are full should return a valid response",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "fc05e23e-3773-4207-beb3-b566945a02c7",
      "parentUUID": "7cee38ce-a3f1-4a45-a819-7e2334560790",
      "skipped": false
    },
    {
      "title": "should inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
      "isRoot": false,
      "uuid": "41278284-efb2-4477-bdf3-28b83baff6f2",
      "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
      "isRoot": false,
      "uuid": "190d2b5e-525a-4ddd-a3a5-4dc82b5bcfde",
      "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
      "skipped": false
    },
    {
      "title": "should not add contestant as teamLeader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
      "isRoot": false,
      "uuid": "bf70a896-918a-48e5-8455-c8484765985b",
      "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is RANDOM should not inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
      "isRoot": false,
      "uuid": "0344984b-9f40-4dfb-a67c-6ca79a5e88ea",
      "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
      "skipped": false
    },
    {
      "title": "should automatically add team leader when team is filled",
      "fullTitle": "when teamLeader selection is RANDOM should automatically add team leader when team is filled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
      "isRoot": false,
      "uuid": "c36fd892-b27c-489a-bb26-a697f9e32a08",
      "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
      "skipped": false
    },
    {
      "title": "should not automatically add team leader when team is not filled",
      "fullTitle": "when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
      "isRoot": false,
      "uuid": "ae463097-788f-420e-b1f8-e25ccd6e7e06",
      "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
      "skipped": false
    },
    {
      "title": "should add team when teams are full",
      "fullTitle": "when set to use unlimited teams should add team when teams are full",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "80e823ca-7ab3-483d-b10c-64fcfe94af6f",
      "parentUUID": "c17e4717-9391-4a81-85ff-6c6d0da0ab15",
      "skipped": false
    },
    {
      "title": "should throw when no team name is given",
      "fullTitle": "when team selection method is PLAYER_CHOICE should throw when no team name is given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
      "isRoot": false,
      "uuid": "1c8c762d-ad47-41de-83a7-844998d62a96",
      "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
      "skipped": false
    },
    {
      "title": "should add contestant to correct team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should add contestant to correct team",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "f6a411f1-010a-4dc9-b459-153f4bd41de2",
      "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
      "skipped": false
    },
    {
      "title": "should not add to full team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not add to full team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b12e9151-b06f-4bbe-901e-be86e6ee839f",
      "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
      "skipped": false
    },
    {
      "title": "should get team of contestant",
      "fullTitle": "getByContestant(contestant) should get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
      "isRoot": false,
      "uuid": "8e73166a-990d-40f6-8f6e-daf59854f917",
      "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
      "skipped": false
    },
    {
      "title": "should not get team of contestant",
      "fullTitle": "getByContestant(contestant) should not get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "b358b69e-d98f-4627-a5b4-911af952a3cc",
      "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
      "skipped": false
    },
    {
      "title": "should get team when team with name exists",
      "fullTitle": "getByTeamName(temName) should get team when team with name exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
      "isRoot": false,
      "uuid": "5c2d546b-4fe2-4eb4-9c1d-bccef957da30",
      "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
      "skipped": false
    },
    {
      "title": "should not get team when team with name does not exist",
      "fullTitle": "getByTeamName(temName) should not get team when team with name does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "fe1ede25-238f-42b1-8fcd-5db44c564e2e",
      "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
      "skipped": false
    },
    {
      "title": "should not return full teams",
      "fullTitle": "getAvailable(settings) should not return full teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "0864a044-12eb-446c-9713-18a72b65b175",
      "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
      "skipped": false
    },
    {
      "title": "should return teams with space",
      "fullTitle": "getAvailable(settings) should return teams with space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "869229eb-ef10-434e-aa89-20eb038347ed",
      "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
      "skipped": false
    },
    {
      "title": "should return teams with unlimited space",
      "fullTitle": "getAvailable(settings) should return teams with unlimited space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "ff576394-fcac-4f06-b235-b1bccd3bbacd",
      "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should throw on set value",
      "fullTitle": "#wasSuccessful should throw on set value",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8e008598-7b43-4530-bbe4-115e74ae7fd6",
      "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#wasSuccessful should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "90ca50e9-ff1b-4ff4-a97d-736e80f9d911",
      "parentUUID": "172dba4b-382d-4cbc-a6d4-109da2c5f09b",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#enquireForTeamLeaderPosition should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "74570347-282c-4d0d-8526-9f322d7586df",
      "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#enquireForTeamLeaderPosition should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "3d56f580-c557-48c1-9afe-5f5fb8616c8d",
      "parentUUID": "97109006-6911-4471-b2e0-fec877cdfa3e",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#errorMessage should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "6271d878-d494-47e4-ba8a-a6940f6f3ed9",
      "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#errorMessage should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
      "isRoot": false,
      "uuid": "6ff77b52-97b6-46c1-81a8-dd1daff795ba",
      "parentUUID": "f0d23d51-00fd-473e-b521-61f2f483fa9d",
      "skipped": false
    },
    {
      "title": "should change the state to not successful",
      "fullTitle": "#setNotSuccessful(errorMessage) should change the state to not successful",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
      "isRoot": false,
      "uuid": "af35721c-59a1-4938-bf78-db6c2840a2c2",
      "parentUUID": "6383027f-57dc-4224-9695-51354ce59e20",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#username should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "7fad04c7-9359-45d3-8905-ec078f23ce25",
      "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#username should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "0b852233-8349-490c-952c-87b70cf2fa14",
      "parentUUID": "620dd2e8-ca47-492d-8657-aecb9d2391ea",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "05ba76dc-3eea-4ac8-97ae-fe9ed33afe71",
      "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "c6f02235-d430-4f57-8736-62a6b82ba3f0",
      "parentUUID": "13593d9a-f09b-45ef-9803-0d48bfbf0dba",
      "skipped": false
    },
    {
      "title": "should increment the contestant's score",
      "fullTitle": "#incrementScore() should increment the contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "95184031-5854-4806-a1a0-9b4fc67d48a2",
      "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
      "skipped": false
    },
    {
      "title": "should emit scoreUpdate event",
      "fullTitle": "#incrementScore() should emit scoreUpdate event",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
      "isRoot": false,
      "uuid": "c318c87e-a7e7-4505-ad55-e9020d6a1e3c",
      "parentUUID": "814b90f7-a638-4df9-a9ed-7a45ba3813c2",
      "skipped": false
    },
    {
      "title": "should return a non-null non-empty key",
      "fullTitle": "#generateSessionId() should return a non-null non-empty key",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "64204254-619b-4426-bbee-8a2d74cd2651",
      "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
      "skipped": false
    },
    {
      "title": "should return a id of the correct length",
      "fullTitle": "#generateSessionId() should return a id of the correct length",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
      "isRoot": false,
      "uuid": "5102af24-6aac-4ff4-bd23-62603e594e04",
      "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
      "skipped": false
    },
    {
      "title": "should record id so it cannot be reused.",
      "fullTitle": "#generateSessionId() should record id so it cannot be reused.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
      "isRoot": false,
      "uuid": "c2e4e99d-0b75-4a4c-82a6-3e771c08cbc7",
      "parentUUID": "fa5ceb0a-ce44-4a2a-97c8-89bb3004519d",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#generateParticipantId() should return a UUID",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
      "isRoot": false,
      "uuid": "a7c37319-7e30-49ab-8de7-6345571b3e9b",
      "parentUUID": "93e7afef-e19c-40e7-a005-6aeae295187e",
      "skipped": false
    },
    {
      "title": "should store the ids to stop reuse",
      "fullTitle": "#registerSessionIdsInUse(ids) should store the ids to stop reuse",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "447ca97d-d75c-46cc-b16f-e326d5823223",
      "parentUUID": "5e7870d2-4c43-4f9d-b26d-494c36cb9855",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#releaseSessionId(id) should return a UUID",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "764e716f-051e-4e05-8ce0-e872cd51aab8",
      "parentUUID": "60f132e2-f28e-4e9e-832c-8f46d0348901",
      "skipped": false
    },
    {
      "title": "should return false when not referenced",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not referenced",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
      "isRoot": false,
      "uuid": "dc2eb22e-00bf-46c7-ab90-306f62637a98",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return false when null",
      "fullTitle": "#isInstanceAndTypeOf() should return false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
      "isRoot": false,
      "uuid": "ca90391b-6352-4950-8964-a05eb4c6dc7b",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return false when not the correct type",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "b1d18357-7b2b-428f-9848-833cd7c1142a",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return true when is a built-in type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is a built-in type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
      "isRoot": false,
      "uuid": "fa99ec12-5714-41de-97be-3a045d796d16",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should return true when is user defined type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is user defined type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
      "isRoot": false,
      "uuid": "81e5434d-34a0-44ae-b52a-dbfee7250e8b",
      "parentUUID": "1bd30a2a-bef3-44af-b89c-16e2d4e9e19d",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#id should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "70084703-5a93-4c1f-915a-35a95ee5ff21",
      "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "ca8403e7-b9c2-433c-aff0-73cac373da76",
      "parentUUID": "ab08717b-d592-43be-9249-1f659bff3889",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#isDisconnected should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "bf8c7184-0ffb-4c5c-869b-1cc020a1286f",
      "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#isDisconnected should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "2d72054a-da4a-4298-a6ec-8a31d09a890d",
      "parentUUID": "fa10fb8a-50e3-41ed-aad9-ea67630b4836",
      "skipped": false
    },
    {
      "title": "should change participant state to disconnected",
      "fullTitle": "#disconnect() should change participant state to disconnected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
      "isRoot": false,
      "uuid": "7afafc43-356d-4030-8d4d-6651be481c54",
      "parentUUID": "72f85333-7346-4fdc-87e4-3c9249abe262",
      "skipped": false
    },
    {
      "title": "should change participant state to connected",
      "fullTitle": "#reconnect() should change participant state to connected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
      "isRoot": false,
      "uuid": "4ca8ae1b-4a0d-492e-bae5-dfaa2b236666",
      "parentUUID": "73342c28-8737-4423-b560-5484ea666116",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "14a73bec-f140-4ad1-8d67-58a1e93fcee0",
      "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "3f93c157-7be4-4701-924e-c25e8818dfb9",
      "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "483a750a-b245-49ab-9209-9bdd7079546b",
      "parentUUID": "d01a1ca6-8349-43d4-805e-94950fad2b2e",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "b8f9ecd2-7c3c-4f23-8590-5cdfa8f7adec",
      "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "57fdcfcc-20cc-4563-9586-6dd8732678b0",
      "parentUUID": "ba51a907-b53d-4677-96fd-ed0a3d43af69",
      "skipped": false
    },
    {
      "title": "should return true when id does exist",
      "fullTitle": "#contains(id) should return true when id does exist",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
      "isRoot": false,
      "uuid": "9d1964d4-5a29-45e5-a146-66f1cbd9b4cc",
      "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
      "skipped": false
    },
    {
      "title": "should return false when id does not exist",
      "fullTitle": "#contains(id) should return false when id does not exist",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "7160e3e0-4d07-45cb-8ec0-9d78740dc2ed",
      "parentUUID": "ac06e6f9-6923-4c85-839b-eef065c92ac2",
      "skipped": false
    },
    {
      "title": "should add the given participant",
      "fullTitle": "#add(participant) should add the given participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "a086baf2-5c03-4209-b426-4209ae39c9ca",
      "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
      "skipped": false
    },
    {
      "title": "should error if participant with id already exists",
      "fullTitle": "#add(participant) should error if participant with id already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "462d787e-69fe-4605-a5ce-3921b0d21d47",
      "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
      "skipped": false
    },
    {
      "title": "should emit add event",
      "fullTitle": "#add(participant) should emit add event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
      "isRoot": false,
      "uuid": "b3dc3489-4004-4fa9-b9ca-ed819d9ed3e4",
      "parentUUID": "2291964d-decb-405e-9f8d-25c24b2d3ad2",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#remove(participant) should remove the existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "8342e924-a383-4096-8417-e8eb14b2385e",
      "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#remove(participant) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "9385a00e-e510-40b9-a17f-74bc4324c041",
      "parentUUID": "b9ab61d0-0909-4024-9ea2-e116824914c5",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#removeById(id) should remove the existing participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "8d535bb3-4614-49e2-bbcb-45b8b071e6cf",
      "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#removeById(id) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a1fe1964-79a9-4297-91f4-281331a3abcd",
      "parentUUID": "4d16701b-8bb3-46fb-a35b-88eee15654a0",
      "skipped": false
    },
    {
      "title": "should create teams",
      "fullTitle": "#constructor should create teams",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "2ed0cd39-b483-4d88-920d-93c81f83fa70",
      "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
      "skipped": false
    },
    {
      "title": "should not create teams",
      "fullTitle": "#constructor should not create teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
      "isRoot": false,
      "uuid": "cdefaf74-bc3a-465f-88a6-b0bb44b2bea6",
      "parentUUID": "43ccfd42-9119-407c-bccb-b9de4367c691",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#id should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "7332c4b5-d0e7-41f3-b329-d1847452cd41",
      "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "8476508d-0b31-49de-a960-fa6ccc27672c",
      "parentUUID": "79c7d9b6-0aff-4b79-8845-3c7db19a416c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundsPlayed should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "7ab0a99e-b15b-40d4-9952-2bf519a0c2c2",
      "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundsPlayed should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "3bc298dd-fe68-4dfc-aff1-f65f806c10b8",
      "parentUUID": "a328e5cd-8b49-435d-ae4b-e4ce7d33c893",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#previousWinners should throw on set value",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "033fed3d-6107-493f-8ade-0dd95bd29cee",
      "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#previousWinners should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "a38b1a0f-5192-478d-8854-ca4ceb455be2",
      "parentUUID": "9cacc6b9-fafe-4586-a4d7-bf3582b2a745",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundWinner should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "b98dcc70-0919-43c8-8d52-195fcc93d549",
      "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundWinner should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "4860c6c1-baea-4e7e-8e58-a02e7a5e5a57",
      "parentUUID": "8f6c87a3-82d8-48bc-8b75-1417a41723a5",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#observers should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "25921037-f87b-453e-81d8-c1d620fab4b4",
      "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#observers should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
      "isRoot": false,
      "uuid": "dd7744dd-a7e4-4d6d-8a4a-7fd39ecb01fa",
      "parentUUID": "e5ce108a-d936-43ca-b06e-158bf5690486",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8698dd53-b567-416f-b929-83fa5451f64c",
      "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
      "isRoot": false,
      "uuid": "f0519a4a-4e4e-4cab-8c8c-c1ef3ddc644e",
      "parentUUID": "ec241ca1-6f7e-4f45-89d2-ce48317b4fe9",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#host should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "462e656e-7bdd-4873-a7e9-9f15c381abf0",
      "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#host should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
      "isRoot": false,
      "uuid": "49c5030a-6344-47a2-9381-073c3c095599",
      "parentUUID": "755e43f1-74c7-4b6b-8ad5-0c449027517e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#currentState should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "02c0cd76-a239-4703-b841-bc610d5ec311",
      "parentUUID": "5cd07bdf-e9c2-4a0d-9271-a7b8cd67b7c3",
      "skipped": false
    },
    {
      "title": "should increment rounds played",
      "fullTitle": "#incrementRoundsPlayed() should increment rounds played",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "05530cc5-ff0f-4ddf-8d15-f056c13796c6",
      "parentUUID": "8d1c2067-0a22-48d3-9674-cbf90697527b",
      "skipped": false
    },
    {
      "title": "should not allow a contestant username with bad words",
      "fullTitle": "#addContestant(contestant) should not allow a contestant username with bad words",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
      "isRoot": false,
      "uuid": "f02d3e30-bae9-4039-8670-0fd4c1c28760",
      "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
      "skipped": false
    },
    {
      "title": "should not allow when username is empty",
      "fullTitle": "#addContestant(contestant) should not allow when username is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
      "isRoot": false,
      "uuid": "72352f93-5d64-4d44-a9b0-4efff3da4aee",
      "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
      "skipped": false
    },
    {
      "title": "should trim username",
      "fullTitle": "#addContestant(contestant) should trim username",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
      "isRoot": false,
      "uuid": "7fafa8f7-1603-4f97-bb13-b16bcfd76fa8",
      "parentUUID": "866aa5f8-fe89-4f94-9777-9cd384955c07",
      "skipped": false
    },
    {
      "title": "should add contestant when session is not full",
      "fullTitle": "when in individual mode should add contestant when session is not full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "a12753ff-c501-44b1-a10e-12c3f76637a1",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should not add contestant when session is full",
      "fullTitle": "when in individual mode should not add contestant when session is full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
      "isRoot": false,
      "uuid": "6284174c-c130-4906-bad9-f5584c58d78e",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in individual mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "533db27d-4698-4def-a7ba-e1cd79008624",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "BUG# username case should not matter",
      "fullTitle": "when in individual mode BUG# username case should not matter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "aaad1757-d298-4b27-9787-e346d391bba2",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
      "fullTitle": "when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
      "timedOut": false,
      "duration": 413,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
      "isRoot": false,
      "uuid": "53a981c4-4de5-4560-9eb9-d75806017585",
      "parentUUID": "b0945bfa-21ef-4884-8e5f-aa49fdeeaffb",
      "skipped": false
    },
    {
      "title": "should add contestant when teams is not full",
      "fullTitle": "when in team mode should add contestant when teams is not full",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "36f8e6bb-f1c6-47d5-9ff0-876c26df741b",
      "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
      "skipped": false
    },
    {
      "title": "should not add contestant when teams are full",
      "fullTitle": "when in team mode should not add contestant when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "03186a5e-a011-4eaf-a2eb-607f391ff590",
      "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in team mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "2fc1518f-ab01-4683-bb26-73092884550d",
      "parentUUID": "050ba4a9-fd57-4ad8-97e9-7c7c8692c4ff",
      "skipped": false
    },
    {
      "title": "should subscribe callback to the correct event",
      "fullTitle": "#subscribeForStateChange(event, callback) should subscribe callback to the correct event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
      "isRoot": false,
      "uuid": "5f256bfd-ff7d-4217-a1ae-c7a5527544d6",
      "parentUUID": "ec0f7caa-727b-4f7c-a5e1-97dddc878f53",
      "skipped": false
    },
    {
      "title": "should register when state is ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should register when state is ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
      "isRoot": false,
      "uuid": "abca11df-5dcf-4142-af3b-6bb9bf5b3f65",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not register when state is not ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when state is not ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
      "isRoot": false,
      "uuid": "74ff3d9b-8898-4109-af46-47bb658c336e",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not register when contestant does not exist",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "5eb20711-2f62-40a5-8ff1-d0e135cdd96a",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "06f771b2-18ca-47d6-a774-ae7a6d2dbd95",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should not add previous round winner to winners list",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "56aa9a2d-b0e9-4bc2-bc45-f445568d441c",
      "parentUUID": "978b94ca-27ff-4dac-b4fa-813c7fb835e3",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->ACCEPT should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
      "isRoot": false,
      "uuid": "8e50044a-93ef-44b9-8270-3879f25118b4",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->ACCEPT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
      "isRoot": false,
      "uuid": "86cc15e7-547e-44af-add5-c12605b289ec",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should update contestant's score",
      "fullTitle": "action->ACCEPT should update contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "fe9a507b-f675-4495-9359-c7f316485545",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should update contestant's team score",
      "fullTitle": "action->ACCEPT should update contestant's team score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "4d4a385b-ae08-41d0-b544-fc782c633c14",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->ACCEPT should add previous round winner to winners list",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "066ff923-ca10-4e10-805a-01e666fa439e",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->ACCEPT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "12ad43b5-cbc5-428e-a7ab-714f8e6a9897",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should clear pending winner",
      "fullTitle": "action->ACCEPT should clear pending winner",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "7a1a51be-2cf9-478e-abf7-e064986dd3e2",
      "parentUUID": "3a0ade71-6242-4012-b556-05ee2afa087a",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->REJECT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
      "isRoot": false,
      "uuid": "2a5e5660-996c-40c3-8933-573fbedd4dff",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->REJECT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
      "isRoot": false,
      "uuid": "f7ce38ed-4453-4886-ae00-8c257a2e8cc6",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should not replace round winner with pending contestant",
      "fullTitle": "action->REJECT should not replace round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "6a7bd29e-328f-4fe3-b91c-5b02d87d86fc",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should not update pending contestant's score",
      "fullTitle": "action->REJECT should not update pending contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "bb31e76a-3fc4-484f-86dd-93f2068612a9",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should add round winner to previous winners list",
      "fullTitle": "action->REJECT should add round winner to previous winners list",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "f3c02eea-c91d-4a31-916d-869afc84c9d9",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->REJECT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "6f299638-c665-44b1-b733-46d2d8a3371f",
      "parentUUID": "6e695545-1e28-4abf-94a0-7d9b49a59500",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->RESET should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "96e295aa-cbea-46a8-8edc-05ea91677f93",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->RESET should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "e0115ab4-550e-42af-ad22-e0f37a17d817",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->RESET should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "77c12ef0-0b57-4ca1-8c0e-af2d465dafce",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->RESET should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "ab952a0b-a35a-4b85-b750-9574c1f78eae",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->RESET should change game state back to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "02725313-82f1-48a5-8d04-d77abc1cec66",
      "parentUUID": "bd5a8f53-efc6-4056-b5fa-dd12b0ea6916",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->DISABLE should allow when game state is ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "099bd495-9978-411f-a46f-4c4125cd80b5",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->DISABLE should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "fb6b1929-8353-4162-b235-bbd7d85cf3d2",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->DISABLE should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "1f2cffbb-f205-47b9-9002-80f7fd7dbb02",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->DISABLE should add previous round winner to winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "a91ff644-cec5-4a0a-9e8e-9d3763bb84af",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should change game state to buzzerLock",
      "fullTitle": "action->DISABLE should change game state to buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
      "isRoot": false,
      "uuid": "8d7b7b50-d7f6-48f4-b3ed-c9b9131818dd",
      "parentUUID": "16f0f12a-f5a1-46d8-9149-ecdcc78d06c2",
      "skipped": false
    },
    {
      "title": "should allow when game state is buzzerLock",
      "fullTitle": "action->ENABLE should allow when game state is buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
      "isRoot": false,
      "uuid": "022cab90-3976-4676-a48b-078c0c247ffd",
      "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not buzzerLock",
      "fullTitle": "action->ENABLE should not allow when game state is not buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
      "isRoot": false,
      "uuid": "46f1d555-11dc-4379-9853-069f2125d33f",
      "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
      "skipped": false
    },
    {
      "title": "should change game state to ready",
      "fullTitle": "action->ENABLE should change game state to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "b43a1016-75c7-49b4-af77-02a20cb4b2f0",
      "parentUUID": "372edada-4364-4477-abfc-306c9cbffe14",
      "skipped": false
    },
    {
      "title": "should return the pending winner",
      "fullTitle": "#pendingWinner should return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
      "isRoot": false,
      "uuid": "effd27bd-f8d6-4e9d-8660-1f377064d1c1",
      "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
      "skipped": false
    },
    {
      "title": "should not return the pending winner",
      "fullTitle": "#pendingWinner should not return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "6d5b9fe9-902c-4eb9-9643-58ea2746b8b0",
      "parentUUID": "cf318778-3d91-4c53-98b5-1bdc27f74eb6",
      "skipped": false
    },
    {
      "title": "should update session name",
      "fullTitle": "#updateSessionName(name) should update session name",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
      "isRoot": false,
      "uuid": "00ca6dfe-b591-46d7-b2a8-252416ac6d2b",
      "parentUUID": "7c266ef4-fe94-4db2-8b1a-db48936ca7f0",
      "skipped": false
    },
    {
      "title": "should update max contestants",
      "fullTitle": "#updateMaxContestants(maxContestants) should update max contestants",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "e1242150-8420-4056-ad2b-59106dfa7cfc",
      "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
      "skipped": false
    },
    {
      "title": "should not allow below current connected amount",
      "fullTitle": "#updateMaxContestants(maxContestants) should not allow below current connected amount",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "67dd0008-db61-4a99-92a0-ff46010d904f",
      "parentUUID": "3547d0ef-96f5-4b7a-ae89-6e51ca473405",
      "skipped": false
    },
    {
      "title": "should update team size",
      "fullTitle": "#updateTeamSize(teamSize) should update team size",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "89d91641-16dd-4f73-ba19-079a112cdc33",
      "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateTeamSize(teamSize) should not allow below current setting",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "69210836-6cad-4a5f-8f29-81acd8d8d3a8",
      "parentUUID": "06b7d325-e6dc-401f-9f13-1eaf79039a74",
      "skipped": false
    },
    {
      "title": "should update max teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should update max teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "88a112e2-15d6-4fb5-b3b5-88420d996094",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should add teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should add teams",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "48eb509c-314f-43e9-b765-4ab8843a8c50",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow below current setting",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "f541e4cb-9fdf-45e2-8595-c14174a91095",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should not allow if teams are PLAYER_CHOICE",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "ae6fb449-0213-49d6-af55-32c17b56173b",
      "parentUUID": "dc272cf5-97ba-4ffe-98e7-2f37075ff8fd",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "cbbfc618-896a-44b1-851a-a3fd7310b940",
      "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "ebdd0d1a-37a0-4858-9a27-2741e7e8bdc1",
      "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "15f57c48-d0f0-4e06-a472-91303d23ba94",
      "parentUUID": "3ff96bd6-5139-44bf-b5ad-0246738acee5",
      "skipped": false
    },
    {
      "title": "add and return session",
      "fullTitle": "#add(host, settings) add and return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
      "isRoot": false,
      "uuid": "cbd538cf-b4f7-4c58-ad55-e97f3ba560b6",
      "parentUUID": "77261d38-59eb-4124-927e-0f24bbb9782e",
      "skipped": false
    },
    {
      "title": "when given valid id should return session",
      "fullTitle": "#getById(id) when given valid id should return session",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
      "isRoot": false,
      "uuid": "03b110c6-dc43-4cd4-bf9e-7a12a9102ef3",
      "parentUUID": "43b12cfc-68a5-4e6a-98ac-6487a742be90",
      "skipped": false
    },
    {
      "title": "should remove complete sc",
      "fullTitle": "#purgeCompleted() should remove complete sc",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "13e224a5-1175-4763-be66-349eaf892150",
      "parentUUID": "a3150e83-6386-4458-bf02-59b5b28c4ecb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#hasTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "78c26988-b511-43a6-82c2-145e19c0488e",
      "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#hasTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "1acc5731-0020-45a5-abf5-a9a5b2daab47",
      "parentUUID": "99d266e0-389f-4acc-8c02-b7aea546a0bb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamSize should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "086f4bf0-613e-4932-8a01-a1066f1caa06",
      "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamSize should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "5db5df18-546b-4938-b473-5f347845bcbe",
      "parentUUID": "f879096a-338a-4648-8472-7e1d3fc0d1ed",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "924d9696-696e-4a8d-8692-419a5304f710",
      "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "722edf3c-8523-4a2d-90e7-a929a76db8dc",
      "parentUUID": "9ae2d661-5bd9-4691-b61b-3db6c220a6d7",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeaderSelectionMethod should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "b5cfbc83-7630-4ef7-ae90-e1fd1fc6e6d5",
      "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamLeaderSelectionMethod should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "4334ab21-a35f-4ebe-a73e-14e2d1c704e6",
      "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeaderSelectionMethod should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "ac18e688-073e-4f92-a4f0-fbccac0ce31d",
      "parentUUID": "b03b3352-dcc7-49ea-b754-f843336a90de",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNameEdit should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "bae1265d-7d7e-4228-8c45-6908744d1b8f",
      "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamNameEdit should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "a278b610-9d08-4b03-b6e2-3bb13d4298d0",
      "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNameEdit should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "611cd9d2-8476-4271-8fe1-d7077c65c771",
      "parentUUID": "0718a908-e293-4480-acb6-0bb8cc372ec1",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxContestants should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b883c28f-4e65-48f5-9d8b-1837607aec23",
      "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxContestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "bb0ce79a-7b00-42d8-9458-23d2a52d9215",
      "parentUUID": "b601bbb0-56e1-4424-875e-8470d4989b9f",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#sessionName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "75a7b4ca-328d-41d4-bb78-6b1567f23c9c",
      "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#sessionName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "9f5f8c21-455a-486c-8070-43038fe8b8d1",
      "parentUUID": "6143d346-434a-43ca-8f4d-a25094ab5741",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNames should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "d54b6d0b-30d4-4126-b17e-f67583523955",
      "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNames should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "6b317e12-5a64-4383-9df3-337d6da67a49",
      "parentUUID": "98d47fd0-a481-419e-af6f-2746a70b0a7a",
      "skipped": false
    },
    {
      "title": "should throw when settings.maxTeams is less than 1",
      "fullTitle": "#create(teams, settings) should throw when settings.maxTeams is less than 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "45517d93-25a9-4e98-8fa0-3c66496e9eed",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should create the correct amount of teams",
      "fullTitle": "#create(teams, settings) should create the correct amount of teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "5dfd9e67-b7c7-44da-bf73-2fdbd267f61c",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should not fail with a large team size",
      "fullTitle": "#create(teams, settings) should not fail with a large team size",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
      "isRoot": false,
      "uuid": "8668b000-3f3e-4476-9e79-b1795a768dfc",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should use settings.teamNames first, before random selection",
      "fullTitle": "#create(teams, settings) should use settings.teamNames first, before random selection",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "df08e150-d28f-405c-aa05-8b37010420bd",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should only create a single team when using unlimited teams",
      "fullTitle": "#create(teams, settings) should only create a single team when using unlimited teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "ec031349-6743-4375-860c-cdecf2a5b469",
      "parentUUID": "7de2bca0-fea7-4bb5-8472-27770df51b25",
      "skipped": false
    },
    {
      "title": "should add a team",
      "fullTitle": "#add(teams, settings) should add a team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "769454de-e56f-40d2-8aa8-9ca559d71285",
      "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
      "skipped": false
    },
    {
      "title": "should reuse team names specified in settings",
      "fullTitle": "#add(teams, settings) should reuse team names specified in settings",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
      "isRoot": false,
      "uuid": "2bce6ace-5de4-49c8-94e4-d78b72b74fae",
      "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
      "skipped": false
    },
    {
      "title": "should factor in team names which are already in use",
      "fullTitle": "#add(teams, settings) should factor in team names which are already in use",
      "timedOut": false,
      "duration": 206,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
      "isRoot": false,
      "uuid": "dd406f2f-3adc-4fff-8989-f8bb97b83fe8",
      "parentUUID": "53d5e9fd-8c19-4d2e-bd90-cf03900d834f",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "c07c551b-c8ce-4edb-9adc-c2083eb83527",
      "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "ec5dfbcd-3800-41bf-9f14-0ffac0c91e72",
      "parentUUID": "7cbc824c-9097-4212-ba79-badf1b4e9b61",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeader should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "aae71ebe-722b-4cba-9230-7b51eb4c4e28",
      "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeader should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "821ae8d5-4cdf-41a4-b808-d2aec093e538",
      "parentUUID": "8a9d580e-3142-489d-a55e-dc5e3fda768c",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d94a73a8-37ac-4460-9308-2ab2f552fc15",
      "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "bf4d265a-e19b-42ea-9b38-f4d5e8e5a306",
      "parentUUID": "30ebaed8-d0ab-4317-a7ba-86408c91387e",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "b0c598d5-3014-48f9-a807-08e949297beb",
      "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
      "isRoot": false,
      "uuid": "1d27ba2f-f9ee-442d-b0cf-8b35b254b5af",
      "parentUUID": "596d546d-3fe7-4d84-b98a-7a01f4af1bd0",
      "skipped": false
    },
    {
      "title": "should update the teams score",
      "fullTitle": "when a contestant scores should update the teams score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "9baa5b10-3f61-417a-a30a-d2be1cf81610",
      "parentUUID": "ef6c2ad7-51e2-4852-a2c8-c3ac5e17fbc9",
      "skipped": false
    },
    {
      "title": "should allow it when no team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "ad19377f-88db-4e4b-919a-02dcfa7bf68e",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should not allow it when a team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
      "isRoot": false,
      "uuid": "759d9a9c-016c-48cb-b02e-583fce2e87da",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should not allow it when a contestant is not in team",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
      "isRoot": false,
      "uuid": "5457ccb6-6eed-4790-bb8f-233eda8e6296",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should allow it when a team leader is set and host override is flagged",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "f2178b67-1885-40dd-9f1a-e334fcab4313",
      "parentUUID": "f430d2e9-a0bf-4f54-9c5d-290a6b6aab0b",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "260f5db3-6af2-4adb-9261-256ba588a63a",
      "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
      "skipped": false
    },
    {
      "title": "should not change name when setting do not allow it",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "9329f43a-3d9d-4de8-9fad-46862d64571b",
      "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
      "skipped": false
    },
    {
      "title": "should not change name when name contains profanity",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "8bdfcd39-81a7-46db-bb97-a312dd05f2f1",
      "parentUUID": "55d302c9-284c-4472-9c40-621c7f0d11ab",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "when host override should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "379d11c7-0ab2-4bbd-9269-3c62af48c662",
      "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
      "skipped": false
    },
    {
      "title": "should change name when setting do not allow it",
      "fullTitle": "when host override should change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "caf27012-3dae-4a24-8e3b-81435ff0f1e5",
      "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
      "skipped": false
    },
    {
      "title": "should change name when name contains profanity",
      "fullTitle": "when host override should change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "f48912b0-42b5-4fa6-87a8-5085d3578906",
      "parentUUID": "890da7b4-2309-4c33-adde-1804091a14c8",
      "skipped": false
    },
    {
      "title": "should get contestant when contest with username exists",
      "fullTitle": "getContestantByUsername(username) should get contestant when contest with username exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
      "isRoot": false,
      "uuid": "d6fce9d2-af61-4959-8d0d-e7f3445c2eb7",
      "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
      "skipped": false
    },
    {
      "title": "should not get contestant when contest with username does not exist",
      "fullTitle": "getContestantByUsername(username) should not get contestant when contest with username does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
      "isRoot": false,
      "uuid": "c8c0d853-6b4a-4488-bfd7-23ce34ad7474",
      "parentUUID": "d5589fcc-ba55-42ce-ba30-c57b1b93f174",
      "skipped": false
    },
    {
      "title": "should return true when team with teamName does exist",
      "fullTitle": "#contains(teamName) should return true when team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
      "isRoot": false,
      "uuid": "edf4ffda-4e38-4cc5-8116-d38a955c4da5",
      "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
      "skipped": false
    },
    {
      "title": "should return false when no team with teamName does exist",
      "fullTitle": "#contains(teamName) should return false when no team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "fdd44656-5b93-4bd4-a333-0cb59fa86122",
      "parentUUID": "be61d410-de5b-486a-b41b-0a3880afb64f",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5f8e16cc-cf88-4936-92cf-afaad9365ca4",
      "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "b8bcdcda-66db-4486-8a64-0cfc843ff47a",
      "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "84b7c567-ec72-4b85-9232-f8979c9d9490",
      "parentUUID": "746c0575-15a2-47ff-9cc9-4692e45915d3",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "189e8f88-1280-4fb4-8e82-a4784e6e941c",
      "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a0517046-7021-48cd-afd1-4d5211da2f07",
      "parentUUID": "a48a3134-b768-4628-9831-e3f1c7b6c3bb",
      "skipped": false
    },
    {
      "title": "should add the given team",
      "fullTitle": "#add(team) should add the given team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "a4d6c981-7c5a-4d1a-bfcf-5a399173d72d",
      "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
      "skipped": false
    },
    {
      "title": "should error if team with teamName already exists",
      "fullTitle": "#add(team) should error if team with teamName already exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "54187b49-2d55-434b-919a-f74a1a8c1b1a",
      "parentUUID": "9f7297bb-6fc6-4bb2-af16-67ee7cb32bf6",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#remove(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "d446d99a-495a-4e31-92a2-403c3396d67d",
      "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#remove(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "14fa28dc-95a6-442d-95cf-37d10e86b622",
      "parentUUID": "c9bddfc7-58e3-494d-a395-1ad5fa45064a",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#removeByTeamName(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "2075d918-05c7-4c44-9ed6-5a74a382c035",
      "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
      "skipped": false
    },
    {
      "title": "should ignore team name case",
      "fullTitle": "#removeByTeamName(team) should ignore team name case",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "6015a172-df0c-4714-a787-8711da358434",
      "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#removeByTeamName(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "1f2a3800-264a-461a-bd98-457fb3d06c06",
      "parentUUID": "4c01d6d3-6b91-4c23-b4cb-4e9dfd18e6c9",
      "skipped": false
    },
    {
      "title": "should give contestant an id",
      "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
      "isRoot": false,
      "uuid": "6364227b-6cc7-464b-8da6-2b68feabcd8f",
      "parentUUID": "06d1bc72-40ee-444c-968a-68aea1553a91",
      "skipped": false
    },
    {
      "title": "should return a valid response",
      "fullTitle": "when teams are full should return a valid response",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "ec61f2c1-5429-4f97-8594-7baf96409fe1",
      "parentUUID": "7cee38ce-a3f1-4a45-a819-7e2334560790",
      "skipped": false
    },
    {
      "title": "should inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
      "isRoot": false,
      "uuid": "cc337122-f26d-4b06-8ae9-00c71d71ca69",
      "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
      "isRoot": false,
      "uuid": "08dbeffe-fb6e-424b-b0e8-b897ca7cc667",
      "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
      "skipped": false
    },
    {
      "title": "should not add contestant as teamLeader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
      "isRoot": false,
      "uuid": "6c889861-17eb-445e-9253-b7d22b03e36f",
      "parentUUID": "e5f710b0-db82-4851-a31e-9c80e5ca4936",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is RANDOM should not inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
      "isRoot": false,
      "uuid": "2650a3d5-54cd-44c8-92e0-be0f2de24a87",
      "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
      "skipped": false
    },
    {
      "title": "should automatically add team leader when team is filled",
      "fullTitle": "when teamLeader selection is RANDOM should automatically add team leader when team is filled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
      "isRoot": false,
      "uuid": "669cd2aa-8a91-405c-923f-d961c70a1580",
      "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
      "skipped": false
    },
    {
      "title": "should not automatically add team leader when team is not filled",
      "fullTitle": "when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
      "isRoot": false,
      "uuid": "9a79042d-6bae-43fe-bc22-bd53d866394f",
      "parentUUID": "23e8d717-6bd8-491f-a908-69745e75aaea",
      "skipped": false
    },
    {
      "title": "should add team when teams are full",
      "fullTitle": "when set to use unlimited teams should add team when teams are full",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "7c3ace04-c83a-480e-bb13-b4be090e3f51",
      "parentUUID": "c17e4717-9391-4a81-85ff-6c6d0da0ab15",
      "skipped": false
    },
    {
      "title": "should throw when no team name is given",
      "fullTitle": "when team selection method is PLAYER_CHOICE should throw when no team name is given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
      "isRoot": false,
      "uuid": "18087a4d-4d1b-4e2e-bdcd-8c82b25f6855",
      "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
      "skipped": false
    },
    {
      "title": "should add contestant to correct team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should add contestant to correct team",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "fbec7990-41cd-4276-a782-17d377c77b66",
      "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
      "skipped": false
    },
    {
      "title": "should not add to full team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not add to full team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "25bb7e2f-0b6b-444a-a9e9-824517138e15",
      "parentUUID": "e21c6e6f-4e83-4ee0-89c6-54cff26fdd34",
      "skipped": false
    },
    {
      "title": "should get team of contestant",
      "fullTitle": "getByContestant(contestant) should get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
      "isRoot": false,
      "uuid": "90b00a0a-15db-4edf-b89b-3795372e7f7c",
      "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
      "skipped": false
    },
    {
      "title": "should not get team of contestant",
      "fullTitle": "getByContestant(contestant) should not get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "9991ed34-6feb-48a2-ab86-df105ba8734f",
      "parentUUID": "03b8c82f-471d-4ae5-9cb1-a02218f1a261",
      "skipped": false
    },
    {
      "title": "should get team when team with name exists",
      "fullTitle": "getByTeamName(temName) should get team when team with name exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
      "isRoot": false,
      "uuid": "ca3bd213-3ec2-46d1-9099-e36968ddad41",
      "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
      "skipped": false
    },
    {
      "title": "should not get team when team with name does not exist",
      "fullTitle": "getByTeamName(temName) should not get team when team with name does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "bcb413ea-c2fa-40e9-9742-a5013e6f2c2c",
      "parentUUID": "692fa810-160c-4fb2-a8b8-a9fbd2a03509",
      "skipped": false
    },
    {
      "title": "should not return full teams",
      "fullTitle": "getAvailable(settings) should not return full teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "1c7f5da7-2e20-447d-b548-e056cd0cb84f",
      "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
      "skipped": false
    },
    {
      "title": "should return teams with space",
      "fullTitle": "getAvailable(settings) should return teams with space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "10e61e2c-be8d-4dcb-ad48-d7facaf54ec9",
      "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
      "skipped": false
    },
    {
      "title": "should return teams with unlimited space",
      "fullTitle": "getAvailable(settings) should return teams with unlimited space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "40c64adb-9a3e-499a-b976-4e8af62958ed",
      "parentUUID": "ef46bb4d-a250-4c94-943a-07887aba85e2",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}