{
  "reportTitle": "buzzer.click",
  "reportPageTitle": "Mochawesome Report Card",
  "stats": {
    "suites": 37,
    "tests": 129,
    "passes": 129,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-11T04:52:20.519Z",
    "end": "2017-09-11T04:52:23.819Z",
    "duration": 3300,
    "testsRegistered": 129,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "contestant",
            "suites": [
              {
                "title": "join",
                "suites": [
                  {
                    "title": "as individual",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 118,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d430898a-ccbf-4ec6-b842-a51eb0fcea4a",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "161b67e5-52ff-4ffa-b8ce-34f9794965ff",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 36,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "98276b1f-fea1-4877-a8c1-a88d60ed5e81",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4360a205-8a94-434c-b491-6e0dd08ff63a",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "090ff436-d18a-49c4-ad9b-2153ef4e2c77",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "016777a6-60d0-4186-bf96-08efe78102fa",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "78ba7283-2858-4220-8cfa-1420bca48cd0",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5b20a9c2-6ccd-467b-8a73-e579e05011df",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                    "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 118,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d430898a-ccbf-4ec6-b842-a51eb0fcea4a",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "161b67e5-52ff-4ffa-b8ce-34f9794965ff",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 36,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "98276b1f-fea1-4877-a8c1-a88d60ed5e81",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4360a205-8a94-434c-b491-6e0dd08ff63a",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "090ff436-d18a-49c4-ad9b-2153ef4e2c77",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "016777a6-60d0-4186-bf96-08efe78102fa",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "78ba7283-2858-4220-8cfa-1420bca48cd0",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5b20a9c2-6ccd-467b-8a73-e579e05011df",
                        "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 8,
                    "totalPasses": 8,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 316
                  },
                  {
                    "title": "with teams",
                    "suites": [
                      {
                        "title": "when team leader selection method is RANDOM",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "97a58119-7e4f-4b73-a340-ffaa9fd30fdd",
                            "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "167a62a0-92d9-4d61-8a54-b1252caa0a78",
                            "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "521b54e6-3750-4440-94c1-d4580867036f",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "97a58119-7e4f-4b73-a340-ffaa9fd30fdd",
                            "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "167a62a0-92d9-4d61-8a54-b1252caa0a78",
                            "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 2,
                        "totalPasses": 2,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 50
                      },
                      {
                        "title": "when team selection method is PLAYER_CHOICE",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "7d07a29d-0e9e-4fb5-aa12-d3391210d054",
                            "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "91f5419d-72b3-4fdc-bcf8-307ae0c9c556",
                            "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 126,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "ac851d4a-f6a8-464d-a22b-1aeae73f57ee",
                            "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "7d07a29d-0e9e-4fb5-aa12-d3391210d054",
                            "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "91f5419d-72b3-4fdc-bcf8-307ae0c9c556",
                            "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 126,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "ac851d4a-f6a8-464d-a22b-1aeae73f57ee",
                            "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 155
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9730e7a9-adfd-49d7-aa68-0ba595471a4b",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "7f43d1e5-d7a8-40e0-a209-f9db12e5741c",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2fc3f768-98db-4616-a0fd-1beeb956af45",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4fb3a6e8-ebbe-4f0e-8e58-6f0b17c714ff",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "52d79b3a-640a-4f20-b554-66668f40212d",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "19f050f3-103f-4a49-9cf6-8f9f9fd19d43",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "87c7606f-b612-40ad-8389-4d5fe3022da2",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c7826714-598f-4c7e-a308-f510dc68da5e",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "cc7d0295-fd1d-49d6-8f4a-290bef5a84d8",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "914208d8-02ac-487e-94b0-c745b1c58264",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "20e797f6-9bfb-492f-8170-95029dd06109",
                    "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9730e7a9-adfd-49d7-aa68-0ba595471a4b",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "7f43d1e5-d7a8-40e0-a209-f9db12e5741c",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2fc3f768-98db-4616-a0fd-1beeb956af45",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4fb3a6e8-ebbe-4f0e-8e58-6f0b17c714ff",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "52d79b3a-640a-4f20-b554-66668f40212d",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "19f050f3-103f-4a49-9cf6-8f9f9fd19d43",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "87c7606f-b612-40ad-8389-4d5fe3022da2",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c7826714-598f-4c7e-a308-f510dc68da5e",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "cc7d0295-fd1d-49d6-8f4a-290bef5a84d8",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "914208d8-02ac-487e-94b0-c745b1c58264",
                        "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 10,
                    "totalPasses": 10,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 224
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "1fe5a745-6f98-452d-8338-259ff0325451",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7f9d15a2-f3e4-42dd-a7b6-c8c64c7a1a39",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "1743f6fd-e9fb-430d-a7d8-ad321fd1ee80",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "1aa6a9f8-5ab1-431d-b669-39bf4d71478b",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f912c7c1-84d6-4cf5-94e2-cb0af6733271",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7f9d15a2-f3e4-42dd-a7b6-c8c64c7a1a39",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "1743f6fd-e9fb-430d-a7d8-ad321fd1ee80",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "1aa6a9f8-5ab1-431d-b669-39bf4d71478b",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f912c7c1-84d6-4cf5-94e2-cb0af6733271",
                    "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 134
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3add47e6-1818-4754-b80d-603e09f524a6",
                    "parentUUID": "bf152556-835e-4d08-aeac-b3cd3a6712c7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "bf152556-835e-4d08-aeac-b3cd3a6712c7",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3add47e6-1818-4754-b80d-603e09f524a6",
                    "parentUUID": "bf152556-835e-4d08-aeac-b3cd3a6712c7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 20
              },
              {
                "title": "team leader inquiry response",
                "suites": [],
                "tests": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7fd6e847-8e6f-4725-9e1a-c37801543fb2",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ce992281-4de2-4c62-a15b-620093086cb2",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "68851187-1377-4bc4-a7b9-457f4d35ca2c",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d43bb1a7-0249-4635-85eb-8d288a114080",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8f0381d6-d09b-4f9f-8d4f-11d3251564d4",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c693edcc-da46-4743-84dd-17fb0c154225",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7fd6e847-8e6f-4725-9e1a-c37801543fb2",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ce992281-4de2-4c62-a15b-620093086cb2",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "68851187-1377-4bc4-a7b9-457f4d35ca2c",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d43bb1a7-0249-4635-85eb-8d288a114080",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8f0381d6-d09b-4f9f-8d4f-11d3251564d4",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c693edcc-da46-4743-84dd-17fb0c154225",
                    "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 141
              },
              {
                "title": "buzzerPress",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5bd9dc61-1776-49d1-af6f-41af3993bd57",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cac7fb47-db08-4b24-b7a9-26a5a1e404f0",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bfada71e-7bf4-4f1c-8fab-44e71a178627",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e8262290-22e5-4af9-bf02-dcd557272a45",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "21de282c-5838-47c8-9de4-2bce4a8a4c5c",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5bd9dc61-1776-49d1-af6f-41af3993bd57",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cac7fb47-db08-4b24-b7a9-26a5a1e404f0",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bfada71e-7bf4-4f1c-8fab-44e71a178627",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e8262290-22e5-4af9-bf02-dcd557272a45",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "21de282c-5838-47c8-9de4-2bce4a8a4c5c",
                    "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 113
              },
              {
                "title": "team name change request",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f3393450-bf6a-4e9c-8ad2-0e9660f78bda",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3916ce0a-2a96-4c3e-a402-58b0f9d30fe6",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is empty",
                    "fullTitle": "contestant team name change request should not allow it when team name is empty",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b6bc549a-3d88-45e0-a088-bfddd2f15be2",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2b58c51e-7c56-41d4-b511-0632c7900b64",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "60b7171b-0895-4dbf-82ad-ac9eeb314d3c",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3a8e9d56-b61a-4ab1-bc41-74921c509350",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3421f377-9bc6-4f6f-bdc5-c161cad6116a",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c373ebaa-0571-46b2-8386-3bf3b439de84",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "631194f5-d94f-4e55-8d1a-aac08b1492e2",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "baf8c41f-4aa0-40e4-8176-3bd49abf9077",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "27ddf776-ec7f-44e6-924f-09a6d0508594",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "29711bb6-14a2-444e-8caf-86126de8f418",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f3393450-bf6a-4e9c-8ad2-0e9660f78bda",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3916ce0a-2a96-4c3e-a402-58b0f9d30fe6",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is empty",
                    "fullTitle": "contestant team name change request should not allow it when team name is empty",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b6bc549a-3d88-45e0-a088-bfddd2f15be2",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2b58c51e-7c56-41d4-b511-0632c7900b64",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "60b7171b-0895-4dbf-82ad-ac9eeb314d3c",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3a8e9d56-b61a-4ab1-bc41-74921c509350",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3421f377-9bc6-4f6f-bdc5-c161cad6116a",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c373ebaa-0571-46b2-8386-3bf3b439de84",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "631194f5-d94f-4e55-8d1a-aac08b1492e2",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "baf8c41f-4aa0-40e4-8176-3bd49abf9077",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "27ddf776-ec7f-44e6-924f-09a6d0508594",
                    "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 11,
                "totalPasses": 11,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 227
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0322d604-0adb-4233-864f-c96a65820180",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bc72e83d-a259-4f5e-a785-c47c654350be",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "261f6843-e370-4b82-8b24-672245b59640",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "47db130d-5e57-46cb-887f-d6d9085cc7ad",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "78e94063-b0c1-4bce-9c4a-aa6f6f5f07aa",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0322d604-0adb-4233-864f-c96a65820180",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bc72e83d-a259-4f5e-a785-c47c654350be",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "261f6843-e370-4b82-8b24-672245b59640",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "47db130d-5e57-46cb-887f-d6d9085cc7ad",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "78e94063-b0c1-4bce-9c4a-aa6f6f5f07aa",
                    "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 96
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
            "uuid": "b20e5d70-5a4a-43d2-8eda-d58682d1416d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
        "uuid": "3ca22600-7a84-4a61-8ddd-3a74908d68b1",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "host",
            "suites": [
              {
                "title": "create",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "b640bdac-92f8-4e0b-b478-6c930f026529",
                        "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "87ead9a9-2ea2-443b-9c6b-30e22d09a2de",
                        "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "4223e5ac-7981-4ec5-bc9d-93efaf6ae47c",
                        "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                    "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "b640bdac-92f8-4e0b-b478-6c930f026529",
                        "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "87ead9a9-2ea2-443b-9c6b-30e22d09a2de",
                        "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "4223e5ac-7981-4ec5-bc9d-93efaf6ae47c",
                        "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 31
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "f7351921-ed10-4e2e-b6ad-5acf49494805",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1cc16c0a-b191-4d9c-9a28-ef79cf68ffa5",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "91a90540-1656-4666-9326-d46670caefa2",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 37,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9d0aa581-420d-4f87-9817-e67e20ad5711",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7b8ed6d7-fbb8-439f-ad56-edc42d6365c6",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2e9d9ce1-646a-4e9d-9763-97c2846431e7",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6d8007b8-3671-4302-bb68-25fd94597945",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                    "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1cc16c0a-b191-4d9c-9a28-ef79cf68ffa5",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "91a90540-1656-4666-9326-d46670caefa2",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 37,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9d0aa581-420d-4f87-9817-e67e20ad5711",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7b8ed6d7-fbb8-439f-ad56-edc42d6365c6",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2e9d9ce1-646a-4e9d-9763-97c2846431e7",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6d8007b8-3671-4302-bb68-25fd94597945",
                        "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 6,
                    "totalPasses": 6,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 123
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "58ac46ff-d719-4e38-a855-d88638b654cd",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "complete",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ee3e8a8d-18ce-4b4b-a9a8-01f58cc7fe13",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6113a3fc-bd63-4e58-8e2a-9ab03e6c88aa",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1894ad4b-0138-4dfd-9073-2ebbc1d7b5bf",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d47dc66b-6cc3-438b-b53d-af3acb056996",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a3932263-27d7-4049-b552-f397fcb63ec3",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "d9f92852-3c05-406a-9431-36c813e7f245",
                    "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ee3e8a8d-18ce-4b4b-a9a8-01f58cc7fe13",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6113a3fc-bd63-4e58-8e2a-9ab03e6c88aa",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1894ad4b-0138-4dfd-9073-2ebbc1d7b5bf",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d47dc66b-6cc3-438b-b53d-af3acb056996",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a3932263-27d7-4049-b552-f397fcb63ec3",
                        "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 53
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "22f5bbe1-0ecd-45d0-8a8a-13dd77b057d0",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "buzzer",
                "suites": [
                  {
                    "title": "action",
                    "suites": [
                      {
                        "title": "when accepted",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1d1462fb-7e58-4391-a144-bc7e073a9c9e",
                            "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "07630024-a64c-47d0-a709-7a21d36ad48c",
                            "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "d36f662f-218d-419a-ac3f-122cf501666b",
                            "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1d1462fb-7e58-4391-a144-bc7e073a9c9e",
                            "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "07630024-a64c-47d0-a709-7a21d36ad48c",
                            "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "d36f662f-218d-419a-ac3f-122cf501666b",
                            "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 77
                      },
                      {
                        "title": "when rejected",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "84d8b852-4474-4719-a88d-e0e63ce32a42",
                            "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 34,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "129afeff-fd7b-4074-8c4e-01e63d776244",
                            "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "3e2f8e1b-b957-4dcd-b143-628ed8b315fc",
                            "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "a30a415d-73e0-4670-bac8-3517558af539",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "84d8b852-4474-4719-a88d-e0e63ce32a42",
                            "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 34,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "129afeff-fd7b-4074-8c4e-01e63d776244",
                            "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "3e2f8e1b-b957-4dcd-b143-628ed8b315fc",
                            "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 79
                      },
                      {
                        "title": "when reset",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "a32c6518-e2a1-443c-9c59-844a298256bd",
                            "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "71e09d6b-ab17-495a-a826-8c52f86525e4",
                            "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "931d8679-d4f3-4313-b264-3e45878dbdfa",
                            "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "7bb15241-3798-4971-b80c-de855f5445c9",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "a32c6518-e2a1-443c-9c59-844a298256bd",
                            "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "71e09d6b-ab17-495a-a826-8c52f86525e4",
                            "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "931d8679-d4f3-4313-b264-3e45878dbdfa",
                            "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 77
                      },
                      {
                        "title": "when disabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "ea17e553-85f6-4908-9e1b-c4a73084a039",
                            "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "67774925-28c0-4e8e-93b3-c30e5b55fb60",
                            "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "453817f5-8791-4eb9-8c8a-7981ff63a566",
                            "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "e834e9dc-2875-4ff2-b43b-606309288230",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "ea17e553-85f6-4908-9e1b-c4a73084a039",
                            "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "67774925-28c0-4e8e-93b3-c30e5b55fb60",
                            "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "453817f5-8791-4eb9-8c8a-7981ff63a566",
                            "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 70
                      },
                      {
                        "title": "when enabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1a3d2a5e-a3ff-453b-96c9-fab78d2658b0",
                            "parentUUID": "59b42d25-2499-458a-ba73-68c479f76ea1",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "59b42d25-2499-458a-ba73-68c479f76ea1",
                        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1a3d2a5e-a3ff-453b-96c9-fab78d2658b0",
                            "parentUUID": "59b42d25-2499-458a-ba73-68c479f76ea1",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 1,
                        "totalPasses": 1,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 13
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 35,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c1b99d74-315c-4c33-8cd3-6d78eee2b1a9",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b4b35a7c-5a67-480a-b304-660a3b4ee684",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "cf30b0b3-7ee4-40ad-9065-69d79efc4e0a",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "88ed271b-459c-4ac5-9940-c0faaa69fd4f",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "b374c2f4-3f1d-4216-8cda-266938f67a4a",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "63e11173-9688-4cbd-8d06-2b0268776fe8",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2fbe1087-d144-4d1e-93b4-c78cbf52270c",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "feade970-e76a-46c4-aa9b-66b158b2ccad",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1a758e76-c415-425f-8f8a-eb3f4b2c02ee",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "23905f51-6bd1-48d9-b5e0-cf53b02a95f8",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f6538128-86a6-4caf-942f-31db63f5bcc3",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "8ae95247-570e-4dea-9cf8-97ceb49a65a0",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                    "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 35,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c1b99d74-315c-4c33-8cd3-6d78eee2b1a9",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b4b35a7c-5a67-480a-b304-660a3b4ee684",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "cf30b0b3-7ee4-40ad-9065-69d79efc4e0a",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "88ed271b-459c-4ac5-9940-c0faaa69fd4f",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "b374c2f4-3f1d-4216-8cda-266938f67a4a",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "63e11173-9688-4cbd-8d06-2b0268776fe8",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2fbe1087-d144-4d1e-93b4-c78cbf52270c",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "feade970-e76a-46c4-aa9b-66b158b2ccad",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1a758e76-c415-425f-8f8a-eb3f4b2c02ee",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "23905f51-6bd1-48d9-b5e0-cf53b02a95f8",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f6538128-86a6-4caf-942f-31db63f5bcc3",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "8ae95247-570e-4dea-9cf8-97ceb49a65a0",
                        "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 12,
                    "totalPasses": 12,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 221
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "4c36036f-b4ee-4d57-befa-490ced4a7b77",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "team name change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bf2778bf-f630-406f-a50b-ed499dab71eb",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d24e5f40-b503-4e13-9b7b-854313a175dc",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2e76c299-1ce7-470c-bb90-9dae8d03193d",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "36363f8f-5186-45a0-8afa-31084b26ff98",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "74206c12-5b7d-4904-ba72-d63c55a7d630",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7a43544a-2e9c-4b0d-8512-78c0927e3297",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fe1a2cfd-225b-44e3-8a42-4fbf24f9b897",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "16ff01a0-fcce-4b42-af13-6ae1303e300a",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bf2778bf-f630-406f-a50b-ed499dab71eb",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d24e5f40-b503-4e13-9b7b-854313a175dc",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2e76c299-1ce7-470c-bb90-9dae8d03193d",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "36363f8f-5186-45a0-8afa-31084b26ff98",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "74206c12-5b7d-4904-ba72-d63c55a7d630",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7a43544a-2e9c-4b0d-8512-78c0927e3297",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fe1a2cfd-225b-44e3-8a42-4fbf24f9b897",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "16ff01a0-fcce-4b42-af13-6ae1303e300a",
                    "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 94
              },
              {
                "title": "team leader change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a0f92751-5e28-4a49-9e66-62d2708ab149",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e4fa9706-734b-4291-b63c-6e8f057aaadc",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b370becf-a1b1-45b5-be71-f623cad8448f",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b9882665-8f5d-414c-8d6d-6979b07d48ad",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6f5af460-a623-4e9d-a035-41d0ae662e61",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cbdb9a44-8527-492f-b81e-ca90a1e45801",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "69ccbc4a-338d-42a2-a9d0-1a7c031ba126",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a0f92751-5e28-4a49-9e66-62d2708ab149",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e4fa9706-734b-4291-b63c-6e8f057aaadc",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b370becf-a1b1-45b5-be71-f623cad8448f",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b9882665-8f5d-414c-8d6d-6979b07d48ad",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6f5af460-a623-4e9d-a035-41d0ae662e61",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cbdb9a44-8527-492f-b81e-ca90a1e45801",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "69ccbc4a-338d-42a2-a9d0-1a7c031ba126",
                    "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 228
              },
              {
                "title": "settings update",
                "suites": [],
                "tests": [
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host settings update should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "510f80e5-a4fb-4312-a253-46baf8f106a7",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host settings update should not allow it when not the host",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dd45674f-bacf-4ccc-b04d-af1164c1adc4",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host settings update should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "931a48a9-a8a3-4d94-a660-22261189274c",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name",
                    "fullTitle": "host settings update should update the session name",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "634ac348-1f8f-446f-9fe5-7edb9ee65c76",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the max contestants",
                    "fullTitle": "host settings update should update the max contestants",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "608fe6a7-f038-43f7-ab36-ba30e4644256",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the max teams",
                    "fullTitle": "host settings update should update the max teams",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "64084d77-f06b-49e9-8e9b-9c003c50a2f8",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the team size",
                    "fullTitle": "host settings update should update the team size",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "01e9bfcf-e098-4d60-ae42-09edf5fb2fb6",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name, max teams and team size",
                    "fullTitle": "host settings update should update the session name, max teams and team size",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6095ccf9-db70-4134-9c22-ebbadbaff757",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name and max contestants",
                    "fullTitle": "host settings update should update the session name and max contestants",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "688d17e4-b6d4-4a41-9ef8-f5deeb3130f2",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host settings update should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "510f80e5-a4fb-4312-a253-46baf8f106a7",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host settings update should not allow it when not the host",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dd45674f-bacf-4ccc-b04d-af1164c1adc4",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host settings update should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "931a48a9-a8a3-4d94-a660-22261189274c",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name",
                    "fullTitle": "host settings update should update the session name",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "634ac348-1f8f-446f-9fe5-7edb9ee65c76",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the max contestants",
                    "fullTitle": "host settings update should update the max contestants",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "608fe6a7-f038-43f7-ab36-ba30e4644256",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the max teams",
                    "fullTitle": "host settings update should update the max teams",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "64084d77-f06b-49e9-8e9b-9c003c50a2f8",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the team size",
                    "fullTitle": "host settings update should update the team size",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "01e9bfcf-e098-4d60-ae42-09edf5fb2fb6",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name, max teams and team size",
                    "fullTitle": "host settings update should update the session name, max teams and team size",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6095ccf9-db70-4134-9c22-ebbadbaff757",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name and max contestants",
                    "fullTitle": "host settings update should update the session name and max contestants",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "688d17e4-b6d4-4a41-9ef8-f5deeb3130f2",
                    "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 127
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e9ab1e06-abf2-4071-8728-452bacec10bb",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "abaf8dd7-ea16-4409-b007-e775c13af76a",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "337cdc66-99d3-4ac7-b2db-27a70ac61759",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "23f15d5f-0939-4379-b94d-6eed7774954d",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e9ab1e06-abf2-4071-8728-452bacec10bb",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "abaf8dd7-ea16-4409-b007-e775c13af76a",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "337cdc66-99d3-4ac7-b2db-27a70ac61759",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "23f15d5f-0939-4379-b94d-6eed7774954d",
                    "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 61
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "37267bc0-b075-4dd2-9d6d-41f4527b53bf",
                    "parentUUID": "bdce767c-bb65-461c-b97e-aec1fdbcb6c6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "bdce767c-bb65-461c-b97e-aec1fdbcb6c6",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "37267bc0-b075-4dd2-9d6d-41f4527b53bf",
                    "parentUUID": "bdce767c-bb65-461c-b97e-aec1fdbcb6c6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
            "uuid": "bec32104-0eaf-4e21-baf0-65f87215e746",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
        "uuid": "3bcd7ba9-4165-41d5-8fc6-7b4eda3cbcf8",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "observer",
            "suites": [
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ac90434b-f7bc-4e21-a881-5862de83fc17",
                    "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e26fc70f-4668-4fa6-ba30-e1566d6810bc",
                    "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fc95206e-ff37-4467-9acd-5497400e5f08",
                    "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "36b53b81-d952-44fd-97bb-386bdeee369e",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ac90434b-f7bc-4e21-a881-5862de83fc17",
                    "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e26fc70f-4668-4fa6-ba30-e1566d6810bc",
                    "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fc95206e-ff37-4467-9acd-5497400e5f08",
                    "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 57
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e112aecc-9fe3-4ed6-9138-7f6d9d69bfc0",
                    "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "48cff24d-9c91-4f65-96f9-4ee5cc19d33d",
                    "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f379b0d0-eca9-4ab7-9e81-fc8d7165da24",
                    "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "e27756a7-5ecd-4830-acd0-5c353a958894",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e112aecc-9fe3-4ed6-9138-7f6d9d69bfc0",
                    "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "48cff24d-9c91-4f65-96f9-4ee5cc19d33d",
                    "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f379b0d0-eca9-4ab7-9e81-fc8d7165da24",
                    "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 73
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
            "uuid": "0e946c29-aca7-4044-a276-0f8a855b4666",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
        "uuid": "642f81b7-d728-481a-b79e-9dc6509cd8b0",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0ea7fb27-8317-40c3-b66e-28064b940250",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 118,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3dffb3f3-beb4-4115-9a2d-5985b0cc8426",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "ce95c6ef-97de-44df-be25-aa9a817f7e72",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a890b5c2-4ecd-4366-ada2-558343c26251",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "e33bf47a-639d-4807-b0c4-c771f04bec3d",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "90b46358-091e-4343-90af-b625276c3d3a",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7a168989-ec76-4a50-b26a-1a334260cd00",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "53f59b69-3909-41cc-9ef2-e7ff584b419f",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "90aa2d7e-0cef-4639-a498-7727c0b98a4c",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "03e6b965-ab8e-4bbc-9ac3-160f8e555690",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "02be975d-6e1e-4035-9bdf-764f6b46dc6a",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "39c3eb45-62e8-4afa-98fa-17ad6662d345",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "492d3702-df41-4e4c-ba53-0669b715029c",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "127b03b0-b236-464f-b96d-a63348900409",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5df8f229-d07e-49ec-8a85-a4b06af1af13",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2e15247f-b71e-4e96-824a-9825fdeb8b01",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9581d7f8-35b3-4fee-96df-42708e52db2f",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a85eca45-4453-4032-a110-3c207944611b",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9c2115e3-6ea6-4a7b-a26a-84baa861f5ea",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6a707d30-b9b2-4111-b3ae-95dd7f12e11d",
      "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bb0bb333-0196-4dba-a4b5-0b1b49c817c3",
      "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ed273b9a-e58c-44e7-b58a-e86c6c236014",
      "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1c7a7813-c086-4756-bde3-0895415a1355",
      "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 126,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c3fa28ed-cc5c-470a-bea1-9fe197bd5026",
      "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "85e30d03-2c26-49ac-97eb-9fed20101225",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4ff91fba-2711-4162-bf04-e3fa4eccbeff",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1a88c37d-5596-4797-96e6-83d6cb15e24a",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "59d67b56-5a2c-4a44-93da-b5759fa22fcf",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d284c00b-cf43-4709-a783-bc94bdc4c1a9",
      "parentUUID": "bf152556-835e-4d08-aeac-b3cd3a6712c7",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2ac412d8-cf47-4d4c-93b9-e80f3030fe96",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "77fd4f58-b771-48ad-9b9b-d80d35a0c302",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "51807092-644c-43c4-a9b1-7d3d0a62d9b3",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "daf6ad59-3729-4b7c-9162-c84ef406777b",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "053b815d-ab1f-443a-81b0-9f6b3829c4f8",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "dd88b9f5-bb9f-402c-a1b5-b98f64dc2c4f",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "30203a9e-7b86-4eaf-b2e5-d11f382377c6",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "705857dc-77b3-4427-9e09-cf59dfcb266d",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ff872500-37af-4f44-a857-b0d99cdda603",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8ab66339-9488-4d97-8564-c8245fa5a9d9",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ec240bc6-0710-49b7-a0cb-3706d95e4bd5",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0b008cbe-e229-4c26-92c2-fbe2f13bd2d5",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "913746c8-8968-470e-ba71-e3026c52f68f",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is empty",
      "fullTitle": "team name change request should not allow it when team name is empty",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d34e733d-6eec-42b7-8d32-e4c24db1af0b",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6b4c3a33-7bf8-488e-bb30-0e292bc7dd18",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4c35d77c-c256-479d-a657-1b16b82f7a15",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1e86347d-5fe1-411d-85ef-9b2fde9ff9f6",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b3fec737-e299-4cc2-89ea-7871ddbd2ed1",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "abdb99cf-0f4a-4a77-be49-6aa5582d41fb",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5732946d-9030-4893-ba03-2ce4cf0c5805",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "02e22fbd-746b-4a28-88a0-02e3f3400f45",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d0762606-8f0e-44f4-b8b3-9b837fdac048",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8c581a0b-be00-4c88-a48a-7275a922dbb8",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d39b22cd-a0c6-4601-a7a2-e5ad2b75da96",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e94ad543-e6df-4d67-8d9c-44b5e04ff223",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0ad2023a-ca61-45b1-95e3-28b63046c719",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0eb06b85-9b29-4147-b6f7-100c470b6696",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "ac40a5cc-33cf-44c0-9d82-494b688d577f",
      "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "927895e7-5c7b-4c1c-94e4-53e86c9833ba",
      "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "8a26cf6e-b966-4874-a2e1-bf555c1ef624",
      "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "045142b1-c40b-44bc-af5c-8ddd82d375e8",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "55dc4f43-92a1-444a-82b6-3bc1d50380ff",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "286770ca-bcf3-4087-82ec-53de987e9ebd",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f48a6ba7-7432-4b16-8ddb-3f0a4dafe7db",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "88b4cd7a-1f69-473a-a7c5-842457bd6142",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "05f3c768-3982-422b-ab37-342f02b91109",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5f2bc1a3-a574-444e-b38e-d6db5cacc70d",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "41e42a04-dff6-4738-984b-ddecaea6fa6d",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2d279c0f-7277-4e3a-b510-a61820b7c2d2",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ddddd090-c142-4c86-beb6-c43b70920e56",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ef5df26c-30bc-4490-89bd-b80ff02341c4",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f8839b82-c49c-4752-9e0b-8820d5e1be0e",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "00411116-1726-4ece-81fe-9b925cedc165",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9e04b40a-ff51-446a-83b5-d49a5100c115",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "cb4d4dea-8170-4c85-b553-5c19247e250c",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ae8bab15-9a5f-4a5d-aed3-b501f4caee0f",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5b2ec95f-68e7-4682-b4cd-efe7b66f2ad9",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "acde24a0-33db-4f62-abeb-dc9bdbc2ac4b",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b3b5842c-af7a-46a5-aafd-68b1f114106e",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7134298a-058f-4c85-a1c7-c9a2659b4edd",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7f7246a2-1266-4f4e-a8e4-831e32f6da94",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f5debfc6-bfd0-41fc-94b3-a0fcdcb79a18",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d9b0b821-e568-41da-9392-7438cc1fbdcc",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "9a0ee1ce-2dfc-49e2-a616-f90edcebbd0e",
      "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ae44d062-13a3-478d-98ef-b4ac96c296dd",
      "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ef777006-2582-492f-a7be-d9f8c8e84bab",
      "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "31770f05-f61a-42e0-9f0d-db62c2df591a",
      "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "dbccb84c-406c-4289-855f-386aa8d3c7e6",
      "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "8b7ba078-7c83-4f0d-827d-2081247c1572",
      "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "eb99e4a7-36ce-42d8-b04c-ba79a5e093ba",
      "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b9515c40-73bb-4f19-854a-a97489a99be9",
      "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ddc7c968-62af-4c85-a7f9-c6bd7d3a9306",
      "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "91632cc8-378f-4839-b97a-90ce9ac65557",
      "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "33448d22-97a1-4aa7-b731-2a312a536384",
      "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "cca3666f-4ac9-4227-968e-b3ccd0d7bd88",
      "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "5ac94ebd-69c4-4c1e-8c85-b90bcd645b35",
      "parentUUID": "59b42d25-2499-458a-ba73-68c479f76ea1",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "30e92393-7a45-4b11-8f6b-e315cc509593",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "193abebc-7e5b-4b46-b74a-db6ed6de6e7f",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "19d7327c-298b-4533-bf07-092506e6016a",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "fb4899c9-b2b8-4e88-9c70-e509d03709aa",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "fbe09177-a768-4386-99c1-a836cc0f0438",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "020dc2ad-d21f-4856-a7d6-9a089749a256",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6d7a776a-5db2-4e46-9810-d67d17337d4f",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9f3dc631-33bb-4f42-97ef-7871f3c8d401",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4c64a4ca-89ac-4d3b-9087-4a0b9dbc7864",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f627e9c9-fa0c-4db0-9067-f2668f4b640c",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4b7d82c1-589f-495a-93c6-c0da3e6a28c1",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "32b14dcf-6846-4870-84c5-04decd13c37d",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "86512df6-9630-44ec-8b89-b6329cdfa99f",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a359a886-deff-4a20-90ae-12471007c188",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ae1b9b82-d066-49dd-9722-2b4b060a26d0",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "settings update should not allow it when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f69a6672-ea5c-4213-9756-be168f960839",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "settings update should not allow it when not the host",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5bf19908-8bcd-43f3-bd70-3bd918740415",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "settings update should not allow it when session does not exist",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "48a159c9-5ab3-4548-b889-abb99dd2b15c",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the session name",
      "fullTitle": "settings update should update the session name",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a8302935-a3f7-472c-be69-6a98f66c6f68",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the max contestants",
      "fullTitle": "settings update should update the max contestants",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6ff6ef2e-fbe6-44b4-a503-48fcf44216e2",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the max teams",
      "fullTitle": "settings update should update the max teams",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "474a68d1-9e45-4fee-9477-7b6e20b9c1ad",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the team size",
      "fullTitle": "settings update should update the team size",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c80b2c01-bd83-45a9-b734-3ed4ccf9a95a",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the session name, max teams and team size",
      "fullTitle": "settings update should update the session name, max teams and team size",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "06955f06-e840-4a4e-9388-68ff562a22bf",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the session name and max contestants",
      "fullTitle": "settings update should update the session name and max contestants",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4e68ab34-c927-449b-a194-cc56edf1b7bc",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a950560-a7ab-4712-8527-5ad24ee0e114",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f0acb3e9-d204-4217-bfb8-bf9f689656c2",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4867ea3b-511a-4e66-8743-cb0e458784e1",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "96867cc2-4074-4698-8642-e284d1626b14",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1f30f112-7b00-4f11-9010-da5469eedadf",
      "parentUUID": "bdce767c-bb65-461c-b97e-aec1fdbcb6c6",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "393632fc-5f5e-49f1-9b24-51b77750c958",
      "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c50cc606-e9d5-4133-a688-fba2b2f00b13",
      "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f9d9fb43-686f-413c-a66b-24fd10c6a812",
      "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "27178a07-f55b-49a0-b7b5-46895c754c46",
      "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ab02aa93-5434-4f12-b589-60abd1d85db5",
      "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6f067b69-e8aa-4ccd-b2da-62fa20e4e1e0",
      "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 118,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a7327882-983c-4655-b44f-2b4c34a62477",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "8b3f347e-6998-4e67-ac8a-96b906994215",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ab9cb777-e8f0-4322-bdf0-cc763fc77946",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "08716c8f-955c-46c0-939f-f883efd14f26",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "bf03cc9a-2b61-4923-9950-f1d8d27fe2f8",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b167a305-a227-46be-97f0-af49323113e8",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3451c6a2-1c8d-459e-8372-ff0081cfa368",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7c461748-5be4-4f04-ab68-1962ae636e68",
      "parentUUID": "987e6940-3f9b-4a5a-ac63-fdfa1f600c19",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cceaf175-7686-4b61-8921-d1bf5fb0fcf4",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "1b89150f-4c3c-4883-8238-071fa0f97529",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "890fcbb4-d148-430d-8461-df6e2be363e0",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "d17539c8-2f05-4756-bd6b-88c022677875",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "0d91ec6f-5203-4132-bf43-bfa8589213ef",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cbaea25e-6540-486b-b8b3-f0da9fc855fc",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "38911770-e433-4147-8325-426759de8605",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1c9f1ac6-168b-4fce-bccf-4df4fd0a8926",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cca0d82d-a090-471b-8eb2-6b35a94b59fc",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9940715c-46c4-4a89-b8f9-2503dd9f3804",
      "parentUUID": "20e797f6-9bfb-492f-8170-95029dd06109",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "984ac9d1-4d2e-4b82-8d9a-2ff03fb46013",
      "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3cf0d13a-e8ba-4305-9bcd-77ede5610081",
      "parentUUID": "521b54e6-3750-4440-94c1-d4580867036f",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "171800ef-a596-4dfd-b9f3-8f88a8488e82",
      "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "80c9bcba-3603-45fa-82d4-ae26c8561a4e",
      "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 126,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5dde051a-0006-4925-8535-327caaf7dbe6",
      "parentUUID": "7f285b66-cd09-4f8d-9f5f-361527f49242",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e7e00e35-ab23-47b9-b73a-f18f36a7259f",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "76ebec98-38fc-4a56-8bc4-ae2ab9ac185c",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cac4840d-2bd4-4cec-a072-e07643d27bb3",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "03f75087-5825-4aaa-badd-8e8b0d29eaa1",
      "parentUUID": "63ec090d-5eac-43f9-9787-57b1f3542a39",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "522cb3a8-ba49-4a38-8669-7179f7240318",
      "parentUUID": "bf152556-835e-4d08-aeac-b3cd3a6712c7",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "911d22d3-74f5-4c17-bb77-0205d9b51370",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c159a155-7223-47d6-9fb1-8f4ae265d5cf",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "63175764-4e9d-468b-8697-647d54763525",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "36389bbb-9ea1-403f-a348-0bd3f5ae4bdf",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3482ff4a-db15-4edd-9399-578f69470e60",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "500be11b-e0fd-4e9b-baaf-4e5aa3d69507",
      "parentUUID": "954a0e8a-2a8d-419e-bcfb-d1fffb208d15",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "65c554d2-023c-4b32-9817-9921c1612d1e",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bcaed837-19f2-47f7-a928-3124e0e8e125",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f76e224b-a6f9-409c-a05a-31c6acdf2a22",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9aebfe4d-7e55-4c06-a8d8-e2abdedf97b4",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fd7e9c3d-e5ae-4a36-b425-a6f562d04181",
      "parentUUID": "e5aa77eb-e4c3-4231-9dfc-19c09062dc7a",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "aef52034-a73c-4c7b-bebd-cd50cd150cdf",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e91e8ff4-7849-477b-8a0d-b6930629131e",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is empty",
      "fullTitle": "team name change request should not allow it when team name is empty",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "de5374b9-d002-436d-948c-cec52e7f17ad",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ad231bfb-b278-4d1d-98f3-0a63c7388205",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9e913a83-2df4-40b3-84b1-22972303b02a",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fd4c0b0e-39b6-495f-9f7a-41d72388bbce",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2d2b6b5f-df57-40d2-8e2a-4e942969b45a",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6406f8c0-9b02-4a4e-9b71-d73f004fd68d",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ca527085-d9d5-41c1-9928-2dfb694e0ca1",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "46a40cb1-ff98-41d7-83b1-43e6a727a82e",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "89d6f53a-5437-4c4e-8c6f-a67a01aa1f0d",
      "parentUUID": "29711bb6-14a2-444e-8caf-86126de8f418",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "29bc4d8c-d547-43f7-a532-b304d90e313f",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cb1af003-f7c8-4833-aa6b-45f938ab29ba",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ed94e128-03fc-4b9d-ac8a-e4e8587a9234",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7ee61e41-649c-4b69-9dc4-1fa92d7e1928",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8feb4f31-cdbf-4b0a-a53a-c092cc74307e",
      "parentUUID": "cc3dea67-2b1e-4932-9d3c-3d8d85e4eaf1",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "980ebf67-4416-4631-b732-ee4e882bd8c9",
      "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "3c18d585-be1b-405f-bdc1-ee5a8ed1364a",
      "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "463db80c-4c40-4d43-a708-3f055188d85a",
      "parentUUID": "64ebcd15-7d24-4c14-a9b5-29367d16e465",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "841e4781-47a8-4f62-91d0-919f11bba472",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "ba12f8eb-e132-4847-86df-8b8aea56caef",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8212a8ed-c987-4a11-b35e-0b02fc1d5f71",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b127d78c-03b1-4d4c-a491-2dcbb970a753",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8b094dae-cebb-4ff1-8e6d-53526ae8bccc",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "dba1bf17-5912-4668-ae53-04704c70daac",
      "parentUUID": "7c21a97b-fc33-4075-b126-0cff7fcfd597",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "39d8eab8-4466-419b-b200-4c87ff431e7a",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "403fe0af-4345-4c9a-b6e3-5e86cf8167de",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3cda535e-3026-4603-8613-bbde21cd84da",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9063f3d5-c9b6-402f-a4d0-ed54b13d179d",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "be566cad-b7b2-4052-a762-4b59c97dc6e6",
      "parentUUID": "d9f92852-3c05-406a-9431-36c813e7f245",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ac11154a-91ec-48f5-9696-5e5504126ba0",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "79ef59d2-ed89-462c-af7a-6fa6eb6bafc2",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "34698b53-1faf-4e95-bf33-bdc27bbf5863",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "ff10ddd7-3175-42ae-8ba5-3250b39b55ab",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "0c2e6161-6292-4091-b51d-c410ea353c81",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d225c6a0-b295-4f67-aa62-b31739d75686",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6c48decf-9503-44ca-8745-37eda49203d2",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a37dfda8-1696-49f0-a758-4190d7758ae7",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5c2c4d32-75c6-4ec8-a9a8-8f9916abf168",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "eff1e4de-777f-41e7-9066-9bf88befa545",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ffd5e669-3514-439b-8598-27e81ae9ca13",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "77f71639-a7c4-47d5-a809-473955284adc",
      "parentUUID": "2c9c542f-9887-4e45-92f5-a53e2da96717",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "36ac4d2b-1715-4c2b-9caf-d872f1bbdaaa",
      "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "94a317e1-2035-4998-b6af-db08367894c2",
      "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ef50a941-4c11-4ed1-8138-705e0542232c",
      "parentUUID": "6de77308-3c3b-4016-83f2-7a321264fd5d",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "30c01cb9-d023-496f-a70b-a1c200a321be",
      "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "32cf5c84-a951-4eaa-9a3f-e819ac11ad2f",
      "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b0afb85d-cf94-4601-8fb7-78d567ac1419",
      "parentUUID": "a30a415d-73e0-4670-bac8-3517558af539",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "9e8c6628-9dcf-47a9-9e30-f234760615c0",
      "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "89dda7e2-2c9b-4fef-bf84-bb1944eb8993",
      "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "906df545-a80c-4573-b226-d56422778680",
      "parentUUID": "7bb15241-3798-4971-b80c-de855f5445c9",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "a3640b98-f7df-49d8-8dc7-a85bbe824179",
      "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "294952b4-debe-4212-8281-8c5d8e86c372",
      "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "956a7200-f464-43be-a863-05f2509faf55",
      "parentUUID": "e834e9dc-2875-4ff2-b43b-606309288230",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "645c2391-1ffb-475b-b7e1-09d862b454e5",
      "parentUUID": "59b42d25-2499-458a-ba73-68c479f76ea1",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e7cdea63-b5bd-4a89-968a-5fc379ba95f3",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9035df7b-d793-427f-a1b8-890183008497",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "79934d6a-828b-4093-a409-438557ff39c9",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "41629a0b-c0d0-4bb3-8ca8-619f90d10538",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "07ad0e94-d79e-4a3a-9f80-74476c8b3ccc",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bdc6c094-a8bb-4dea-af21-8bf28685bde3",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ae818488-5df9-44ec-99e1-4092beff414a",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f9599fa4-0b98-4f08-820c-b4cc515ea3ba",
      "parentUUID": "5a4769d3-ae99-4341-bf70-eabf521afbb9",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2ac473f9-dee9-4339-b87d-79c0dfeb2dff",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d75b10d8-fb19-45f8-bec5-a1f7e5ac89bc",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "aaa37365-02ed-470e-8f97-e9f098091743",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d6290fbb-baf8-404c-83d9-703c9bbc4a88",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "104ead07-8ec0-4ac6-89f8-adbbc6e4d307",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4aca025e-5526-4d2f-9ec1-cdf4cb3a6828",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8fb3c474-738a-4d71-a130-99a75ebb35fe",
      "parentUUID": "acfa373d-3617-44e6-bc80-b21f5a62fe63",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "settings update should not allow it when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d40ac91f-aa07-4284-a925-a54ebe61cfdc",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "settings update should not allow it when not the host",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e3e9b864-c4c8-4538-89f1-6459cda96897",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "settings update should not allow it when session does not exist",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0b6705d9-8262-4015-be74-f1f25cd9bf9e",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the session name",
      "fullTitle": "settings update should update the session name",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "515f7af2-0df3-4e39-91f2-319662f92752",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the max contestants",
      "fullTitle": "settings update should update the max contestants",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "36fce96a-852d-4a95-bdee-bb5bd267816d",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the max teams",
      "fullTitle": "settings update should update the max teams",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "24d87de4-288f-4bfb-9949-b1a387b5477d",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the team size",
      "fullTitle": "settings update should update the team size",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9fbd4748-3db6-480d-8bd1-d148402dc562",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the session name, max teams and team size",
      "fullTitle": "settings update should update the session name, max teams and team size",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "09dcc91c-b67b-4282-b87a-47943bd57bd6",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should update the session name and max contestants",
      "fullTitle": "settings update should update the session name and max contestants",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3e73a5f0-6f33-4cf6-a6ce-03f909c586c0",
      "parentUUID": "1b3711d7-2a8f-424c-b338-df5f114ff21e",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bfcf6763-fcc5-49b4-9af5-a103afca46c2",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9e305b3a-0bff-4203-8e65-6b2fec97f416",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7db1b6c7-d71f-427f-9bcd-4fc4555a0c8c",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d58fd7f5-828e-4941-9bd4-5040fe66c62c",
      "parentUUID": "d1fc0fa7-1054-4d88-8b38-0525954f43b2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1b1bf9b4-5547-40c9-b449-7fb54437713c",
      "parentUUID": "bdce767c-bb65-461c-b97e-aec1fdbcb6c6",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "d1d581d3-3c91-4d8e-a937-0168d29e86c2",
      "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4729e67f-1515-4969-943b-6db47934ae93",
      "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6617c9ec-f194-4f21-972b-e9e62a73e0d6",
      "parentUUID": "36b53b81-d952-44fd-97bb-386bdeee369e",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "36b51b7d-31c6-42c1-a12b-e0cf846e7382",
      "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c2acc52c-bbea-4c7a-b00f-e0dda8709da3",
      "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8d3ffe4a-5df3-48c1-bcef-a15d3855c757",
      "parentUUID": "e27756a7-5ecd-4830-acd0-5c353a958894",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}