{
  "reportTitle": "buzzer.click",
  "stats": {
    "suites": 37,
    "tests": 129,
    "passes": 129,
    "pending": 0,
    "failures": 0,
    "start": "2016-09-30T01:33:33.130Z",
    "end": "2016-09-30T01:33:37.860Z",
    "duration": 4730,
    "testsRegistered": 129,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "contestant",
            "suites": [
              {
                "title": "join",
                "suites": [
                  {
                    "title": "as individual",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 210,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1545dde9-c2e2-4ec9-a25a-06f298e1baf4",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 47,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "1afd5eab-4101-489a-a42f-02fccef7cc70",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ced1240f-a738-40f0-a55a-9fd2cc959781",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "06b37716-678e-4fa3-9640-a9901ede1d2d",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "70cdfb65-1ea5-447a-9a3e-71d3ffdc1914",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 35,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a1dab795-7558-4d17-9e33-b141ca23a2d2",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "78416009-aec9-4932-84b9-ab16bf8811fd",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9a1f26b7-2ad5-4cde-ba97-c4f4a86fe14d",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 210,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1545dde9-c2e2-4ec9-a25a-06f298e1baf4",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 47,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "1afd5eab-4101-489a-a42f-02fccef7cc70",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ced1240f-a738-40f0-a55a-9fd2cc959781",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "06b37716-678e-4fa3-9640-a9901ede1d2d",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "70cdfb65-1ea5-447a-9a3e-71d3ffdc1914",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 35,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a1dab795-7558-4d17-9e33-b141ca23a2d2",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "78416009-aec9-4932-84b9-ab16bf8811fd",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9a1f26b7-2ad5-4cde-ba97-c4f4a86fe14d",
                        "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 8,
                    "totalPasses": 8,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 551
                  },
                  {
                    "title": "with teams",
                    "suites": [
                      {
                        "title": "when team leader selection method is RANDOM",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "d40396c6-1ba0-488b-834a-2d4e39d48311",
                            "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "1621c564-4c13-4800-abfc-5999c114d691",
                            "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "f3855f72-4453-4057-a520-d6fe7d581b14",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "d40396c6-1ba0-488b-834a-2d4e39d48311",
                            "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "1621c564-4c13-4800-abfc-5999c114d691",
                            "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 2,
                        "totalPasses": 2,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 73
                      },
                      {
                        "title": "when team selection method is PLAYER_CHOICE",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 28,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "6e298d25-0c15-45f7-af88-55a4bc588c62",
                            "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "b04c4004-8ab8-4d3b-b47a-df608c06971d",
                            "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 131,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "a3d9b7a0-b1a5-4e07-8fdb-9aaa98676395",
                            "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "b438f457-75f9-4be0-aa56-ac392d493729",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 28,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "6e298d25-0c15-45f7-af88-55a4bc588c62",
                            "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "b04c4004-8ab8-4d3b-b47a-df608c06971d",
                            "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 131,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "a3d9b7a0-b1a5-4e07-8fdb-9aaa98676395",
                            "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 189
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fccea381-2d55-4309-8c1f-39a8127559e2",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "25135448-5c52-40fb-8864-83870d7dd064",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "0482fd73-619a-4e33-aae5-52ba5b65e278",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 38,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "971dd1c7-f385-4257-b23b-3e0614c6daa8",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "25afb38c-7f6b-46f1-8511-3b32539dd18a",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fcf916fc-4e8b-495e-876e-590479a89de6",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d46b22dd-abc3-453b-bd19-744fb50620d2",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "81d1bc3b-634c-4e99-b580-e960238eeb8a",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9d096ba8-e724-451c-b589-4ac40e6ef65b",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fb965d0b-ccf2-4f23-96d4-6c22968257e7",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fccea381-2d55-4309-8c1f-39a8127559e2",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "25135448-5c52-40fb-8864-83870d7dd064",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "0482fd73-619a-4e33-aae5-52ba5b65e278",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 38,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "971dd1c7-f385-4257-b23b-3e0614c6daa8",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "25afb38c-7f6b-46f1-8511-3b32539dd18a",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fcf916fc-4e8b-495e-876e-590479a89de6",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d46b22dd-abc3-453b-bd19-744fb50620d2",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "81d1bc3b-634c-4e99-b580-e960238eeb8a",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9d096ba8-e724-451c-b589-4ac40e6ef65b",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fb965d0b-ccf2-4f23-96d4-6c22968257e7",
                        "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 10,
                    "totalPasses": 10,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 394
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "cb06de25-190e-4aed-8dde-a3713349a163",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "285e0b81-e476-4567-b57c-49d5746d95ba",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "92a5f12a-8544-447f-be90-f63f8190cb15",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "442ba255-2d5c-462e-8357-60e8411e0891",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f179499f-2c8c-44a8-a7fa-849d932b12dc",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "ba214ead-98dc-4b93-af45-36470e83fbda",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "285e0b81-e476-4567-b57c-49d5746d95ba",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "92a5f12a-8544-447f-be90-f63f8190cb15",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "442ba255-2d5c-462e-8357-60e8411e0891",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f179499f-2c8c-44a8-a7fa-849d932b12dc",
                    "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 186
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ff201d23-a927-4ddc-8d0e-d0cec9895a3f",
                    "parentUUID": "3d00238a-b5ba-4cfa-a5e9-0778ec6c915c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "3d00238a-b5ba-4cfa-a5e9-0778ec6c915c",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ff201d23-a927-4ddc-8d0e-d0cec9895a3f",
                    "parentUUID": "3d00238a-b5ba-4cfa-a5e9-0778ec6c915c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 30
              },
              {
                "title": "team leader inquiry response",
                "suites": [],
                "tests": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "367857b5-32cd-462d-8380-4b3983a2e7b4",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0e96f324-4123-461f-a30f-e2dc2366e63d",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ca885f3d-eecf-4a8a-892c-58b38da8399c",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6cbf7a98-5c61-4491-8453-39082d65bcdf",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d4a9cb88-883e-4d41-bb1e-68c6dabcfae7",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "61a8af95-e5e3-4eac-8ef7-9946f873ef89",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "367857b5-32cd-462d-8380-4b3983a2e7b4",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0e96f324-4123-461f-a30f-e2dc2366e63d",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ca885f3d-eecf-4a8a-892c-58b38da8399c",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6cbf7a98-5c61-4491-8453-39082d65bcdf",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d4a9cb88-883e-4d41-bb1e-68c6dabcfae7",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "61a8af95-e5e3-4eac-8ef7-9946f873ef89",
                    "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 174
              },
              {
                "title": "buzzerPress",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "88e89fdf-c843-4f59-bfdd-bfefc2e6dff3",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0c77ee48-3938-4f7e-8ce2-35b4849482cc",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d7e994f0-3784-4fd0-b276-702a1497ddd7",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7c2a8fcd-301e-4d52-bc34-19f1cabf4bd2",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f911db6a-3d99-4be3-8cd1-5972197ffa8f",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "9af2fa40-d7e1-4796-8189-5dff39712786",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "88e89fdf-c843-4f59-bfdd-bfefc2e6dff3",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0c77ee48-3938-4f7e-8ce2-35b4849482cc",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d7e994f0-3784-4fd0-b276-702a1497ddd7",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7c2a8fcd-301e-4d52-bc34-19f1cabf4bd2",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f911db6a-3d99-4be3-8cd1-5972197ffa8f",
                    "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 152
              },
              {
                "title": "team name change request",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e63ec852-3370-47d3-836d-671dc0b94d54",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "78be06b8-9c32-49c0-9d8f-2016fef1e8dd",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is empty",
                    "fullTitle": "contestant team name change request should not allow it when team name is empty",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c225fc47-9351-4829-a4d3-382a003f4951",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "feef00ad-6ba2-4578-9ed0-41e7697b383d",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e8495e77-cdda-4e67-97f5-a3229979e669",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "520c9e7b-945e-4849-8326-e1770bca7a18",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0a76c913-f995-4b9f-85c2-6d15231087ac",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b2b710e0-4146-4caa-93da-315e88172f6c",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6a056d2b-8f8b-4b2b-8e82-a34e862b1d9f",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "02121909-d00b-4560-a5ad-2e47f43c55db",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93614037-dcdd-49d3-a774-f4979aef3a0a",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e63ec852-3370-47d3-836d-671dc0b94d54",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "78be06b8-9c32-49c0-9d8f-2016fef1e8dd",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is empty",
                    "fullTitle": "contestant team name change request should not allow it when team name is empty",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c225fc47-9351-4829-a4d3-382a003f4951",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "feef00ad-6ba2-4578-9ed0-41e7697b383d",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e8495e77-cdda-4e67-97f5-a3229979e669",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "520c9e7b-945e-4849-8326-e1770bca7a18",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0a76c913-f995-4b9f-85c2-6d15231087ac",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b2b710e0-4146-4caa-93da-315e88172f6c",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6a056d2b-8f8b-4b2b-8e82-a34e862b1d9f",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "02121909-d00b-4560-a5ad-2e47f43c55db",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93614037-dcdd-49d3-a774-f4979aef3a0a",
                    "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 11,
                "totalPasses": 11,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 330
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cbce2f70-d797-4a3d-b7de-90b10863d5ad",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c91a90c7-31a8-41e2-947c-d3e2f08fe388",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d8ca5b4d-29f5-4419-af41-55e3c7e562c9",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "306cad08-21f1-41da-9a79-b5b21226a2e7",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dd25f269-d3e5-4b6c-8525-614c19714755",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cbce2f70-d797-4a3d-b7de-90b10863d5ad",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c91a90c7-31a8-41e2-947c-d3e2f08fe388",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d8ca5b4d-29f5-4419-af41-55e3c7e562c9",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "306cad08-21f1-41da-9a79-b5b21226a2e7",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dd25f269-d3e5-4b6c-8525-614c19714755",
                    "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 129
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
            "uuid": "85d7f3b1-8eaf-4041-a3a4-b1781b21e0c9",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
        "uuid": "4b8d40fc-89a0-4670-ba2b-e21a992efef8",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "host",
            "suites": [
              {
                "title": "create",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "b171ffb9-2e71-4c0e-b375-6a6e3605c5c2",
                        "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "fe4e1474-4eb8-4475-95cb-781215b7c165",
                        "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "d00a889b-bbe3-441e-b946-ebf6a3b7a64f",
                        "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "b171ffb9-2e71-4c0e-b375-6a6e3605c5c2",
                        "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "fe4e1474-4eb8-4475-95cb-781215b7c165",
                        "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "d00a889b-bbe3-441e-b946-ebf6a3b7a64f",
                        "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 37
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "ca0d853f-f383-42da-8f2e-06d2b3434988",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "307937bd-3ac7-47d4-b08f-31593edcb74e",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 34,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bd6d47c9-311f-493f-b95e-abf95e2fad79",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "376861b9-ae14-4a8e-acd6-0874812b3f50",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "eddf214e-e2b5-42c4-828e-76fc6bba464d",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bc25617a-7410-4716-9f50-bdce6910e588",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a008911c-0dd2-4557-a4e5-9d1526372092",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "7f92277e-cb70-477f-92f2-45443f929602",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "307937bd-3ac7-47d4-b08f-31593edcb74e",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 34,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bd6d47c9-311f-493f-b95e-abf95e2fad79",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "376861b9-ae14-4a8e-acd6-0874812b3f50",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "eddf214e-e2b5-42c4-828e-76fc6bba464d",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bc25617a-7410-4716-9f50-bdce6910e588",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a008911c-0dd2-4557-a4e5-9d1526372092",
                        "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 6,
                    "totalPasses": 6,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 185
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "affbcd18-8225-4469-9df8-e40e0772a9e0",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "complete",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "36bb89b2-a377-4c9c-919a-35ab0eb32b28",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "66e0fb1a-5aec-4acf-a16c-11e10ae64f66",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d683fcf1-166c-4cc2-9bd8-aaa4851e94f0",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "01e8bbb6-0272-4b0b-b059-9dc7f1c849ff",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3ecda727-4867-40c5-a8d3-77a1e6ca19d8",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "36bb89b2-a377-4c9c-919a-35ab0eb32b28",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "66e0fb1a-5aec-4acf-a16c-11e10ae64f66",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d683fcf1-166c-4cc2-9bd8-aaa4851e94f0",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "01e8bbb6-0272-4b0b-b059-9dc7f1c849ff",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3ecda727-4867-40c5-a8d3-77a1e6ca19d8",
                        "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 75
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "38d59931-992d-4c82-aa78-bcf0cca4e837",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "buzzer",
                "suites": [
                  {
                    "title": "action",
                    "suites": [
                      {
                        "title": "when accepted",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "73130efc-ef7c-4f13-8b09-42db0b88db8c",
                            "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1977038e-4cd7-4e7f-a602-2864b4017e23",
                            "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 35,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b7295b0f-1757-4439-99a0-6e5eb44b6f90",
                            "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "b2df11b7-d901-41c5-8bae-145c5f402214",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "73130efc-ef7c-4f13-8b09-42db0b88db8c",
                            "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1977038e-4cd7-4e7f-a602-2864b4017e23",
                            "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 35,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b7295b0f-1757-4439-99a0-6e5eb44b6f90",
                            "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 98
                      },
                      {
                        "title": "when rejected",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "c981f0b0-a7da-4707-93a2-6eff649cf144",
                            "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "386fa624-ba7e-4487-86dd-be01b20056d3",
                            "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "805e1643-e2b7-4a0a-8dfb-dc1a95415d35",
                            "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "c981f0b0-a7da-4707-93a2-6eff649cf144",
                            "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "386fa624-ba7e-4487-86dd-be01b20056d3",
                            "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "805e1643-e2b7-4a0a-8dfb-dc1a95415d35",
                            "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 98
                      },
                      {
                        "title": "when reset",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "7121c406-c638-4405-805a-e84ce4f19a54",
                            "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b2b1c482-f8fa-448c-b1dc-67edf96608c3",
                            "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "6a0bd6be-c378-4481-b5b1-ba04cc01bd4c",
                            "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "7121c406-c638-4405-805a-e84ce4f19a54",
                            "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b2b1c482-f8fa-448c-b1dc-67edf96608c3",
                            "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "6a0bd6be-c378-4481-b5b1-ba04cc01bd4c",
                            "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 96
                      },
                      {
                        "title": "when disabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "90f7a01e-ba80-41c4-b5e6-1bfe1d97f8cc",
                            "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "9da93100-375f-4a2e-8fee-604821c0386b",
                            "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "8ec11925-7027-4951-91c1-cb24f8cebcb7",
                            "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "90f7a01e-ba80-41c4-b5e6-1bfe1d97f8cc",
                            "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "9da93100-375f-4a2e-8fee-604821c0386b",
                            "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "8ec11925-7027-4951-91c1-cb24f8cebcb7",
                            "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 85
                      },
                      {
                        "title": "when enabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0517ce97-0425-48b9-9d50-2d0e2603564c",
                            "parentUUID": "aefb9d27-7e22-4db6-b88d-45ff43c708fe",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "aefb9d27-7e22-4db6-b88d-45ff43c708fe",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0517ce97-0425-48b9-9d50-2d0e2603564c",
                            "parentUUID": "aefb9d27-7e22-4db6-b88d-45ff43c708fe",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 1,
                        "totalPasses": 1,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 18
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 39,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3d9d89db-dfab-40ac-8a86-08b1c4073a23",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 45,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e2fc632a-a891-4f86-9016-94e088696efc",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 12,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a8324016-33b5-4082-aafc-66d63ebcc7d4",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "eecfc99a-ec35-4ecf-8930-b4cd2d698262",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "1e580ce0-465a-4101-aedb-98bacb727976",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c0575dd0-c90c-497e-928c-ef186023f642",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3b7a3cba-2698-4eae-a954-5b1bd8618a79",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "840ed273-2fa1-4021-9bf6-712e56534240",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 34,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3cdc9603-de1d-417f-bf6e-e6115519481b",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "41be2b17-e84a-4fc2-b4df-ee0e2cd25a64",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e7234d70-3a74-4808-9a38-92c5b9db203f",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5e52abc7-8815-4882-a559-78272e61ba51",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 39,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3d9d89db-dfab-40ac-8a86-08b1c4073a23",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 45,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e2fc632a-a891-4f86-9016-94e088696efc",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 12,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a8324016-33b5-4082-aafc-66d63ebcc7d4",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "eecfc99a-ec35-4ecf-8930-b4cd2d698262",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "1e580ce0-465a-4101-aedb-98bacb727976",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c0575dd0-c90c-497e-928c-ef186023f642",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3b7a3cba-2698-4eae-a954-5b1bd8618a79",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "840ed273-2fa1-4021-9bf6-712e56534240",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 34,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3cdc9603-de1d-417f-bf6e-e6115519481b",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "41be2b17-e84a-4fc2-b4df-ee0e2cd25a64",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e7234d70-3a74-4808-9a38-92c5b9db203f",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5e52abc7-8815-4882-a559-78272e61ba51",
                        "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 12,
                    "totalPasses": 12,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 305
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "09569c59-88f9-47cd-aba3-6f5f9075d673",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "team name change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8df696fe-bf01-440c-83c0-b277002f2cb3",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "670ab035-45a5-4e0c-882d-7eedd5d53480",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6ab6a2be-9791-43d5-b3c5-4a604a71b07a",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "254b4e42-9a38-441c-8b26-c878a32dc1ce",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "08d52690-dc4d-432e-ad41-74e2cb296560",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "84e161b0-05cb-4f6f-bff0-8430d3f7362a",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7de4137b-2e70-47b9-bc63-afb7517508a3",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7127d366-7ffc-4383-9438-8a6aec74074a",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8df696fe-bf01-440c-83c0-b277002f2cb3",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "670ab035-45a5-4e0c-882d-7eedd5d53480",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6ab6a2be-9791-43d5-b3c5-4a604a71b07a",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "254b4e42-9a38-441c-8b26-c878a32dc1ce",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "08d52690-dc4d-432e-ad41-74e2cb296560",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "84e161b0-05cb-4f6f-bff0-8430d3f7362a",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7de4137b-2e70-47b9-bc63-afb7517508a3",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7127d366-7ffc-4383-9438-8a6aec74074a",
                    "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 116
              },
              {
                "title": "team leader change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "50e05194-bc66-4945-94d4-259dc1f6e2a8",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "88224cd3-8420-4216-a85d-88fd5be75804",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dd97d16f-c0d5-484d-8cc8-1850ec059658",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "82d06f8d-92eb-434b-8ee8-a6a05afdc070",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "76b1ea87-b0c9-425b-8140-8b3b9c31e43e",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9e47ee4d-dd70-4edb-92a8-ebb2747271a8",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "afe87d3a-39c1-4652-905c-3d77d336a23f",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "50e05194-bc66-4945-94d4-259dc1f6e2a8",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "88224cd3-8420-4216-a85d-88fd5be75804",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dd97d16f-c0d5-484d-8cc8-1850ec059658",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "82d06f8d-92eb-434b-8ee8-a6a05afdc070",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "76b1ea87-b0c9-425b-8140-8b3b9c31e43e",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9e47ee4d-dd70-4edb-92a8-ebb2747271a8",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "afe87d3a-39c1-4652-905c-3d77d336a23f",
                    "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 311
              },
              {
                "title": "settings update",
                "suites": [],
                "tests": [
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host settings update should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5e40ba3b-5c9a-4292-889b-1311bfefff37",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host settings update should not allow it when not the host",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "176e8d62-aa58-4685-920a-e56ebfa178ac",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host settings update should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "89b3c704-ddf5-4eb5-bad1-79b2ef9a0914",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name",
                    "fullTitle": "host settings update should update the session name",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9447c053-d30b-4285-bca4-7f1da0c8e59d",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the max contestants",
                    "fullTitle": "host settings update should update the max contestants",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0fa5c067-c048-4a62-b256-f69c7ff8041c",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the max teams",
                    "fullTitle": "host settings update should update the max teams",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0fc92ef8-547d-4e20-a469-975ee4c5a677",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the team size",
                    "fullTitle": "host settings update should update the team size",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "42015ae2-bb3e-48bb-9bee-9cb04b78ecd8",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name, max teams and team size",
                    "fullTitle": "host settings update should update the session name, max teams and team size",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "46e0a56c-1028-447a-b160-cb96fce5527d",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name and max contestants",
                    "fullTitle": "host settings update should update the session name and max contestants",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "66992212-d301-4c94-9bea-11042ee26208",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host settings update should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5e40ba3b-5c9a-4292-889b-1311bfefff37",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host settings update should not allow it when not the host",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "176e8d62-aa58-4685-920a-e56ebfa178ac",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host settings update should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "89b3c704-ddf5-4eb5-bad1-79b2ef9a0914",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name",
                    "fullTitle": "host settings update should update the session name",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9447c053-d30b-4285-bca4-7f1da0c8e59d",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the max contestants",
                    "fullTitle": "host settings update should update the max contestants",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0fa5c067-c048-4a62-b256-f69c7ff8041c",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the max teams",
                    "fullTitle": "host settings update should update the max teams",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0fc92ef8-547d-4e20-a469-975ee4c5a677",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the team size",
                    "fullTitle": "host settings update should update the team size",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "42015ae2-bb3e-48bb-9bee-9cb04b78ecd8",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name, max teams and team size",
                    "fullTitle": "host settings update should update the session name, max teams and team size",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "46e0a56c-1028-447a-b160-cb96fce5527d",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name and max contestants",
                    "fullTitle": "host settings update should update the session name and max contestants",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "66992212-d301-4c94-9bea-11042ee26208",
                    "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 146
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "27cfae16-809c-41db-9047-7be64b61433f",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b84502b5-fe66-4e18-adfa-84f158cbca70",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "95b7a91f-42d4-4733-b133-2a0158b06181",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "babade74-2353-45bb-b70e-32834d8d4573",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "27cfae16-809c-41db-9047-7be64b61433f",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b84502b5-fe66-4e18-adfa-84f158cbca70",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "95b7a91f-42d4-4733-b133-2a0158b06181",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "babade74-2353-45bb-b70e-32834d8d4573",
                    "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 65
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "36c727f2-6b4a-4912-83ae-bd73a73c551a",
                    "parentUUID": "2771e6fe-9984-4a03-9e6a-c707186fdcbe",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "2771e6fe-9984-4a03-9e6a-c707186fdcbe",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "36c727f2-6b4a-4912-83ae-bd73a73c551a",
                    "parentUUID": "2771e6fe-9984-4a03-9e6a-c707186fdcbe",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 25
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
            "uuid": "c78348da-3941-421f-83b9-34d26d90c061",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
        "uuid": "991684f9-ded6-4e4f-bf4e-b83c0e144794",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "observer",
            "suites": [
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "41265968-c418-4803-800d-c578ce70e8fa",
                    "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e4ab4879-27ac-493d-962d-a68fc634dbff",
                    "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "92affa3f-7fe0-4d65-9574-bc5a22a1ce2f",
                    "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "41265968-c418-4803-800d-c578ce70e8fa",
                    "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e4ab4879-27ac-493d-962d-a68fc634dbff",
                    "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "92affa3f-7fe0-4d65-9574-bc5a22a1ce2f",
                    "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 64
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6878226c-2dd4-4771-8ab7-0bf13e4e513c",
                    "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e07b453e-4af2-4ef9-908c-3ecfedb0bb65",
                    "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ed005dcd-20d1-4e66-adab-1c79a43fa583",
                    "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "8695a318-f956-49ae-9c05-2626d2ce419e",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6878226c-2dd4-4771-8ab7-0bf13e4e513c",
                    "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e07b453e-4af2-4ef9-908c-3ecfedb0bb65",
                    "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ed005dcd-20d1-4e66-adab-1c79a43fa583",
                    "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 79
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
            "uuid": "32faa71f-b7ee-4951-ac69-27556034b84e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
        "uuid": "335c75cc-5284-4d04-af8c-df67cbf16173",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "bfbfc43f-3488-44ed-b78b-cb88a3e8ffd4",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a10853a2-85a2-4c8d-979c-9eca83fb4ab3",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "4cb0d1b4-de08-4bba-8b41-826f8ccab6da",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1f94de5c-1723-4df3-9901-de926b14dba1",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "9850707d-b4bf-47c6-b764-222bb50f48ae",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "a43faa9f-374b-4b9d-b8f7-09a739df3f0f",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "597d1586-3a75-4462-b63d-39d007d6c810",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b4cb1ea5-11ca-4e0b-b039-0e03cc4c1262",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b20250cf-6bb2-409e-a31f-55e5b91c8f16",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e77d8270-4eb0-4b76-9357-cae6ac1e1107",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "baf9fe2e-b23b-4046-acc1-5cd439558c6a",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fc999b8c-828e-4a7c-b7bd-9c6c4575d3ca",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "1513c2a9-6386-418d-828a-b16d33acdf8a",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "22b37d0c-3f3f-4159-97ef-30c04261ae4c",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "590caa29-beba-4e45-8863-04eea3fa24f2",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c1f878e3-e31b-4600-853b-dfda85db431d",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7f9bba30-a6b9-4ef0-9547-2d07de0d7bc4",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "da2cb796-98e7-4380-ac04-1b79e14d61c9",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0f5e240f-2a81-4664-ab3e-b1127eda8cdf",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "92a3d73d-ec51-4d2d-9cf1-b21e5435c848",
      "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "623eafb0-47da-4b29-ac57-de1ab92b4271",
      "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1751e7de-94e3-4b78-92ee-2394fd73f996",
      "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4664bea4-4590-4411-80a2-3608c83b7855",
      "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 131,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a4a05e01-6090-493d-a7e7-915d836ba695",
      "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "059eb18a-f136-4423-b48d-2171b85e28a8",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e7098ed9-8345-4667-9293-d7d7d693c299",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "34a98d06-28ff-4eb0-9e3b-ab08c07e28a9",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "668d6379-32ce-4ece-8251-012ab33f67e5",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c7025db5-42c4-4b9f-a387-ef4e10deeef4",
      "parentUUID": "3d00238a-b5ba-4cfa-a5e9-0778ec6c915c",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "22195b91-38a6-4103-a586-533874c019b7",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ba92c9c4-0c2c-4390-8ba1-9963c1cd6e4b",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "edd5b8b6-cde9-4249-8fa3-c89ad8390f2a",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cdd5df15-5dba-4b92-8f56-70983ad603fc",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f8178c65-db7e-42b5-a0a0-1f3d656d3daa",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c93512aa-4595-4981-8439-a21c3cd3e100",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "62ff201d-96d8-4b31-bc15-1c0b3882b032",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d8d1bc02-6bbe-4a19-b16f-115d089e2fb9",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "417bc6cd-f6f5-435b-b749-19e550b8045c",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1bc04057-a241-477b-95d2-fb432e8b9878",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a4ce63a-2d84-4d84-910a-4dc409ada87c",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "da1bda5c-4954-4bf1-a082-b65f904b995e",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f3375998-4860-4eec-b8e9-23535a92aa82",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is empty",
      "fullTitle": "team name change request should not allow it when team name is empty",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2fa71c36-e536-4a2c-acff-7605e4d3ea30",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0e6a4b46-6cc5-43cc-97ba-3d8c2615f78a",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4b738b36-411a-435d-9724-2c62d760fb2f",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7c3151b3-e0ea-4558-9da8-7f3780bf33ba",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b27e30b9-d992-46d4-85f4-1eb850baed85",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fe4c2e28-b499-4231-a701-ded1c8163ce2",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8e2789b7-66ae-4b74-91bb-4ddfa0dd8982",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4437da7f-134f-457a-b3fc-8d8e9952e806",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "83c169c4-34ec-4ac9-9be1-8b28a138633a",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3e2daa4f-71b5-452a-a826-7407d1bb2e25",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2993235a-72c9-4de9-98c6-3236a062f349",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d06aba93-18d4-41e0-ac68-434e7fecc91c",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4215e542-6a1c-4c85-92c4-d94e076b0f22",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c1bbf573-fa8d-4fa1-9766-989213eedbae",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "a874b6c3-580b-47b6-a548-100943c7998a",
      "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "22405f7e-13e6-4598-a92e-f175c0dede2e",
      "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "48a26ae5-d5a1-4dd9-a38f-d0580e6481eb",
      "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "91e26155-c839-4f1e-886e-1ad8e8ad09bf",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "630b68c6-a12f-4a73-9651-64e5ce2e4090",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "99039026-d2f7-428e-9341-2f95987ba443",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7796d0ca-e802-462f-a244-32b869eaeb5b",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "340839df-1de2-48d1-9ff8-0d70b064575d",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "645a4ae5-d0e9-4ab4-9bc5-b568779028bf",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1871f0fd-c505-44d7-bc67-27bf02701953",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "92e0731f-284c-4ddb-b2fa-338894da9004",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1a59a1f2-4ad9-4bdb-82ba-9228bf18c662",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c495bbd1-105c-4f7a-85e2-3729ea0d25e1",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "29d6e253-9ff9-41da-bc6a-e2c7801df81e",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4a6f23f3-5df1-4cec-b597-1408356f61b8",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ccd01640-9dc6-4756-b232-616f92133ef3",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8129e15c-96f4-4406-af4d-f39027a00066",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "4c83bd72-c64b-4710-8f52-8573bbc9a948",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "fbe470ef-c595-4b71-9034-38089ba31d29",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d25ff9e4-af18-469d-9503-4d67afd3bfab",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e9a1bc82-e355-4550-8aa8-7e1223dbe51e",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d518f2d1-9c30-45b3-8aaf-dc6047f8e31e",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "decd8a92-f95b-43cd-80ab-c129d8ff0985",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "769a5191-fe12-4b39-b9ac-99bcc05f7bc4",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e418f4aa-c19d-4f98-a0b0-a10ff3018d1b",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e38a63ad-c69d-43ca-8a0e-3bfd0cb19364",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "8a8e6c2f-6d0a-4b7d-82b1-6cd0ab3c9f92",
      "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "d48f4c93-5381-4178-b35a-43361ebd7642",
      "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ca7e6cd7-0345-4752-97d5-4b1e010fafa9",
      "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "6059de5f-a28c-4404-ad12-bca4ba089c3d",
      "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "16091e23-c7fc-47a6-887a-d53f963888c9",
      "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "c77169c9-b032-4de6-a771-864976d3db34",
      "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "59b1830a-5dd5-43af-860b-bff7105e09bb",
      "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "a1ea4375-26fa-44b8-954e-965fd3157c8a",
      "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "4a695fb6-4299-4233-a5e1-260d6c7b0b0c",
      "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "c758da7b-6cc5-43e7-9701-4879c4a5503b",
      "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "992a0fd2-9ab1-4d29-a59e-9f5b0efec930",
      "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b3dd026e-84ad-4c14-b9d5-0ee317f0fdf1",
      "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "c512f5dd-fed1-4d51-8554-9ee678a5b967",
      "parentUUID": "aefb9d27-7e22-4db6-b88d-45ff43c708fe",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "60b8d07d-0129-4831-8645-0df45aa8d0ca",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a47b33a-2542-40ab-8fb5-b1504e201e03",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "75494daa-85b5-4f37-bf6b-f22ed69417bb",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "90027ff9-178e-4fdd-8ffc-dfb5a79f7e21",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "de64d8d5-7a6f-4e8c-8373-876e3d7a45c8",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e361be7f-5cff-41e3-bb0c-c03312d7c685",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3ef6980e-d7d8-44d3-a970-b3e9b14fe236",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9eaac139-e7c1-4de6-acd3-123aa3e50d86",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4a061039-2451-419c-bd1f-d5ee7d85e6e1",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9051d6fc-88e8-4be3-923b-5fe4c8eff6e0",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8849b3e3-93cf-4131-bfd2-e47520ccd595",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0ea351ae-3ae3-44e8-900e-234050cd16e6",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "17d5da4c-1dc0-4ad6-81a2-1fd67be9533f",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a219da54-10cb-4e16-a165-7b116d90e66b",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "30dd991b-de2f-4e54-8040-826a8cada592",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "settings update should not allow it when session is completed",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "68011d8b-91b9-4494-b8ae-8a9ae22d0169",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "settings update should not allow it when not the host",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5b4fc2a1-286c-4475-9798-70e44641b87d",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "settings update should not allow it when session does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e65304c9-bce4-4a29-a39f-b04446cac92c",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the session name",
      "fullTitle": "settings update should update the session name",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bb572011-7fb1-41d3-a4df-38e85bd62165",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the max contestants",
      "fullTitle": "settings update should update the max contestants",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6233b545-3ada-48b1-92b0-efc6355a1265",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the max teams",
      "fullTitle": "settings update should update the max teams",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6ed7519f-bd5f-4638-ab42-90902fc64cbf",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the team size",
      "fullTitle": "settings update should update the team size",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1809f749-c411-4a81-a698-5e714f988d91",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the session name, max teams and team size",
      "fullTitle": "settings update should update the session name, max teams and team size",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "482370bf-bd25-480c-965d-2434f7d38e39",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the session name and max contestants",
      "fullTitle": "settings update should update the session name and max contestants",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "000103d8-44ed-4b8a-84cd-e2a6ad8f0bfe",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "dfb378d2-e736-49f7-abd6-38fd561e1a08",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f9c46890-1cbc-4de0-86f9-2ff778b96819",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0d8b1ca4-111d-4c72-8c06-11bf86f476e8",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cec7e6c1-a8ec-4f02-a10c-4a31793b72be",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "50c7d3e8-4f4a-4aaf-b441-52e4ac9b2f69",
      "parentUUID": "2771e6fe-9984-4a03-9e6a-c707186fdcbe",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "6f67dffe-0031-4ea1-ae0e-412ac1398370",
      "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a22276d-9cd9-48b7-92d1-0d8650129cb2",
      "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7eb0cba9-bc6b-41a4-ac84-a0e152bcfdf3",
      "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a312843-a14b-4fd5-bf67-a31a32afdefb",
      "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7621a0aa-0b79-4b39-b58e-081f44f14860",
      "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f49fd967-b178-47df-9d66-e45965ff718c",
      "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1fa2d777-e354-4865-98d6-f4a926d04c51",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "89fbc9b0-4069-4df4-9a5d-ff5d42ca0014",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "dc48806e-5efc-482a-995a-1803d1dbe955",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "d4af368a-8913-4d3a-a119-166adb53ec59",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "0191dc90-e75d-45f9-affe-158a1fc31934",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b693adfb-1c36-4d4f-842a-e953b61e9e19",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f51d1942-1376-4326-8bbd-ddeefbdc14c6",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6056ebbb-ad8c-4dc0-9ca2-68936cb57189",
      "parentUUID": "b7312eac-62e2-4161-9515-2c9c3238f7fd",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e89952a4-27e7-46fb-8a50-5b3daa1df740",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "e8a6ab49-7c30-4da7-80ec-8ca36ea5a31c",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "75a7f02d-e925-43e7-bd5f-7de3271af941",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "20bd5b6a-71ea-48d5-9251-899baf2f4b68",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "3ff46278-5d0b-4a43-9da7-510469be2af1",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f60ca8a7-dc72-4de2-b233-04916e39204c",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "eaa02eee-1979-4fcd-bdd8-4ba460127e53",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d1785474-440d-4c94-80b3-a3357c252ad4",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "278577d9-571e-4193-acd6-2ca176328e42",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a877725-ab73-49c0-811c-d8e0450715b1",
      "parentUUID": "c3cf5749-cfc9-436e-bfea-76f37ff1beb2",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5aaa46e3-e743-49bc-b92b-3a86afe2e70d",
      "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6eb66639-31af-4623-a852-aef43cb28f83",
      "parentUUID": "f3855f72-4453-4057-a520-d6fe7d581b14",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0afb5cd1-4663-4eb7-89c5-7bae1d76886d",
      "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "da305467-6dd9-4d2d-84b2-622eb8f8ecf7",
      "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 131,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3df9f59c-2b8b-4685-96da-e3d0f5fa173b",
      "parentUUID": "b438f457-75f9-4be0-aa56-ac392d493729",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "58f814fd-de24-4be0-80c3-3782af44b9b2",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d40def60-67a0-4dd1-9451-0a3d490d3699",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cd04ac09-624f-4a47-bc23-8ceb8c00a417",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "519c58c0-1289-42cf-b2e2-a3b9abf4c1bf",
      "parentUUID": "ba214ead-98dc-4b93-af45-36470e83fbda",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "dee5064b-7aac-4204-81a6-edfc6e584b9c",
      "parentUUID": "3d00238a-b5ba-4cfa-a5e9-0778ec6c915c",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a426970-1f46-42de-b513-07fe90567f03",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "234b474e-b11d-4fbd-959f-942052e0b72a",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "504ca798-e192-4864-b7b4-2d3674a3162b",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "30cd1634-9f5e-4263-80d0-192affaf86cb",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "07b25c9c-c030-47f1-adad-f1e1b81709b6",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d98cc930-286b-4bac-a4bb-f6e25f1f45f6",
      "parentUUID": "d1febcd9-6b62-4800-ab5c-23f6204a7d23",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5cde72bf-f22d-4b68-b859-eacfdded5e19",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "92b27061-8f69-447c-b214-d2498eb8ae90",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "970480f2-94b0-4588-8750-f60168dc408b",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "af8caefe-55c8-43d1-9703-be484695e00f",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "85184a8c-62f4-4b43-857a-a27828f8c47c",
      "parentUUID": "9af2fa40-d7e1-4796-8189-5dff39712786",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "83cd180d-d7a2-4726-a5f0-160ee5387966",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "30a8a726-edea-4bf5-b84f-6a1f9c7124f3",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is empty",
      "fullTitle": "team name change request should not allow it when team name is empty",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">' '</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_AS_TEAM_NAME_EMPTY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7a3f000e-1e8c-4283-b8bb-ef50040e667f",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8c409afe-431e-4d22-99f6-59753657db6e",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "613f0aff-0461-4d98-acea-21992c1fe257",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5c82510e-6d03-4875-883f-0fa731101f11",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8429b7fe-262b-4d2c-92a6-92dbf29f8a7b",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "29c66076-d356-41a8-aa17-fa6925dee8bb",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cddfe8f5-57c0-4699-9293-e21acbd98519",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0fe29cd4-be2c-4132-9875-59737f4f21e3",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "704a03ac-0a3d-4d35-9b64-e6c3293fb45e",
      "parentUUID": "1a3d44ff-ea2a-4515-996a-d11819e923a9",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ec7f2136-7080-4fa5-9b99-6f45a40d1864",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "56242fb4-4f32-42d0-adc7-56d37e675fd1",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "69cc8e46-3832-4a33-bf42-dc42b64c01e9",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "04e69939-85d8-40f6-bdde-28f6b4a392a5",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8290b611-3914-409f-8f48-a8e778a74549",
      "parentUUID": "2022c2db-5360-46ed-86dd-8c3c639102d0",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test Session'</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "e73e0b34-1152-4688-8111-29606d2fd2fe",
      "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "e7d27910-8c06-484b-97d1-4fc558e691b8",
      "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "9489edfb-6da8-418a-83f7-84ea12bc7181",
      "parentUUID": "0c79f9f0-dc49-4738-a908-bef66e831b56",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6acde3d0-f129-4dfc-bd4b-a19c98ec975f",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "ba3b5256-a6fd-4528-9774-2d77b7d6f909",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7d06eb4d-2166-4237-b6e6-570bf0af54cc",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "fd3551b1-469c-4f96-9d8a-95711beed26f",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "664d2026-aafe-484d-90bb-478c5b1d9f87",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "27f392a7-8124-43d7-acf7-a5d35fd26d36",
      "parentUUID": "7f92277e-cb70-477f-92f2-45443f929602",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "39b94d33-fc65-4ad9-a117-7e1924afb261",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "70c8a700-eeab-468a-890b-ca7556918217",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "66b56bba-4748-4a99-ab1d-86e29f25988f",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d153a2fd-e585-4c8b-a85a-baa222ff7fb1",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5c1be87f-11f6-40de-a8ee-c2a4b98f6629",
      "parentUUID": "295abe8c-0a7e-44c3-8ee7-cd7f5e88ee3c",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "af19e4db-20f9-4ea3-8774-28ef2a963507",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3af17623-4928-44e5-941d-f71a54ebf203",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "00d075cb-3468-4462-a7f7-3beb5adffd09",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "6c8bcdf0-22a4-4b0d-8aa1-ec851858a388",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "6a630ce1-683f-4d2a-b18c-967704a5bc40",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "772d82a6-b56f-461e-8b87-41093828ea7d",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8c270d16-a4f5-4ea6-b761-3a9a66575119",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3263f87f-bc0b-4127-b49d-6cdbc849ef84",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "850723da-02e1-4c3e-bca3-577cbcea6f40",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2db47552-16b4-4849-87ee-660022b5e733",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "266e4964-92e0-4d32-904a-012449fae95f",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "07a5d86c-19a6-4f09-90ad-cdcc1ef04b23",
      "parentUUID": "9dcb3e73-bb16-48d1-9cba-c0d7c66437e5",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "320002b7-8d6f-4f09-b8f3-7ad8fc610da1",
      "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "bc6b26a9-8ca9-4515-a618-5ab445de3355",
      "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "4654e1dd-7219-4b0b-aa38-e79f44a8f575",
      "parentUUID": "b2df11b7-d901-41c5-8bae-145c5f402214",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "f1dfc7a0-4621-41d1-a93d-9d8ed3d644b5",
      "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "13a430e9-759c-4d5c-be03-cf429e4b4542",
      "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "957d5da1-6f7c-4d89-926f-ba2464d179ae",
      "parentUUID": "000a707b-6fe4-4b7f-9bea-d03582cbd091",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "57baec65-3c70-4444-a0ae-2d4259931824",
      "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "dec4ce94-eacf-46f4-843f-f1af9322dd7c",
      "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "3144842e-28f5-49da-ad19-d82a91e0f01e",
      "parentUUID": "b7f7edf8-b2bf-45d5-be3c-2eb3ccaa4687",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "c0a60dc8-ce46-4bd2-96b6-787f97d8c6ad",
      "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "e1fd8f26-94a2-4e8d-b79b-fc9c2c4f0796",
      "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "d15a97a5-ed85-482d-8c02-c5dad7467e51",
      "parentUUID": "080fa097-ebff-480e-a65d-4ecfbd17f9ec",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "6c5d7078-d992-4d73-9135-5488a786cf9f",
      "parentUUID": "aefb9d27-7e22-4db6-b88d-45ff43c708fe",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "911ff0e6-2ffc-428c-8c7f-caf6fd7723fc",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f6813885-d0fc-458e-8c11-1d7efcea9196",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c1aa5b4b-6a08-4da4-a693-7652a248e187",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "32e1098c-531e-450f-81a0-d0294fb9d7cb",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ad5f4fff-0018-4a74-8b57-47e74d70e1dc",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "38cc1587-3bb3-4a21-bb96-454c522b53a0",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "39afaabd-5938-455c-9502-9b7dfed6b6d1",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2a5c1d21-4b34-46bb-bba6-f7be21e0ace3",
      "parentUUID": "081a7280-ce42-4743-9e35-e422eaaf8f61",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8e2d7c6f-7f47-4d10-8db6-6acfd9cdf1cf",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f3a41c0d-3626-47db-9f01-a44e1500038b",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0b8002c5-dcd3-4059-957f-0d022d6559e8",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fcf75acd-0d24-4061-8737-7ba772c679a0",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e43ccaf7-3e1e-4dad-88c3-87aa3b4d0db4",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a79c576a-f2a6-4c22-8217-ab45a1cee3ec",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0c4a30a5-5997-4cd5-b412-205d321f0113",
      "parentUUID": "34049a47-99b3-4ae0-8993-ae7531d99bd1",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "settings update should not allow it when session is completed",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cdaeedfa-3742-4678-8a09-d436dbd7a0af",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "settings update should not allow it when not the host",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "99833717-4fff-4bdb-afd3-01dd3050977a",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "settings update should not allow it when session does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9f1be496-e52d-4f3c-aa40-7ea196814305",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the session name",
      "fullTitle": "settings update should update the session name",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "53fd99a4-54b9-4765-9812-1c5276f4bedb",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the max contestants",
      "fullTitle": "settings update should update the max contestants",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cd3f25b0-b1f8-426d-82d5-5bfea27da9fc",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the max teams",
      "fullTitle": "settings update should update the max teams",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5c1f1767-524c-4173-a09b-3f2373d5cbba",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the team size",
      "fullTitle": "settings update should update the team size",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "357a8955-64a5-4854-9198-cdd9832027fe",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the session name, max teams and team size",
      "fullTitle": "settings update should update the session name, max teams and team size",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ba1f583c-274b-4fe1-ac8e-e6ef6e9bb51a",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should update the session name and max contestants",
      "fullTitle": "settings update should update the session name and max contestants",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "106c2c30-429d-4037-9a44-dd21be616031",
      "parentUUID": "6acfcb08-1d80-4258-8d8d-43bb57cec47a",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7fe9883c-61aa-4080-a5e2-8a373113ab78",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "38926af8-fb82-4f93-ab17-c12e9d4c9c47",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7add30a4-a15f-4aec-8a12-5d54c1d11a3b",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5ce6bcd6-f723-4f28-b55c-a863ae1611c8",
      "parentUUID": "d16c193f-4bcb-4fa4-8016-2631e84718c6",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ccd24aa4-3138-405e-9dfd-f0c22550b496",
      "parentUUID": "2771e6fe-9984-4a03-9e6a-c707186fdcbe",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "16554355-1bcf-4e06-bb81-2945ad7340fc",
      "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "57f1ceb2-afda-448f-a5e2-06a0dd0b7752",
      "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "234f0a1d-9eec-4d90-804b-8881694f9d96",
      "parentUUID": "8071faab-2564-40fd-8e4b-f1b0c4d6a676",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "54b6a532-9c0f-4ace-8af2-329685d5d515",
      "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f50eee7d-8054-4554-a555-1f1cc6321e32",
      "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c318e386-3e8a-4a6d-8224-852e3e107ae5",
      "parentUUID": "8695a318-f956-49ae-9c05-2626d2ce419e",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}