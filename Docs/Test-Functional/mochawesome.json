{
  "reportTitle": "buzzer.click",
  "stats": {
    "suites": 32,
    "tests": 108,
    "passes": 108,
    "pending": 0,
    "failures": 0,
    "start": "2016-09-24T00:39:44.539Z",
    "end": "2016-09-24T00:39:48.871Z",
    "duration": 4332,
    "testsRegistered": 108,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "contestant",
            "suites": [
              {
                "title": "join",
                "suites": [
                  {
                    "title": "as individual",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 163,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "8217731a-566c-4f3a-9f6b-a411e7551d36",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "3e1113e7-5763-45b0-84b4-a4b0153b774f",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 79,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.MAXIMUM_SESSION_SIZED_REACHED<br>                );<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e469257f-4502-404e-9241-e7447277e503",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bb239809-6b75-43ce-a14b-0a72a3e3fcb9",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 66,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "16c038a2-4be7-4960-95ed-6b5c57b93401",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "80cb27ae-6323-4981-bd17-12f11d2fc314",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c834e4c8-d5fe-4353-99b3-60160ef78c28",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4f99842f-7f8b-4315-a60d-bb4f1a4ec8e0",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 163,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "8217731a-566c-4f3a-9f6b-a411e7551d36",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "3e1113e7-5763-45b0-84b4-a4b0153b774f",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 79,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.MAXIMUM_SESSION_SIZED_REACHED<br>                );<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e469257f-4502-404e-9241-e7447277e503",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bb239809-6b75-43ce-a14b-0a72a3e3fcb9",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 66,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "16c038a2-4be7-4960-95ed-6b5c57b93401",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "80cb27ae-6323-4981-bd17-12f11d2fc314",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c834e4c8-d5fe-4353-99b3-60160ef78c28",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4f99842f-7f8b-4315-a60d-bb4f1a4ec8e0",
                        "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 8,
                    "totalPasses": 8,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 552
                  },
                  {
                    "title": "with teams",
                    "suites": [
                      {
                        "title": "when team leader selection method is RANDOM",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 62,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equalOneOf(<br>                    <span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>                done();<br>            });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "b8971455-6d23-4988-8799-7f167cf5c138",
                            "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 50,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><br>                        done</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>                        s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>                        s.maxTeams = <span class=\"hljs-number\">1</span>;<br>                        s.teamSize = <span class=\"hljs-number\">3</span>;<br>                        s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br>                        <span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>                        helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>                            <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>                            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>                            helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>                                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                                        <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                                        should(t.teamLeader).be.null();<br>                                        done();<br>                                    });<br>                            });<br>                        });",
                            "isRoot": false,
                            "uuid": "039e09e8-cbd6-40e2-8177-1d09d9eb4ba5",
                            "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 62,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equalOneOf(<br>                    <span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>                done();<br>            });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "b8971455-6d23-4988-8799-7f167cf5c138",
                            "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 50,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><br>                        done</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>                        s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>                        s.maxTeams = <span class=\"hljs-number\">1</span>;<br>                        s.teamSize = <span class=\"hljs-number\">3</span>;<br>                        s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br>                        <span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>                        helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>                            <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>                            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>                            helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>                                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                                        <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                                        should(t.teamLeader).be.null();<br>                                        done();<br>                                    });<br>                            });<br>                        });",
                            "isRoot": false,
                            "uuid": "039e09e8-cbd6-40e2-8177-1d09d9eb4ba5",
                            "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 2,
                        "totalPasses": 2,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 112
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 40,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b5019d21-617d-4792-9ecc-2edc0a5ea07c",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "09e57cb8-fadd-4ba3-88e6-f336eb28d8bb",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.TEAMS_ARE_FULL<br>                );<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "736d884d-15d0-49e0-b775-4b7b5d976471",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 45,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "612eb72c-78e9-4d77-af18-f3ba52fadbb7",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 40,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b93414c8-c75e-4e58-8a4e-64d3ed269e28",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "784d4cc2-331c-4aa6-b545-af83aff70612",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a2f762dc-dc70-4d6e-8479-9ef5b5c04c3e",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c46ea768-ffc0-4cb2-afed-a1cbfd6b356e",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4c724c39-7bbb-4e45-a320-5fcd005d49b6",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "91a5b82e-ec27-49a6-848e-355811a59b12",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 40,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b5019d21-617d-4792-9ecc-2edc0a5ea07c",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "09e57cb8-fadd-4ba3-88e6-f336eb28d8bb",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.TEAMS_ARE_FULL<br>                );<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "736d884d-15d0-49e0-b775-4b7b5d976471",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 45,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "612eb72c-78e9-4d77-af18-f3ba52fadbb7",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 40,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b93414c8-c75e-4e58-8a4e-64d3ed269e28",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "784d4cc2-331c-4aa6-b545-af83aff70612",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a2f762dc-dc70-4d6e-8479-9ef5b5c04c3e",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c46ea768-ffc0-4cb2-afed-a1cbfd6b356e",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4c724c39-7bbb-4e45-a320-5fcd005d49b6",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "91a5b82e-ec27-49a6-848e-355811a59b12",
                        "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 10,
                    "totalPasses": 10,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 439
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "b61a8261-f463-472a-a6cb-1866904d95d6",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "team leader inquiry response",
                "suites": [],
                "tests": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8ab826c1-aa32-4ca0-91c7-885d09f969b4",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                should(t.teamLeader).be.null();<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ec32fdab-6d68-44f7-927b-59c7aebf3462",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "67b2b01b-2d94-46e9-aaeb-e2a2d447b88a",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b391cb92-c496-4d93-b7c8-1c1273f25b0a",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2bd39f40-32b7-45a9-a985-77f14cfa42c7",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                rqm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    rqm.contestantId = cc1Id;<br>                    cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                        rqm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "37d87e3e-ce25-4788-a547-c1ef3888bb60",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8ab826c1-aa32-4ca0-91c7-885d09f969b4",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                should(t.teamLeader).be.null();<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ec32fdab-6d68-44f7-927b-59c7aebf3462",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "67b2b01b-2d94-46e9-aaeb-e2a2d447b88a",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b391cb92-c496-4d93-b7c8-1c1273f25b0a",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2bd39f40-32b7-45a9-a985-77f14cfa42c7",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                rqm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    rqm.contestantId = cc1Id;<br>                    cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                        rqm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "37d87e3e-ce25-4788-a547-c1ef3888bb60",
                    "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 261
              },
              {
                "title": "buzzerPress",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bfe73e84-ddc1-4c69-b343-d1975fe6c8f7",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                        messageConstants.CONTESTANT_BUZZER_PRESS<br>                    );<br>                    bpm.sessionId = sessionId;<br>                    bpm.contestantId = rm.contestantId;<br>                    cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                        bpm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.BUZZER_PRESS_NOT_ACCEPTED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9b4e7de2-abe7-4619-b3e7-080d17ed6888",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "57d9ef47-9d30-4bb0-83bd-7c6f60bd77ca",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2da8226f-a93b-4396-9cb2-8574057658ce",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3501a254-5df3-46a2-9bd5-bdedc83da3fa",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "ae34a330-b74d-4315-b852-14ff52858718",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "bfe73e84-ddc1-4c69-b343-d1975fe6c8f7",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                        messageConstants.CONTESTANT_BUZZER_PRESS<br>                    );<br>                    bpm.sessionId = sessionId;<br>                    bpm.contestantId = rm.contestantId;<br>                    cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                        bpm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.BUZZER_PRESS_NOT_ACCEPTED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9b4e7de2-abe7-4619-b3e7-080d17ed6888",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "57d9ef47-9d30-4bb0-83bd-7c6f60bd77ca",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2da8226f-a93b-4396-9cb2-8574057658ce",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3501a254-5df3-46a2-9bd5-bdedc83da3fa",
                    "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 236
              },
              {
                "title": "team name change request",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9544cf8d-d9e0-4bab-a3fe-56ccfe2d0e35",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "504da26b-65b5-4a68-b338-7f19d25e412f",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "35b3dead-d8d5-4df1-a964-642039e634bb",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "18822064-ea7f-4a79-8180-6a9adf8c7806",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a4769af9-bc7f-4704-ae69-0937279501cd",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "22ccdc6e-d8d7-45f6-bb3f-b65412f476f0",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e6936553-827d-479f-ac1a-b4ff8cdf48c1",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "18b66b04-48ec-4b56-91e0-f1a28c3f851d",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "085e8625-5b24-43b5-963c-d15215683de4",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d398659e-bd18-4eaa-a60b-ab05226f5784",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9544cf8d-d9e0-4bab-a3fe-56ccfe2d0e35",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "504da26b-65b5-4a68-b338-7f19d25e412f",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "35b3dead-d8d5-4df1-a964-642039e634bb",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "18822064-ea7f-4a79-8180-6a9adf8c7806",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a4769af9-bc7f-4704-ae69-0937279501cd",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "22ccdc6e-d8d7-45f6-bb3f-b65412f476f0",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e6936553-827d-479f-ac1a-b4ff8cdf48c1",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "18b66b04-48ec-4b56-91e0-f1a28c3f851d",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>                done();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "085e8625-5b24-43b5-963c-d15215683de4",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>            });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d398659e-bd18-4eaa-a60b-ab05226f5784",
                    "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 10,
                "totalPasses": 10,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 337
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "82027d03-c6b2-47cb-b690-c8e4766cf730",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e251e964-b8a5-457a-a50f-6028c3785319",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4469b62e-1c3f-4162-82bf-81c79baf3c8a",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f3415f22-d700-43eb-816f-ae82e4cde824",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ba7bbf68-9004-433c-9cfd-247065df0a73",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "82027d03-c6b2-47cb-b690-c8e4766cf730",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e251e964-b8a5-457a-a50f-6028c3785319",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4469b62e-1c3f-4162-82bf-81c79baf3c8a",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f3415f22-d700-43eb-816f-ae82e4cde824",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ba7bbf68-9004-433c-9cfd-247065df0a73",
                    "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 160
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
            "uuid": "b01895c9-7888-43ef-acd2-f29c4d46570e",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
        "uuid": "4fff25ad-77a6-486e-bf63-20006cd377ac",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "host",
            "suites": [
              {
                "title": "create",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "837415bb-5a45-4ad8-b70d-3783dac099ca",
                        "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "ba97af1a-a590-45ab-953c-a02b9a6635ba",
                        "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "fa3d1a20-9242-4428-9256-567c482b8b02",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "837415bb-5a45-4ad8-b70d-3783dac099ca",
                        "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "ba97af1a-a590-45ab-953c-a02b9a6635ba",
                        "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 28
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "23776fca-5625-4874-b3f7-12dfb0006a22",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "683ec98e-6bc7-4b88-b0c6-f0ff81787230",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c7d074c3-3d32-41a9-96b3-88db636e7f93",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a9ee1d91-dbe1-4da3-94ab-d1c4bd0a0d68",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fb8a00c0-ed66-4e09-b9ea-93b897462684",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 47,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "37532fc2-9202-41f3-b811-a8460c685343",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "683ec98e-6bc7-4b88-b0c6-f0ff81787230",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c7d074c3-3d32-41a9-96b3-88db636e7f93",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a9ee1d91-dbe1-4da3-94ab-d1c4bd0a0d68",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fb8a00c0-ed66-4e09-b9ea-93b897462684",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 47,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "37532fc2-9202-41f3-b811-a8460c685343",
                        "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 150
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "cbf6f4e8-61af-4535-bbc0-e17e10136927",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "complete",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9aa4c5d6-c79c-4ace-b3a2-bb461335e591",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d6e1eb45-4ac9-4541-bbcb-9d04daa91069",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "11ad4899-0c40-489c-ba04-9a3189cae665",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "560d7883-c118-4c3b-8ed0-16b9a97f32ed",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "852606b9-7bcb-4632-9fa6-e706f9921b93",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9aa4c5d6-c79c-4ace-b3a2-bb461335e591",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d6e1eb45-4ac9-4541-bbcb-9d04daa91069",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "11ad4899-0c40-489c-ba04-9a3189cae665",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "560d7883-c118-4c3b-8ed0-16b9a97f32ed",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "852606b9-7bcb-4632-9fa6-e706f9921b93",
                        "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 75
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "e1a9c1cf-da69-4711-b470-e292464ee3ca",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "buzzer",
                "suites": [
                  {
                    "title": "action",
                    "suites": [
                      {
                        "title": "when accepted",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 47,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1b6f7723-7d9c-4d2f-876b-41fc1522f67f",
                            "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 39,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "3d060887-b168-4df7-8272-04f3bf7ca4fa",
                            "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0fa965d5-d20b-4085-aafc-7d01fe35378e",
                            "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 47,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1b6f7723-7d9c-4d2f-876b-41fc1522f67f",
                            "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 39,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "3d060887-b168-4df7-8272-04f3bf7ca4fa",
                            "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0fa965d5-d20b-4085-aafc-7d01fe35378e",
                            "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 116
                      },
                      {
                        "title": "when rejected",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "d5cb4b97-0318-4e64-af8e-e757790f9673",
                            "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "5041742f-08d2-4c3f-b62f-2e45e5dd0a8e",
                            "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "43bf5221-f86e-49ec-af1d-2c5a4fc4d3ad",
                            "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "7412c060-6669-4c25-9685-871f0fd28594",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "d5cb4b97-0318-4e64-af8e-e757790f9673",
                            "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "5041742f-08d2-4c3f-b62f-2e45e5dd0a8e",
                            "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "43bf5221-f86e-49ec-af1d-2c5a4fc4d3ad",
                            "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 104
                      },
                      {
                        "title": "when reset",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "e9d9fb9d-e19c-483f-9653-8c21526e99c8",
                            "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 39,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "e99d678f-3ac6-4b9f-8c95-fda2b5f00da2",
                            "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "2345ed3f-e6ac-4fc9-911a-40ad01c34cbe",
                            "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "e9d9fb9d-e19c-483f-9653-8c21526e99c8",
                            "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 39,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "e99d678f-3ac6-4b9f-8c95-fda2b5f00da2",
                            "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "2345ed3f-e6ac-4fc9-911a-40ad01c34cbe",
                            "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 100
                      },
                      {
                        "title": "when disabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "dbcc5c0a-1851-44f9-b597-e7a092aa4ed7",
                            "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 35,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "a1644b1d-d1cd-4c54-9df1-b7503b1b5072",
                            "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "2d4c373c-bd4d-412e-b10c-7a4c826d23be",
                            "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "d7b36b06-e218-46cb-a397-5445a276d243",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "dbcc5c0a-1851-44f9-b597-e7a092aa4ed7",
                            "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 35,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "a1644b1d-d1cd-4c54-9df1-b7503b1b5072",
                            "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "2d4c373c-bd4d-412e-b10c-7a4c826d23be",
                            "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 86
                      },
                      {
                        "title": "when enabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 24,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "6db75b3c-89c7-4099-8f00-ec55d81d3071",
                            "parentUUID": "3365f14c-d15a-4846-91d1-6ac0144d1e70",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "3365f14c-d15a-4846-91d1-6ac0144d1e70",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 24,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "6db75b3c-89c7-4099-8f00-ec55d81d3071",
                            "parentUUID": "3365f14c-d15a-4846-91d1-6ac0144d1e70",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 1,
                        "totalPasses": 1,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 24
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 39,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2fddccd6-283e-47b0-b1a2-4266c2a0baba",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 37,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "8edf77d0-fb45-475a-afb0-fdd2d3fda0c9",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "20fbb492-19e0-4236-a6a0-3f552aa8255a",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "81bbb1af-c289-4d3b-9de6-cf7dceb3584d",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 36,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "8bcf6e88-e6c5-4100-89a8-25120495fc57",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f77ccfb1-3978-473b-935d-4751254f7a6d",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "39adcd89-e9c0-4f86-a629-170053bf0a2b",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "35b85fe5-33ce-4acd-93f9-45e5bec2a101",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "338362a7-3e5a-4899-8568-b008d5b1b111",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 31,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9b3d9181-dad7-4ade-bf60-648541a8dd18",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "646a1ab5-a9bb-4e94-bf7d-cd2ea5f8222d",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a2a44e60-f9db-4b3f-b833-4de1d66755ce",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 39,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2fddccd6-283e-47b0-b1a2-4266c2a0baba",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 37,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "8edf77d0-fb45-475a-afb0-fdd2d3fda0c9",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "20fbb492-19e0-4236-a6a0-3f552aa8255a",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "81bbb1af-c289-4d3b-9de6-cf7dceb3584d",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 36,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "8bcf6e88-e6c5-4100-89a8-25120495fc57",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f77ccfb1-3978-473b-935d-4751254f7a6d",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "39adcd89-e9c0-4f86-a629-170053bf0a2b",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "35b85fe5-33ce-4acd-93f9-45e5bec2a101",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "338362a7-3e5a-4899-8568-b008d5b1b111",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 31,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9b3d9181-dad7-4ade-bf60-648541a8dd18",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "646a1ab5-a9bb-4e94-bf7d-cd2ea5f8222d",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "a2a44e60-f9db-4b3f-b833-4de1d66755ce",
                        "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 12,
                    "totalPasses": 12,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 346
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "77eefba0-04dd-4fb0-8416-1983ac700153",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "team name change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93c437fc-d12f-465e-bfa1-ac0754d60fd8",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "553459ef-8e72-4a7a-82ee-886329fe7dc2",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c0e25bcb-da57-45be-a3af-801eb7f7e7d8",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4f9ca9c0-ef38-4c7b-88fe-e918bc04cf01",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3afcc193-6529-4be7-a8fa-b6fa820b5093",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "42a49a0d-17bf-4cf1-ac4a-53f8510d8051",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0849ee9e-5dbd-4900-b42a-146b327fb527",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a4fccf79-ce02-4975-a650-2ec3cecd2404",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93c437fc-d12f-465e-bfa1-ac0754d60fd8",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "553459ef-8e72-4a7a-82ee-886329fe7dc2",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c0e25bcb-da57-45be-a3af-801eb7f7e7d8",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4f9ca9c0-ef38-4c7b-88fe-e918bc04cf01",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3afcc193-6529-4be7-a8fa-b6fa820b5093",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "42a49a0d-17bf-4cf1-ac4a-53f8510d8051",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0849ee9e-5dbd-4900-b42a-146b327fb527",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a4fccf79-ce02-4975-a650-2ec3cecd2404",
                    "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 146
              },
              {
                "title": "team leader change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b5ad6305-d4f0-4e6d-9348-56c1d6110731",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "65eb03ab-8419-46e9-86ab-218952310dcb",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 62,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "536b37e5-ec6e-4da6-a0e8-311a58e67a11",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "34baeb97-b0e4-484e-8668-4c0f9ec3274e",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ec9840f7-6c1c-4a96-88a4-2942b17a631d",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "1c01cc7d-11e8-4266-b7da-a0dc6938733a",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "06a559a0-4b19-4093-9e47-e555cb2212ea",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "1c2383cf-887e-438f-885b-46c4b9702804",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b5ad6305-d4f0-4e6d-9348-56c1d6110731",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "65eb03ab-8419-46e9-86ab-218952310dcb",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 62,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "536b37e5-ec6e-4da6-a0e8-311a58e67a11",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "34baeb97-b0e4-484e-8668-4c0f9ec3274e",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ec9840f7-6c1c-4a96-88a4-2942b17a631d",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "1c01cc7d-11e8-4266-b7da-a0dc6938733a",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "06a559a0-4b19-4093-9e47-e555cb2212ea",
                    "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 330
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "21caf0df-d72d-406e-9c96-57163a0dbf9d",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0ed052ff-36d8-4414-acb0-19eb41807ebf",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "87900572-ff66-4507-8692-63cdee387e3f",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d58dc95a-f748-4720-966f-800284de3546",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "eb9ae28c-2736-4620-accf-08d681b5104b",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "21caf0df-d72d-406e-9c96-57163a0dbf9d",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0ed052ff-36d8-4414-acb0-19eb41807ebf",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "87900572-ff66-4507-8692-63cdee387e3f",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d58dc95a-f748-4720-966f-800284de3546",
                    "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 74
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
            "uuid": "a103ad79-67f7-4dcd-9241-b9cd7d2339ff",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
        "uuid": "2905ed82-741e-4444-a3fb-ef6d02fb1fb9",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "observer",
            "suites": [
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cdd4fea8-0e7b-4361-9294-5ff0652f2d91",
                    "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "03a0b0c5-79c7-457e-8293-3e0ba5c7dcb5",
                    "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a582d9cd-1490-43c5-bf05-dfcfd21e0478",
                    "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cdd4fea8-0e7b-4361-9294-5ff0652f2d91",
                    "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "03a0b0c5-79c7-457e-8293-3e0ba5c7dcb5",
                    "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a582d9cd-1490-43c5-bf05-dfcfd21e0478",
                    "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 86
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "68ee4d09-866a-4943-9762-dc6c1fbc3bf3",
                    "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5469c2f5-e90e-48a7-b182-4bf87bf60188",
                    "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a5bd7372-f790-4dc7-90c6-dae383e0f1dd",
                    "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "640fa371-98d7-40f1-8137-dcacffa12a16",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "68ee4d09-866a-4943-9762-dc6c1fbc3bf3",
                    "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5469c2f5-e90e-48a7-b182-4bf87bf60188",
                    "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a5bd7372-f790-4dc7-90c6-dae383e0f1dd",
                    "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 75
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
            "uuid": "f9316486-52ec-4bea-9271-57d4ec6c3fec",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
        "uuid": "8c4e2e67-8d40-40ad-9a93-b5c14078d516",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "c48dbe47-d866-479f-a5d5-a29ba0fc7b06",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 163,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "af82197d-35de-4508-8f6d-c849d39237ef",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "f5b10e0b-27f2-4be4-8ead-60722b285e71",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.MAXIMUM_SESSION_SIZED_REACHED<br>                );<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a8035c0e-97e7-4ecb-b8d8-1e6458b78b2d",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "adba3ff0-d317-4cf5-b3e9-2c8f7a195f67",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f0673167-42ab-46c8-a65e-329d2a254efb",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3f30b8a4-35dd-477d-9842-d8e2c04a079b",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "34ec2b82-b098-4ef5-9c01-23899ef494ea",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7a42b853-800d-493c-afc1-a74fb39d7179",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f2380447-20da-43c5-9ea0-c42f0eb15930",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "dce442c3-5a43-43d2-9788-cfc107b268a5",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.TEAMS_ARE_FULL<br>                );<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9778b35b-3104-4b2f-b51e-2174d2bde021",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "53f773d4-e7b2-4633-b023-41cd8a97ddc1",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "c78d6674-314a-41df-baec-e51db1455161",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "750e3120-0a0e-4131-9d7c-63c59ab3944d",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "fb31e57b-a4a4-4da3-9879-7651f857e141",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1e98dfae-2209-4cad-aba8-5f58d903726c",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f1241f27-7463-4716-b1fb-26d5faee4dde",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2cd176af-b002-4fac-84a8-9c413d303760",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equalOneOf(<br>                    <span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "84fc660c-6c5d-4cf3-b72d-69dd58322f40",
      "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><br>                        done</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>                        s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>                        s.maxTeams = <span class=\"hljs-number\">1</span>;<br>                        s.teamSize = <span class=\"hljs-number\">3</span>;<br>                        s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br>                        <span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>                        helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>                            <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>                            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>                            helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>                                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                                        <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                                        should(t.teamLeader).be.null();<br>                                        done();<br>                                    });<br>                            });<br>                        });",
      "isRoot": false,
      "uuid": "a7aa696c-5294-490b-a25c-6e407c55fb4a",
      "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b5cebf19-1a00-4571-abc2-d24026704f6d",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                should(t.teamLeader).be.null();<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e9ce4ce2-05dc-46b0-a2e4-e76e9a34e693",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "14979b09-9748-4272-9946-f1860f9f7224",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e9dadb57-1a69-4e17-b5c8-913ae8e09092",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0dfe985c-8545-40cf-8841-7752ab123a7d",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                rqm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    rqm.contestantId = cc1Id;<br>                    cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                        rqm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "46dda4e9-598d-4a83-882a-0ec0e5938637",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "751b1a5b-308f-4f4b-a3d5-faa4e72362a5",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                        messageConstants.CONTESTANT_BUZZER_PRESS<br>                    );<br>                    bpm.sessionId = sessionId;<br>                    bpm.contestantId = rm.contestantId;<br>                    cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                        bpm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.BUZZER_PRESS_NOT_ACCEPTED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2a088d7c-961d-4333-a35c-a16366c8d93f",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "775ddcc7-c218-46eb-aeab-b09417c9d363",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3bea65d3-2182-4ab1-a3c6-5c2b498e374b",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "05a52ca5-967a-4808-8ceb-39c368a0ea46",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2c2c0248-9924-4adf-bae7-b73d97ecf0c7",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bea3fa25-2b99-4c5f-afb4-1ef9a22f95d7",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8ae68e4d-2ff3-47ab-b0b9-a03b8ff8bfa8",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0c37b328-5d19-478f-a2f3-8ef40143f8b4",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5fa87108-61f5-4881-89c4-3236f2fc593a",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "50bb493e-30ef-4ae6-8a2a-c0d00124e639",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d05c4808-af80-468f-b644-1a78e36f82e5",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d623328e-53bf-40c5-b9c3-f93ab89702d2",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5581b8b6-c92f-485e-a830-641093bcc13c",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ce2fbdf1-43b9-43de-aa5b-d549bc6e6feb",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fdb40485-5619-4531-a0ea-21a575dc1ce3",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fbbc0e36-aaed-4ee8-8759-9596f4af54ee",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d27496c6-4068-4071-b45a-33e1e643fd6d",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9848d097-3160-4d8d-9a76-b8990d5126b1",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "28aebcc3-8c7f-4e57-b130-524869895417",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "2e73ae67-caee-48f5-a26f-7c9607b033f2",
      "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "98f04f8a-9585-4fd5-8d43-76017155bea1",
      "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "70d96098-0f55-4e16-992c-be6c3a980774",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a668fb5-713f-4f17-a714-036e2619db23",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "06ce494e-0cd3-41b0-9e56-dce8856b1358",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "76dfc474-4615-40cc-a801-de9918c98c08",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "219063af-3d4c-4860-813d-82b2d93c878d",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b380b472-9566-48bd-8aa2-0753fa61c6d7",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b0d8d1ee-610c-4325-a7d3-46d6549c223b",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d20d5ae5-b4f7-4f4e-9b50-93c17f670657",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c2ecb333-6676-4870-9cae-c61d06eff3aa",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6d6438d0-046d-4596-b326-8a033723b6f3",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e4e694bb-cdc5-48f6-9a44-489b38a1b197",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "351c0f76-fee0-4c15-9b5c-f4a045d26305",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "389c1844-7b07-446c-8446-267effcb6e76",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "dd4942ff-b899-4c3b-82b2-711eb230dd35",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "91606754-093f-446e-ba0b-ea8325029617",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3af13fb3-9c74-418b-b693-5eb3f23b426a",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7470c055-97b9-4677-9e47-d97aba8c349e",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6c28d4fd-7e18-40d8-a474-58cc42d258be",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8333de08-9c32-4841-821a-cc008a0ca5ea",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "23cae772-1476-4c54-b790-b1e810c149ab",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bd7ee6ed-8916-451a-9558-3a7742aced96",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a1dbd6a-45e9-4312-9187-f02d56679c01",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "27cfcc25-f0d9-42a5-a665-6599db00cd0a",
      "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "511f81e3-9fdc-41b7-8e6b-f443a39ee16f",
      "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "2be6d86e-9584-4785-8a41-79c6d57ab338",
      "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "5e6e9a1e-5030-4153-9670-c08e46ea25bd",
      "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "877e43c4-a7bf-4522-b42e-ab00f9c5ec7f",
      "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "bf18779c-5565-433f-8ef8-693dd8b2c6ca",
      "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "9d084694-fb4b-44aa-8f78-f2ea8cb26856",
      "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "9799e047-74be-4a70-b3f0-ca1bf8c2fd8e",
      "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "a017ff5b-66da-4ca5-af26-df57db2fa139",
      "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "0b67f86b-94df-4927-a5fc-42ffbb5898dd",
      "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "05284a55-4193-485c-9204-9ef3cd2b6bc4",
      "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "9ce650e6-b00e-443d-81ff-f43ecfd69dbb",
      "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "7b6fc014-b65b-48ef-9ed6-b64ca128723d",
      "parentUUID": "3365f14c-d15a-4846-91d1-6ac0144d1e70",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a75ca09-adbe-45e6-996f-781c173a4159",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8f333683-661c-49a9-bef2-028acc558c64",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "83b86891-94cb-4f70-8a70-4933c9bc94a5",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e2852617-4d16-4e43-83d3-85687c25f47c",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6edcae12-bf62-4a92-8ceb-29a88ed54aa5",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "84167a30-91cd-4337-a1a1-8793ced131b4",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "221647c8-ef54-499b-9d84-a45250baafe1",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e7c5d2fb-bf4a-4ffe-8c51-84a2c04c0769",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "06ed2df1-ca84-4212-8708-3db09ba42329",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bd27a986-0d22-49c6-8447-e6b85e5398f6",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea6f5a6a-af0c-4e87-811e-e3816b7e7bb7",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1e98cf1e-31b3-480b-bcc6-49d2eae7a7b6",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0573b054-12d5-4d07-b60e-b1cadecbfcde",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "44cfc5ed-9e71-4d2a-8b8c-f89c5072a1d8",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1b28d2d5-3765-43ce-b370-bcbd7452a955",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d5f8d627-249d-43ca-bcff-b9f966e43d02",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "37e61bc5-0dbb-436e-bffc-cf67e4b919c7",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f74b5ef7-bdae-4b18-ac08-1ef511578295",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d2a45ffb-9ba4-43f1-87c6-27f6e22fd63a",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "06db8918-caad-4b24-9e0b-3c896533aba8",
      "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a694b31f-a3d8-41ec-bf2d-37825556830f",
      "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cdb36049-58de-46c5-b59c-752a8a5f677e",
      "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "186c2dc5-560f-4389-b687-728873df8075",
      "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e9c04623-fa04-402a-9892-bebcfb20b7a6",
      "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2fbd2edc-e455-4bdc-8996-b74f9ff8a65a",
      "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 163,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c3a73e9c-8250-4f15-9e1c-84cfe5375319",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "4f06f2f1-3023-47d3-8fa6-ba5ba4bfd32c",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 79,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.MAXIMUM_SESSION_SIZED_REACHED<br>                );<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4af36b6d-fd0e-42f7-bc49-8bedb492c92a",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "2fd9e0d4-34cd-472d-93bd-d2d7e7607c53",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "2e6586e1-c0fe-4a60-8544-adc3001ebec1",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4c3dc58f-5fda-4d90-b343-6de9fe4e39de",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3ccd84e1-a990-4bce-8ed0-b2211720c77f",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4d348876-1754-42f7-940d-fa348bbd40ca",
      "parentUUID": "45ea8236-15bf-425d-877c-89fc1f7fb7ef",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b5a978b7-c32a-454b-ad57-f2a2074809e4",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<br>            <span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "08d2cce8-1907-496f-ab3c-84798a8107cd",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2,<br>                    messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                rm2.wasSuccessful.should.be.false();<br>                rm2.failedRequestReason.should.equal(<br>                    constants.messages.TEAMS_ARE_FULL<br>                );<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5a4bf898-5817-4d2c-a96c-3f1be570abf1",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId,<br>            <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "69f93c50-61e9-429f-aac1-fb5818c1bfcf",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "00ec666a-b370-41c8-a50e-ec636648a47f",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9a9ed6d8-d9c7-487a-8941-eb63f7ee8a4f",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "60c67293-804d-4c2f-b8c0-b436419a3114",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(<br>                    message, messageConstants.CONTESTANT_JOIN_RESPONSE<br>                );<br>                responseMessage.should.not.be.null();<br>                responseMessage.wasSuccessful.should.be.false();<br>                responseMessage.failedRequestReason.should.equal(<br>                    constants.messages.USERNAME_TAKEN);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "53e87305-e6af-401a-a36a-736425a3d50a",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "75a90387-92e7-4c52-b7a6-186fe3ec221c",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3c78571e-236e-4372-9c49-1b32a8899cef",
      "parentUUID": "7f6b3ea6-45f3-42db-8573-31847450fab0",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equalOneOf(<br>                    <span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ef12decb-3e39-4c04-a724-7799d0442e19",
      "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><br>                        done</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>                        s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>                        s.maxTeams = <span class=\"hljs-number\">1</span>;<br>                        s.teamSize = <span class=\"hljs-number\">3</span>;<br>                        s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br>                        <span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>                        helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>                            <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>                            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>                            helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId,<br>                                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                                        <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                                        <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                                        should(t.teamLeader).be.null();<br>                                        done();<br>                                    });<br>                            });<br>                        });",
      "isRoot": false,
      "uuid": "1262a8b3-b5c1-4a1e-af36-a6862b7bb251",
      "parentUUID": "d929a4fa-0e09-4991-8de0-97c0ec925fef",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "523aef36-761f-4693-a741-cea96470bac1",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>                should(t.teamLeader).be.null();<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e8505890-c347-4bdd-aaf3-b5783a88e53c",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3da591a9-efa1-4f41-97b3-8650883adf98",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>                rm.should.not.be.null();<br>                rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "08dd3366-a143-428e-a2b3-a01122ff61c3",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "efd2c247-3cb0-4df5-b8aa-5036f7a44aa2",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                rqm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    rqm.contestantId = cc1Id;<br>                    cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE,<br>                        rqm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "29fa32d5-fb36-41b0-ac83-d8b45efa6ef0",
      "parentUUID": "17c7ce29-953e-4dd6-be25-c30acec20fac",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "321bd6e7-2819-42dd-b365-894cbd1c82c4",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                        messageConstants.CONTESTANT_BUZZER_PRESS<br>                    );<br>                    bpm.sessionId = sessionId;<br>                    bpm.contestantId = rm.contestantId;<br>                    cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                        bpm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                                m, messageConstants.ERROR<br>                            );<br>                            em.should.not.be.null();<br>                            em.error.should.equal(constants<br>                                .messages.BUZZER_PRESS_NOT_ACCEPTED<br>                            );<br>                            done();<br>                        });<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6a2b8d2e-546b-48f3-99e8-a09e5ea0b506",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9a1c03a9-d547-4ae8-91ad-31978c5d49e0",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "acd969c7-d83b-4267-931c-ef3e269058ec",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e0bd8f06-d6ca-40d0-8fe9-18367bf78284",
      "parentUUID": "ae34a330-b74d-4315-b852-14ff52858718",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "18447348-7341-43c1-a07f-d208abbf67ed",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0f06ce37-64e2-4b0b-a654-01f34ed75084",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8f963a6d-5159-4614-9533-6bd67c44e0f1",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>                session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<br>                    <span class=\"hljs-string\">'New team name'</span>);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "82d0ac3c-ddd0-426d-8413-13dcae1e8001",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "12436ffb-96c8-4a3d-ab76-2705c07f1d00",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "63f585cc-0529-448c-acdd-a90ee67aa098",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "36a25559-aff5-4949-8e32-0433446976a6",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "da6c5634-301c-495e-bc30-3e34f6632868",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                em.should.not.be.null();<br>                em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>                done();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7de0c7df-858c-408c-88fe-3fdadfe79156",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c3da9bd6-c210-481d-8a0c-6121cd14da18",
      "parentUUID": "3b1ac800-2cf3-4499-9163-f1904f33705a",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "60c2d306-e758-49f8-bac6-752678ca1d27",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "dc391add-7a48-49b5-8d32-59ef73b7e2b5",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d7bc2e67-ad74-4cbb-b617-c3b59813cdaf",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "443366f2-2544-42b6-833c-9f0bc9972d54",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3f1a7d8b-5271-49c1-a6e3-a4db7beb510f",
      "parentUUID": "46df14ce-9435-41b4-b3a2-867b8b54cb27",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "da415c05-8d12-423e-aac5-ce51be074d95",
      "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "2814668b-eb9b-427d-9c45-6279ba0d69ab",
      "parentUUID": "fa3d1a20-9242-4428-9256-567c482b8b02",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cc20cf48-1807-4f4b-bafb-9c0171c1abf5",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "fc1915fa-04b6-4b71-b263-cf272c959dac",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "41c03533-00e3-4a04-822f-bd2d04da75a5",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8533416d-ae7b-4ee1-96aa-4d5336d7c369",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "73b5142f-854a-4759-9d94-977c95477612",
      "parentUUID": "370bdc0e-54de-4a1d-9e9d-7e0770085aeb",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "523e6f64-826e-4083-a62d-25c1c74ebd89",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "270c20db-9473-42ad-b186-b968cb0c9cfc",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6a0425a7-60b6-4529-8f72-5c020d01786a",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "945f2cdc-ab8e-45e0-bc46-9bf27ce91b39",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "03dc5609-af59-48df-8f1e-070a2e54b012",
      "parentUUID": "7c6350fb-5168-4326-8d1b-253c1d1ff143",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d9f9136a-527a-4bb5-94d6-f41bf0ad107c",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7172b0bc-201f-486d-b505-38f4f10efdec",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5e96acee-54ba-4bd5-a88d-b739a084dfee",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "0af9ca24-4377-41de-bb3d-24fff6845b8d",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "3cdc3712-778f-4602-b481-7acfd1b583e4",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c3cbfdac-74ab-4e65-bcdd-a59424b3fcbe",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7c717b81-fbd0-4406-82b2-e76abbc709fb",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5ae6c38b-9b96-429b-9bf5-bcd29def0a51",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "946c0219-cd1a-4953-8de0-fb429bd632d6",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c216bc9a-78b3-45df-bbb6-9324c799f908",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8fe3ed97-12e4-4d70-9d55-fe0898105be4",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5e5214f3-f85d-4ec4-8625-17aecb58cf81",
      "parentUUID": "13141612-a78a-4393-8031-5ef1e54aa7e2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "62123406-d7ef-4378-b9f8-920168761e9d",
      "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "4ab58f29-5199-42dc-a741-128634c8dcc0",
      "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "38542b79-38bf-4e9f-aa9c-974796f8ebe7",
      "parentUUID": "c1dbb1c5-821e-4d27-84d3-c0cc109da305",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "0bbd743e-29cf-4e87-a2e0-7ff56382ad0a",
      "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "d657b4fc-ee9f-47b0-b516-94a7f6109933",
      "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "417c7373-f0d4-489f-9cc3-ad7a78265e54",
      "parentUUID": "7412c060-6669-4c25-9685-871f0fd28594",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "66ff593e-dcca-4486-98f3-1f510ec471f4",
      "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "dca21664-5a9b-4b9d-a430-7df0a40f4255",
      "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "277f45fc-8b98-432b-823d-16fa3adcfadf",
      "parentUUID": "f6b68e62-62b3-48d6-b09b-c73bb0e1c35f",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "3094e4e0-21e2-4e8d-b757-166600ea0330",
      "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "38d4e317-4db4-4c29-bf2c-971a383bba93",
      "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "6e0525fd-c1f5-42d4-a2dc-b3aa3067b97d",
      "parentUUID": "d7b36b06-e218-46cb-a397-5445a276d243",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b205ae1e-1a7e-4f79-b9cc-1f94ba652f0c",
      "parentUUID": "3365f14c-d15a-4846-91d1-6ac0144d1e70",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e6b2ec31-9dcf-4555-a904-545829338684",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c2f3bd7b-7696-4e8a-ada5-760b8f646a13",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bdf34e2d-30ad-43aa-a189-813ba221b996",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e71694ef-fcf1-40fd-8bea-70a0c0cffd62",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2b4d420c-8cb6-4cd9-9b14-00585fb63068",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "014ab0dd-a5c6-4982-b6e0-0501aaac3d8f",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "67c363c5-bc08-4738-874d-51bbb3495c09",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "07c4d663-893d-45c4-838b-35073e8bc137",
      "parentUUID": "ae8cc22b-7bfb-454b-9f82-275d598bd0b8",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "be45527a-f181-4ff0-93b0-9eb862f51303",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "63063e21-86d1-450f-8000-c1be1190e734",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f1422462-01ff-4639-adab-7f1118376105",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7344bdb0-ee80-4fb3-b572-ef65e99dbe34",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "51accfab-96f6-4099-ac23-55c6708edb8f",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "37039182-9af1-455b-8c75-2cc84ee2fd19",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b9689739-aedb-4978-ab1d-7493f2fe0249",
      "parentUUID": "1c2383cf-887e-438f-885b-46c4b9702804",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "115dfa52-6b6a-4317-b184-5dba46538f3c",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "206e337c-2bad-40f7-b7a7-c6692e8d6edc",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cc2a1591-5e8a-4034-af0b-5191cc6c0954",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c4121c10-fb23-4b28-85c1-673479cc0cc6",
      "parentUUID": "eb9ae28c-2736-4620-accf-08d681b5104b",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "23a5bc8c-4fbb-4388-bf49-e24765b44579",
      "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a86432b-a957-4724-a423-4ea6ec323abe",
      "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 39,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a9694594-5f9f-4197-a712-d8d5ab1245c8",
      "parentUUID": "c09417a1-4936-48d3-9ac5-5dec509dcabb",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5a26caf3-61ac-4feb-b438-38e3b44f2a5e",
      "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "21623716-6e63-4d81-b170-552168778395",
      "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9a26766f-dbc5-4a2d-876a-d2552c0210d3",
      "parentUUID": "640fa371-98d7-40f1-8137-dcacffa12a16",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}