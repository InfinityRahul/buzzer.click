{
  "reportTitle": "buzzer.click",
  "stats": {
    "suites": 36,
    "tests": 119,
    "passes": 119,
    "pending": 0,
    "failures": 0,
    "start": "2016-09-28T03:55:33.564Z",
    "end": "2016-09-28T03:55:39.317Z",
    "duration": 5753,
    "testsRegistered": 119,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "contestant",
            "suites": [
              {
                "title": "join",
                "suites": [
                  {
                    "title": "as individual",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 209,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "43a04fdc-154b-4ce9-b8a6-d9a13fdb7e71",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 49,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "41113f18-c221-4125-9cad-63c087b684bb",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 85,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3571bfd5-21f8-4090-8410-9b9c63fa7f5d",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1378901f-e034-45fd-b5eb-5d0b103c027b",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 47,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "33c89475-728c-41a3-b578-7c4f02095d5a",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 51,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2d024e85-11fa-4dac-879e-749a79739e77",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "deda5e39-f1d3-47f7-b7e4-056386f63355",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 66,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7a96f7a5-4975-451c-8b99-ef03ed3f6fe6",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 209,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "43a04fdc-154b-4ce9-b8a6-d9a13fdb7e71",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 49,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "41113f18-c221-4125-9cad-63c087b684bb",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 85,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3571bfd5-21f8-4090-8410-9b9c63fa7f5d",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1378901f-e034-45fd-b5eb-5d0b103c027b",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 47,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "33c89475-728c-41a3-b578-7c4f02095d5a",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 51,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2d024e85-11fa-4dac-879e-749a79739e77",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "deda5e39-f1d3-47f7-b7e4-056386f63355",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 66,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7a96f7a5-4975-451c-8b99-ef03ed3f6fe6",
                        "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 8,
                    "totalPasses": 8,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 610
                  },
                  {
                    "title": "with teams",
                    "suites": [
                      {
                        "title": "when team leader selection method is RANDOM",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 64,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "d4802b17-4f07-4755-8425-e83c7c9b527e",
                            "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 57,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "0a3892f4-7ca0-4c2e-8bf1-ebb9d53ad1f4",
                            "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 64,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "d4802b17-4f07-4755-8425-e83c7c9b527e",
                            "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 57,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "0a3892f4-7ca0-4c2e-8bf1-ebb9d53ad1f4",
                            "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 2,
                        "totalPasses": 2,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 121
                      },
                      {
                        "title": "when team selection method is PLAYER_CHOICE",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 37,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "5741a984-24e2-40e9-ad84-73b98f1cc7de",
                            "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 57,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "1322c412-e0df-4615-b309-3c3fbf4d1eb6",
                            "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 145,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "6b0af377-4cc4-49be-8fe1-aa0a7c279e17",
                            "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "d840e860-2188-4136-82d1-21a63454dd56",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 37,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "5741a984-24e2-40e9-ad84-73b98f1cc7de",
                            "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 57,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "1322c412-e0df-4615-b309-3c3fbf4d1eb6",
                            "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 145,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "6b0af377-4cc4-49be-8fe1-aa0a7c279e17",
                            "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 239
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "abd3b333-b700-4ba7-86d9-dc02f3e3bb4f",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 52,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "305fde8f-7229-43cf-9094-6cbe01528602",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 61,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f8ffa669-ca25-4be3-9d11-658fd20db50f",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5389d489-3577-416c-aa48-bd4f56d72968",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "452546c2-2f32-47af-974f-e85ab2b53432",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "de89e25f-5e8a-402d-8fc8-426f4e95b18e",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "56b6ba63-523c-4e5c-9551-e8028a66d46d",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 73,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "540395dd-08b8-412c-8806-54ea7c60b73c",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 35,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "906f9488-3cf5-44d6-90bd-8581cfe24462",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 38,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4553fba8-95f1-432e-a2ab-1d2c6a496ce0",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "abd3b333-b700-4ba7-86d9-dc02f3e3bb4f",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 52,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "305fde8f-7229-43cf-9094-6cbe01528602",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 61,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f8ffa669-ca25-4be3-9d11-658fd20db50f",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5389d489-3577-416c-aa48-bd4f56d72968",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "452546c2-2f32-47af-974f-e85ab2b53432",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "de89e25f-5e8a-402d-8fc8-426f4e95b18e",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "56b6ba63-523c-4e5c-9551-e8028a66d46d",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 73,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "540395dd-08b8-412c-8806-54ea7c60b73c",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 35,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "906f9488-3cf5-44d6-90bd-8581cfe24462",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 38,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4553fba8-95f1-432e-a2ab-1d2c6a496ce0",
                        "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 10,
                    "totalPasses": 10,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 476
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "e872c8d2-f170-4ed1-a784-c814474e384b",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6a8c520e-4501-4198-b4b7-cea7f9dbddaa",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "25cf05f9-1296-468b-b815-524aa5bc6fd4",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "870d8962-d0ab-4fad-8bab-bebb8dee4330",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 70,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "06366aad-8000-49b3-b4f2-2649e36edeb7",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6a8c520e-4501-4198-b4b7-cea7f9dbddaa",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "25cf05f9-1296-468b-b815-524aa5bc6fd4",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "870d8962-d0ab-4fad-8bab-bebb8dee4330",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 70,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "06366aad-8000-49b3-b4f2-2649e36edeb7",
                    "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 247
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fc05f137-f7fa-40a9-b2d4-c347bf23f0c7",
                    "parentUUID": "c6303f04-e7f5-4043-b4f8-4f463fac4bf9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "c6303f04-e7f5-4043-b4f8-4f463fac4bf9",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fc05f137-f7fa-40a9-b2d4-c347bf23f0c7",
                    "parentUUID": "c6303f04-e7f5-4043-b4f8-4f463fac4bf9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 47
              },
              {
                "title": "team leader inquiry response",
                "suites": [],
                "tests": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d7e796ba-48eb-4a9b-81ac-33699b03e2d4",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7c449d3d-4eeb-4c64-9131-de533028b261",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d6591798-065e-4bd2-ad03-709062e1120f",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0d261223-fd76-463b-ad61-af6405379890",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "13ed6916-d795-4180-93e7-efdcf6d13a3f",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 66,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b40538ae-4ac6-4202-8a20-50c5688cc24e",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d7e796ba-48eb-4a9b-81ac-33699b03e2d4",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7c449d3d-4eeb-4c64-9131-de533028b261",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d6591798-065e-4bd2-ad03-709062e1120f",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0d261223-fd76-463b-ad61-af6405379890",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "13ed6916-d795-4180-93e7-efdcf6d13a3f",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 66,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b40538ae-4ac6-4202-8a20-50c5688cc24e",
                    "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 259
              },
              {
                "title": "buzzerPress",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "92855185-8062-4e95-82cd-5aa20cb14728",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0e93a867-5940-4115-85b4-5ec57d6616a6",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2eb12e75-92ff-41de-8fa2-30949220eb73",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "608f9ed4-9fe7-4a55-a16a-61bb60371572",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c5853848-360e-4f04-a23a-6dadfcce2dba",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "40b36711-36ba-4520-9f38-a5f588961772",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "92855185-8062-4e95-82cd-5aa20cb14728",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0e93a867-5940-4115-85b4-5ec57d6616a6",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2eb12e75-92ff-41de-8fa2-30949220eb73",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "608f9ed4-9fe7-4a55-a16a-61bb60371572",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c5853848-360e-4f04-a23a-6dadfcce2dba",
                    "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 205
              },
              {
                "title": "team name change request",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2a43cd9f-f34a-419e-a37a-e8035d2dbfca",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cd3c04dc-c614-4d9c-9c0e-bc147dd3f2a9",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b1780ca3-257b-4e53-8c67-e22410454e49",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "556a24a5-16fd-45bb-beff-6a204d9e0330",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ddd355e4-966f-474c-b148-5a0f03f1e13a",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "727a06fa-d35d-4533-a7af-86cdcb17f06c",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b45180d6-2bb1-4ce9-820e-bf2156b28c49",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "751d90a4-c598-43f5-8dfe-bf09455510b5",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c633f235-f1fc-43db-bc12-179cff9c81ec",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b49eecb3-224f-42df-94a3-e3e9654e5917",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "b4c43061-5821-49c9-8788-74b717344177",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2a43cd9f-f34a-419e-a37a-e8035d2dbfca",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cd3c04dc-c614-4d9c-9c0e-bc147dd3f2a9",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b1780ca3-257b-4e53-8c67-e22410454e49",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "556a24a5-16fd-45bb-beff-6a204d9e0330",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ddd355e4-966f-474c-b148-5a0f03f1e13a",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "727a06fa-d35d-4533-a7af-86cdcb17f06c",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b45180d6-2bb1-4ce9-820e-bf2156b28c49",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "751d90a4-c598-43f5-8dfe-bf09455510b5",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c633f235-f1fc-43db-bc12-179cff9c81ec",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b49eecb3-224f-42df-94a3-e3e9654e5917",
                    "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 10,
                "totalPasses": 10,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 362
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2e5d23fc-b339-4b97-a9e6-8c4dec8bdb42",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8f5642d2-c7e3-4d48-9dfe-a294b19c7a38",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "eebb18a3-d5ab-4e20-9158-1afd3672ebe2",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f4dfb8dc-b5a8-413d-9ec8-487ff5503eda",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6c291fef-866f-4797-93e2-458d35ec0bc2",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "59546da7-1137-473c-bc8d-615bc6ed916d",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2e5d23fc-b339-4b97-a9e6-8c4dec8bdb42",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8f5642d2-c7e3-4d48-9dfe-a294b19c7a38",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "eebb18a3-d5ab-4e20-9158-1afd3672ebe2",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f4dfb8dc-b5a8-413d-9ec8-487ff5503eda",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6c291fef-866f-4797-93e2-458d35ec0bc2",
                    "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 184
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
            "uuid": "b3990def-0447-4de8-a2e7-42cac8d39ee1",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
        "uuid": "288955ac-e3d6-4be9-8a61-108b1a1fb7df",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "host",
            "suites": [
              {
                "title": "create",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "27a207b1-6334-4319-a595-44dc58845215",
                        "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "bd81dc79-1e8b-4241-9b45-5186e350549b",
                        "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "12c11a4c-b027-46cc-897d-fcc8ce57a356",
                        "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "8e7f952b-1c03-456d-9259-d675a507adb0",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "27a207b1-6334-4319-a595-44dc58845215",
                        "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "bd81dc79-1e8b-4241-9b45-5186e350549b",
                        "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "12c11a4c-b027-46cc-897d-fcc8ce57a356",
                        "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 48
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "2f41f52c-6244-450c-95c5-df3697a56aea",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 27,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "06c8a173-954c-47ef-89a6-46d638de21b3",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 31,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5d28dfb9-a442-40ef-8d1d-dbefec415427",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6e077825-8c6d-41d1-babf-ff9e19f2ec5f",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b8e596ba-f9e3-4d1d-8793-7f1a6b0afff5",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 49,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d663a023-40c8-44ee-a329-da01d1a89e80",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "77866aa5-73ae-494e-9ca1-d855a1047892",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 27,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "06c8a173-954c-47ef-89a6-46d638de21b3",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 31,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5d28dfb9-a442-40ef-8d1d-dbefec415427",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 33,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6e077825-8c6d-41d1-babf-ff9e19f2ec5f",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "b8e596ba-f9e3-4d1d-8793-7f1a6b0afff5",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 49,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "d663a023-40c8-44ee-a329-da01d1a89e80",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 28,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "77866aa5-73ae-494e-9ca1-d855a1047892",
                        "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 6,
                    "totalPasses": 6,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 223
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "08c62227-73c6-4925-85f0-b9ba2e1b29cd",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "complete",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5207c1ad-66dd-4879-ac99-51000a455199",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3d8edb07-f484-474e-aabe-6b8553af8e7f",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "aecc6916-cf39-400c-8880-3971aad82952",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "39a79b06-9bac-4ad9-b2a2-1a4dc8c16926",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7fdc8961-5795-4efc-b076-d68cbd805c96",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "41afcc90-c577-4196-a468-b5364656a9db",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5207c1ad-66dd-4879-ac99-51000a455199",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3d8edb07-f484-474e-aabe-6b8553af8e7f",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "aecc6916-cf39-400c-8880-3971aad82952",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "39a79b06-9bac-4ad9-b2a2-1a4dc8c16926",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7fdc8961-5795-4efc-b076-d68cbd805c96",
                        "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 103
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "ea607766-f744-4033-b2fa-aa5c182e6e4f",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "buzzer",
                "suites": [
                  {
                    "title": "action",
                    "suites": [
                      {
                        "title": "when accepted",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 53,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ec3e1c5c-42d5-4ffb-b087-559d69828737",
                            "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ab8f16cf-57fc-4505-a1cc-471cc81526b9",
                            "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0d6905ae-299f-4250-ad5b-aee6920b430d",
                            "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 53,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ec3e1c5c-42d5-4ffb-b087-559d69828737",
                            "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ab8f16cf-57fc-4505-a1cc-471cc81526b9",
                            "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0d6905ae-299f-4250-ad5b-aee6920b430d",
                            "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 136
                      },
                      {
                        "title": "when rejected",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b4a33256-8e55-4901-9f8a-72409bcba094",
                            "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "76747182-c505-4f61-bf55-0f86aae44bbe",
                            "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "d98bfacd-c40f-47ac-b4c6-ed6e29985f10",
                            "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b4a33256-8e55-4901-9f8a-72409bcba094",
                            "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "76747182-c505-4f61-bf55-0f86aae44bbe",
                            "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "d98bfacd-c40f-47ac-b4c6-ed6e29985f10",
                            "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 124
                      },
                      {
                        "title": "when reset",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 52,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1a297722-f7c4-48ae-8d92-25c8b99dbd0c",
                            "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "f8626d38-b048-4a25-b128-e676b00e32bf",
                            "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "244bc0f9-140e-403a-ae6b-30074f909ca4",
                            "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 52,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "1a297722-f7c4-48ae-8d92-25c8b99dbd0c",
                            "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "f8626d38-b048-4a25-b128-e676b00e32bf",
                            "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "244bc0f9-140e-403a-ae6b-30074f909ca4",
                            "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 133
                      },
                      {
                        "title": "when disabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "20d733cd-ab49-4fb3-981e-4b018b861d9f",
                            "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 45,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "81c93a05-7c3f-4988-887a-efa1494b4251",
                            "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b4f7e44c-e143-482c-a9b2-db8f98275447",
                            "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "20d733cd-ab49-4fb3-981e-4b018b861d9f",
                            "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 45,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "81c93a05-7c3f-4988-887a-efa1494b4251",
                            "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "b4f7e44c-e143-482c-a9b2-db8f98275447",
                            "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 104
                      },
                      {
                        "title": "when enabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "6366bf8c-d3aa-45de-8257-78305f4d00a0",
                            "parentUUID": "94f50b78-cd52-4929-a0f0-c781cf711770",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "94f50b78-cd52-4929-a0f0-c781cf711770",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "6366bf8c-d3aa-45de-8257-78305f4d00a0",
                            "parentUUID": "94f50b78-cd52-4929-a0f0-c781cf711770",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 1,
                        "totalPasses": 1,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 26
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "65f873fe-4525-4dd6-9d0e-7480915a419b",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "30a56081-89e8-47d9-8ef5-2b8a4bd53b8e",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "890eee36-f4fd-4ae5-9c5c-be3a04301a02",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 36,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "c8cd1ccc-7a62-4628-876d-52173c626299",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "be2bb872-6f79-4a1a-8c8f-198bc3bbec8e",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "64a03241-3ba7-4747-9711-7262ac635aad",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c28b8657-7ad3-47cb-801f-470a378472db",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ecd895c8-b5af-4722-8e47-55dfd3db65b1",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "047bb919-a39b-4d27-a624-bf3aff1baab0",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 40,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "61ea6368-e841-490d-b330-c8ad389e1e66",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 37,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f84abdee-48d4-4baa-8f63-50c8d59fea26",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 38,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "428d8471-6632-4de3-ac85-916bfd5df972",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "65f873fe-4525-4dd6-9d0e-7480915a419b",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "30a56081-89e8-47d9-8ef5-2b8a4bd53b8e",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "890eee36-f4fd-4ae5-9c5c-be3a04301a02",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 36,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "c8cd1ccc-7a62-4628-876d-52173c626299",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "be2bb872-6f79-4a1a-8c8f-198bc3bbec8e",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "64a03241-3ba7-4747-9711-7262ac635aad",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "c28b8657-7ad3-47cb-801f-470a378472db",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ecd895c8-b5af-4722-8e47-55dfd3db65b1",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "047bb919-a39b-4d27-a624-bf3aff1baab0",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 40,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "61ea6368-e841-490d-b330-c8ad389e1e66",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 37,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "f84abdee-48d4-4baa-8f63-50c8d59fea26",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 38,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "428d8471-6632-4de3-ac85-916bfd5df972",
                        "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 12,
                    "totalPasses": 12,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 388
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "3db0649c-8e29-425a-b140-067409470f2d",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "team name change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0f6e7138-882a-4b54-abf4-dad0d42e4de0",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "82a9a49a-f1c6-4cb6-b21c-7ee9d9215e38",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0cbde373-0e27-44bb-bb70-b0376b0b6b5d",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9120b2bc-ee15-47b9-951d-da1477fb01d4",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7015eab4-77a0-4787-8884-5782c579f150",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e66893a7-c1b9-4ba7-b488-e5b9a4a79a08",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "375cb6e2-3b6c-4ab1-a8c2-a9820fb85981",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b4516a67-4866-4acf-b5ac-01e4e881c308",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0f6e7138-882a-4b54-abf4-dad0d42e4de0",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "82a9a49a-f1c6-4cb6-b21c-7ee9d9215e38",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0cbde373-0e27-44bb-bb70-b0376b0b6b5d",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9120b2bc-ee15-47b9-951d-da1477fb01d4",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7015eab4-77a0-4787-8884-5782c579f150",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e66893a7-c1b9-4ba7-b488-e5b9a4a79a08",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "375cb6e2-3b6c-4ab1-a8c2-a9820fb85981",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b4516a67-4866-4acf-b5ac-01e4e881c308",
                    "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 163
              },
              {
                "title": "team leader change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "490b6b88-3f6c-4f3b-8a60-bae7502dab1b",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "10aa5a24-5aa4-4177-b167-1293da23d5c0",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "02608ccd-7925-4623-b9a6-aca7b0010f4a",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "76cc9e5c-8669-43dd-9e2f-5869a933a99d",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93785bbe-5c8e-463b-bf8b-784327382b50",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 62,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "47e1be04-39c3-4d95-930b-68c284e90bee",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "af5dea8b-b809-4ce2-b582-4d89346c5a92",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "490b6b88-3f6c-4f3b-8a60-bae7502dab1b",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "10aa5a24-5aa4-4177-b167-1293da23d5c0",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "02608ccd-7925-4623-b9a6-aca7b0010f4a",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "76cc9e5c-8669-43dd-9e2f-5869a933a99d",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93785bbe-5c8e-463b-bf8b-784327382b50",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 62,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "47e1be04-39c3-4d95-930b-68c284e90bee",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "af5dea8b-b809-4ce2-b582-4d89346c5a92",
                    "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 410
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "870de285-968d-4c9a-a1fb-2b99a0570bc0",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5bde0592-eb0f-4453-b4a9-aa493ee03ee0",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "19a15546-d26b-4665-8c94-042271b3778f",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8ebe6b39-2683-4420-a5b1-e9d17e947b83",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "870de285-968d-4c9a-a1fb-2b99a0570bc0",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5bde0592-eb0f-4453-b4a9-aa493ee03ee0",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "19a15546-d26b-4665-8c94-042271b3778f",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8ebe6b39-2683-4420-a5b1-e9d17e947b83",
                    "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 77
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fc342241-a09f-42c5-b69b-2003038bd35c",
                    "parentUUID": "13e98c78-f3dd-4aab-bddb-be715cf3a911",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "13e98c78-f3dd-4aab-bddb-be715cf3a911",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "fc342241-a09f-42c5-b69b-2003038bd35c",
                    "parentUUID": "13e98c78-f3dd-4aab-bddb-be715cf3a911",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 37
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
            "uuid": "bb7f6287-30ae-47e4-ad76-6c014b5b4489",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
        "uuid": "f783cf37-3959-4b09-8d34-5907d7e2bc2a",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "observer",
            "suites": [
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "18fa302d-206d-458b-af2d-eb85f8222cb7",
                    "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f2f9896e-ba3c-4780-9833-3889838550ac",
                    "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9f789688-2033-47e6-bdbd-c33b3874662c",
                    "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "18fa302d-206d-458b-af2d-eb85f8222cb7",
                    "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f2f9896e-ba3c-4780-9833-3889838550ac",
                    "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "9f789688-2033-47e6-bdbd-c33b3874662c",
                    "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 96
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e16965d0-ed68-4e80-bf58-f51d8d416d67",
                    "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d154d0b4-f04b-4467-9b49-e5199588a63f",
                    "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e0ff2190-1515-4426-8767-e8d319337209",
                    "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e16965d0-ed68-4e80-bf58-f51d8d416d67",
                    "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d154d0b4-f04b-4467-9b49-e5199588a63f",
                    "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e0ff2190-1515-4426-8767-e8d319337209",
                    "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 106
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
            "uuid": "06be03c7-4213-45ea-8368-33b5e964f249",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
        "uuid": "15913d91-f6c4-4082-8ebc-d22b682c51d1",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "81f3e554-df55-498d-9bd6-0494bfd9bd97",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 209,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c59fa28d-a4f9-4522-9559-fe3bd683daa5",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "ff2a89a2-2675-441d-bec4-1e7c0ff16adc",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 85,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e82d0182-b8b6-4f64-b634-947b6d2092c8",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "d8b3717a-a03b-4b7a-b4c9-bbb0d41de752",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f25ad917-48d1-4ef1-a178-a1a42dee38e2",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1f569bfb-99d7-45bd-895b-032a45da7620",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8c1b12f1-9b26-4028-9345-7d0501e97777",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "caf122e8-7777-4b0f-9282-092695ab833d",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2ad8df18-37fa-49f7-9b32-0eae0781734e",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "4d4165ea-62c6-4133-bc2d-a0370da402d5",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f296af33-78ac-48fc-a0da-95dcd276fdff",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "64ac6329-b14b-49e7-8444-865009b60d14",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 58,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "9dd99e71-84c9-4253-82c8-c995719b28cb",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f2ddd5da-24d7-4cd6-9491-b71b81d9b766",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b1645b6e-363b-4b8e-b8dd-b03fac89a2de",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cb299c6c-3bc3-40ad-93ab-7cddd019b9de",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1fffa3b0-d18a-4c50-86f1-953e1e459a58",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "97ea47d7-b275-4c12-9a75-06d58df5c06a",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bfc6b88b-5ebb-43ba-b2d5-2993760fc392",
      "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2e086764-b94f-4070-9bca-a1004889860c",
      "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bd8c43c4-c43d-4379-ad08-550f235ebf19",
      "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b8b389c3-86ce-4530-a491-65c8bb2207d5",
      "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 145,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ed1afc33-cc49-42eb-970a-34b516cb2a10",
      "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d2474368-3cbe-4499-83c6-53c516faf7d8",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5429c037-4b1c-448c-a337-a7c25e85c8ac",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 80,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a0c91f4-772b-4d0a-b2e7-5a2d9df5dbbf",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 70,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3149c1d7-d09b-4e5d-9a64-5f3b02d4f377",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea55c2b2-b1d5-48b9-916a-9cac6a41a69b",
      "parentUUID": "c6303f04-e7f5-4043-b4f8-4f463fac4bf9",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9035067e-cda9-4b13-85c8-2582d4152c1b",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ab12fc5e-8ec0-4361-8de2-d2cde2b3c70b",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c87dbac3-6314-4a46-ad8c-638a8fb6c0fb",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e3abe86d-847a-473f-afbb-35955d749b0d",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3515bc5c-af4f-4bc5-8638-719aa9d35cbf",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0afdddeb-a640-4583-883c-d78525ee711c",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2749b5bf-bca6-4ebe-b0b9-11d21a778970",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "369f8c8e-da18-41a8-95a9-59dcc3682e01",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1a74e7f2-9c21-4a4b-a60c-b503b2352ade",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9b4d17a4-2297-478b-bcf0-0fdbad48ce7b",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "41fd23ee-25f2-4aa9-8e8c-790460f9a4bf",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "81f87a75-ccee-4137-a47f-9ec663e59a64",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bd36c171-04ae-42cb-a152-83d0fece1f4e",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1f0e4d67-6470-4f9d-9e1e-59ce3c82f481",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ebc2d548-306d-43e9-b52d-20b398f86099",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea5df6e7-cfcf-4094-be43-feaabde10041",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0da87cc6-bcfb-49d4-bf95-1e6b945f0ef8",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3ba0ccc8-0b0a-4e66-9837-71098ab8c5bb",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "81e5b0e2-cd3f-4616-bae3-60b096ae3aed",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5e6c18b9-a010-48d7-b6d3-9f48068bdfa7",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "91225553-99ea-4fff-b51c-b5cda944c664",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6c66ef46-6448-4149-994d-cc051a2ee75b",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "63c92641-489c-4e7c-9d6b-9d2a7e0c8e22",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4634e5e0-7da7-477c-af11-18840028f243",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "07fbde01-320e-4edb-8458-21e2ad937edb",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "37d15b8d-8dbc-43b3-9944-62c95194e0bc",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "8d64cb86-f975-4037-8ff6-8273b1c546b4",
      "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "fb69a9e1-a94b-4cc6-90d4-8e7ad0d8434b",
      "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "56b39416-dc18-4cc0-8709-4e44a8de5ae1",
      "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0680a07e-8ce7-42b8-a89b-a266764820a2",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f79edd54-9d53-4f43-ba5e-040967f61014",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "af4f5391-1660-478e-af8a-2572ea442d87",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9e6c4fa9-f2e6-4abb-8faf-e34619b59e25",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "73b87d36-334f-4528-a36a-2351d7cddefa",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "fd90c395-81c4-4979-b72f-978ba1e7a53a",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b2a6328f-ce8a-4092-b6c6-78216325cb3d",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6af94f19-d458-4466-81a5-679debe977df",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "dc8d513f-86f7-4194-8fc1-2cba85533647",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "08e51dec-fa72-4c08-ab0d-0692a0116821",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "71614675-a92e-4218-8ba1-7daf2a274fcd",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2d3327ef-a0b1-495e-9d7e-42a738412c5d",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "88fa6f64-f6f9-4fae-88e7-fe60575d1205",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c2e7e63d-1ad9-4113-aef1-d1b0f7ff3835",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "16cde6e9-1943-40dc-ab09-04b2c95e35db",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "46bf2936-aa64-4ef5-a95c-bd2c14a7d39b",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c82653e1-7d0d-4454-9fea-a15802315902",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "362a6b3b-b973-462a-a643-a7110b674df9",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "65354c92-baeb-4006-9800-29f3027daba4",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f375daff-16ef-414b-8b51-7375e6b6881e",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8bd66d28-a024-4226-9548-edae75726585",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8b976bbb-cdb3-4583-bc84-75729d4d2f74",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4f3f4700-8156-44a1-9ddf-c681e985dd3e",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "d334d969-90bf-4de5-8a9d-8303f4fa16a1",
      "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "78f5c13c-d7c0-42a9-b196-932086f59c5c",
      "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "590b5536-c435-4a46-a449-7c27d8f5ab92",
      "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "50f82c53-c0a0-4f5b-8c41-b0b4845e5671",
      "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "1b51ede7-6e58-4bc5-a2ad-26f926f2d3d5",
      "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "591689f1-34de-46ee-9096-e8a4257f0267",
      "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "16015270-b427-413e-9cda-0f8b87205f5a",
      "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "92a5dc5d-8abf-436f-bd60-f97b22141799",
      "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "e55419be-bcfc-44b4-aebe-ddea053b546b",
      "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "f4101e9d-a775-4ea2-bc96-2f030daa6edc",
      "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "35a80e2d-21e1-4cec-89a9-656bc737f177",
      "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "8598be62-63ee-4745-bee2-f1ff32b4b1e7",
      "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "25e60583-39f0-4e7a-be75-c15faaaa95f5",
      "parentUUID": "94f50b78-cd52-4929-a0f0-c781cf711770",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4f623fe8-061a-4e9e-a8e1-face88f820bc",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3af2eed3-4799-48a1-bebc-96c5d9f76d96",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9d1954bb-698b-487b-9ee1-e0a701eb5b05",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a74a1c6a-d8f9-4c98-ae2c-4fdebedc55b7",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d0bb2b43-12f8-4837-b95d-b0d9a5b0761f",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ed4bf49e-d3d2-4cf3-a848-8a00f8debfb6",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "817a7da5-1fcd-4632-b803-d6e80a05e60b",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "661b8f9e-5bb6-4467-9706-7d6966430d43",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "77574a96-e373-485e-9275-00d086815654",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f46eec44-07f9-4bc9-8a9f-7320d88e2510",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9b26b1e2-07d7-49d0-a18c-dbc59103f2af",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ff22f457-4cee-4438-9b88-3f4d43d11b04",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "190f90ca-f381-4ce8-a2a4-871671ef4365",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4b00644e-0df9-4064-bade-612e384f14ab",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "33e7a07e-f4cb-41e4-976d-41494b6bfb4e",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f39aee21-af75-44d1-a910-e24f0949cd5b",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c22ffa7a-08c9-4045-a449-15df320b19dd",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b71f4fe8-6dba-4a5f-94b3-a173f6daa96d",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "091a1e6d-71fb-422c-9231-9e8dbbafdd4f",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c4fe90bb-1e68-45df-8897-daf69b6f7d84",
      "parentUUID": "13e98c78-f3dd-4aab-bddb-be715cf3a911",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f1c5fa54-0f44-431b-9df2-31ea5bb0f1cc",
      "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "713b2fda-75ca-4a33-bbaa-40cbb79cd9ce",
      "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d13e7032-2e4e-4ab1-9237-6a65954c16ae",
      "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "28a8cef9-951d-4131-8849-49e1bcd0be11",
      "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c3a28153-e0b9-46df-8d91-7e02a3649c62",
      "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e06ae5f1-3c37-40c4-8a0d-4b95e513c1f3",
      "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 209,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8a197be8-ab86-439d-b540-b94546e27bfe",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "94318ece-bcd8-4041-9547-8500f8f03294",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 85,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "835711a8-ebdf-4429-a02e-0ae46aed5671",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "9906c63c-d84e-4304-ae78-0f1ca24171a2",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f8591a6a-9cfa-4884-a9bf-f312326c21cc",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7a70cd26-b703-44b4-bd56-7356b1d51266",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "16535100-8511-49be-9f81-ff1024832bd9",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5403a27b-2e7b-4eef-8908-f220ba25edb2",
      "parentUUID": "b957e290-e3f2-4fe4-8431-a02ffe29038f",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ece5f07d-303a-434f-9023-6391a68e3075",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "8b539011-bdb0-46bd-bca2-d679df3f1a03",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9db48fe1-caab-492a-a17f-b2718f90d79d",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "db815551-c329-4e9a-8acd-e7b99e795092",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 58,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "733f843d-b1ba-4412-bca7-d1b0cf1bc01c",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea8fc3ef-6c04-4e48-bdc7-bc38185edb19",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0013473c-aba2-4126-8917-037029372083",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "316f6a93-c01c-4887-91dd-a54fd3896c62",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "74359d87-e9b5-4659-ae99-476beb30a253",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6464ffe1-c4de-44c9-ac7c-fe12a2ab53a0",
      "parentUUID": "4b910c5b-11a3-4395-a02d-6e4298dd14e8",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea4c4c7b-0fcb-49e9-9284-698840f852b1",
      "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ad982555-85fd-4a04-9b7c-af6bb0aa70c1",
      "parentUUID": "482c454a-d5eb-47fb-8faf-5c39a2ab93f4",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3f41e22e-41ae-484e-90c6-bcb9dd50bb8a",
      "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2dc3b361-da37-471b-b4c7-d8695877f4bd",
      "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 145,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cfc47039-1edb-4dab-abcb-0d0e7931a115",
      "parentUUID": "d840e860-2188-4136-82d1-21a63454dd56",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "17e12b0e-5d3a-4b1b-bd2c-491e9207c86e",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7e5107d1-4a4a-4077-8ed1-e8f818bb5ac2",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 80,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "88354466-c4fc-4fb7-b117-baa80d9f9a4e",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 70,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6e03c70c-570a-4ae5-9d87-db592fe1f943",
      "parentUUID": "5f5a3144-d1df-4522-a07d-ce3437e44e83",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f19ce262-f0d3-41ae-a558-fc9f222e3180",
      "parentUUID": "c6303f04-e7f5-4043-b4f8-4f463fac4bf9",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "167ebe36-4729-4356-b552-d47095de9e7d",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8c9b6178-f9af-4191-b9db-cab57a494fd8",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b2a6fdc3-241d-4bd4-8a8e-5bf77499ce12",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7ee31ed3-4e1e-463d-a5d1-a1a352cdc3bc",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5dcc2d2d-d28b-4ecd-b490-e3298da25ce7",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "84ac233b-1917-4762-82b4-ebc216c597cd",
      "parentUUID": "0c8a17cf-ef3c-43cf-852c-def7874be811",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2bbdfe4f-7424-4741-8af3-9ac04a381d41",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "70dc271c-a758-462e-8e65-936e3c3405bb",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "766d0419-2999-4bbf-a4f4-41854baa2e79",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5bf3442a-8cb6-4f45-bf1f-2e26c485a9da",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c43e2609-3a92-43d4-b45c-5d90bb24b1ec",
      "parentUUID": "40b36711-36ba-4520-9f38-a5f588961772",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5f50d720-f129-4f6d-9430-e682d741bd5a",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "881b5da0-0a89-41fa-96d2-94bfd8f5f01d",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "86c064fd-04db-4b74-a03e-41e8932c1b54",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f746eba1-f065-4620-81de-a2f7028ea67b",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "272b6bfe-a6fa-47ec-95f3-c0077d8bb8d5",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6e56c46e-5da2-4f87-abaa-a8fa65dd81b0",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d525587c-8a79-4009-878c-f193d72b1265",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "da72cd5c-37b5-42e6-9760-33fe029d09dd",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3fc6bda8-ed27-40c4-afc2-8b6f0ebbc6c2",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "49cc82c1-6b8a-430c-97f6-0b1074e8d3aa",
      "parentUUID": "b4c43061-5821-49c9-8788-74b717344177",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9d20d68f-99ef-4216-986d-561720e03fef",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1d74c651-8c18-460d-ad4b-eab924790793",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9d3e129c-0787-4c8f-9708-b55115f23ee5",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fd3ab996-6f30-4037-88af-9b87ae224dd2",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "59080ee3-8cdb-4f19-a3ab-d80c0fa94f8e",
      "parentUUID": "59546da7-1137-473c-bc8d-615bc6ed916d",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "5cbf3bea-41f8-40ee-a8c6-774f9cb4fedc",
      "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "05573e12-29f9-4cad-b846-ffa38c60ac6c",
      "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "f050ff57-f271-4d19-94e1-0f67da589b0e",
      "parentUUID": "8e7f952b-1c03-456d-9259-d675a507adb0",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9968ee04-8bb6-42bd-878a-90ff92148914",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "b6fc61c8-f5cb-4aad-b8fa-d4ba5ef5e546",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3dad2f65-bcce-4e4c-968e-1ad486070b1b",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 55,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b8bb5c25-52cf-4d2d-9137-91a9ac05441f",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9851d2aa-133f-4822-8a18-ca160e1849eb",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6b373861-e7eb-4c6f-b94c-b660625d6f8a",
      "parentUUID": "5529af6d-1e5b-4836-863b-97ebd5611a78",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2251b45d-ca87-4d49-8bde-1c18f28ab807",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "46bb3888-97ad-40be-86e2-f8470a87ba8d",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9d240f35-100d-47d4-a4eb-bc7fdbadf26f",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "caefd999-bcc0-4641-9040-797111aba04c",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "293b0394-9e58-4911-b116-cf996f4d8857",
      "parentUUID": "41afcc90-c577-4196-a468-b5364656a9db",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "73d95b20-1d0d-46e9-b781-e1acc8c4d22c",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7d325a6f-cf6f-4d0d-98f3-119d7709af80",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0158a4a1-d1e6-45b8-acec-4029968a097b",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "74b2aad8-9b0e-4e81-b911-7fcba4f56592",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "7e66844d-8f78-428c-98d6-a0b2f6b95a90",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "be6405dc-7a0b-4793-93f0-5c8705fcb70c",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "6520205d-8a66-41dc-85fa-50696e5bf029",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7007993c-3012-4755-9674-df90224b624f",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d59e21ce-3906-422b-9a4d-3062ad86ff8b",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "54dad22d-45d5-4e25-a53a-f9810dee72a6",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9818c8bb-d2c1-428a-969b-05b227272a35",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "41022b15-56cd-43c3-b76e-13e7d9d06d8f",
      "parentUUID": "cfafb6b5-1d07-4137-aa3f-fb6ad194701b",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "a0d13df5-16f6-45c1-b8c7-c8a34ac5f299",
      "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "d3b4fd01-058f-4ac8-9d2d-b90e48bb2edc",
      "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "3beda6ac-9c43-47b9-bb12-06b34b5b1c73",
      "parentUUID": "5dfdcb1c-5ccf-4738-b546-ad04c8e153a7",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "5ccf73ec-5778-432e-865a-7669493d6b29",
      "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "12c772c1-9638-4a4e-815a-ee0ac0a0478b",
      "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "f33f47a5-d394-4ba6-8898-ecdb728dae91",
      "parentUUID": "da440398-0c3f-439e-b2b0-300d80bbe45e",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "52ebfb45-e134-4a15-8ea3-eda027152517",
      "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "4cb573de-f568-4d57-8333-6a018a3b2d5b",
      "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "208b7b6d-2d34-4158-af01-379907ed3a16",
      "parentUUID": "858b1fd1-7c95-4b27-8883-e231bc431bcf",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "8213ae89-f454-4b8c-9266-41e9592be328",
      "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "7647eb0e-3f7f-4ff4-a4b4-1dc96e1609af",
      "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ebad2eb2-5881-4cb5-8e68-ceccc5fe0825",
      "parentUUID": "2e57cc0f-0c70-484e-9b16-adedd31ba047",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b4f504a1-015a-44c3-b48f-46bf799ea5ef",
      "parentUUID": "94f50b78-cd52-4929-a0f0-c781cf711770",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1ee7594f-720f-40c0-940f-aa82c7e29555",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "86b190b4-07c8-4a3d-94fc-06b6f8103ba8",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "49020961-f039-4d9a-a16b-c63fcf2205a1",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4f4d6fca-0b99-4b6f-8e20-8718e3fe1f76",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cadf191b-3471-4d83-aff9-f5105bf06d8c",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e2d6acc8-7c90-459d-a384-3cc80104fb68",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d6691326-6734-4991-a5b0-68502527cef5",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "460fc414-b321-4d71-a584-92466ef3b56c",
      "parentUUID": "f0ce0a4f-f3c0-48b4-afe4-053953b9a93a",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9becdaa5-82eb-41c2-8f9e-9d1ab6d4ef35",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b18e1539-434b-4fbd-aa7b-3103a7a0fc01",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ed5c76e7-e2fd-4bb8-adf8-a42adf864dc2",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 54,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "95d04732-9334-45d1-9531-2d3651ab5fdd",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5ea85f8a-c00e-40c9-80aa-4eab8c6c7cea",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a5427540-e95c-4533-8de4-2bf354a6779b",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ffb85365-111f-4f3a-bd9a-0b4b92994bfe",
      "parentUUID": "90aa2ea5-6f5e-4ebc-8ea4-87f0183e55dd",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b1638eb6-e6f6-49c9-a732-710272d6fd1a",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c7fbc118-209e-4354-bec0-b6061cc93021",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a3992a1-b369-492a-bc5e-1f2b29913335",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2722ccf5-54a4-49e1-be6a-b62e4e5d2f45",
      "parentUUID": "2368a30a-42b0-44c7-93b9-c707e34e5af6",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "896ebc7d-328b-4660-8086-2380b9e8b93b",
      "parentUUID": "13e98c78-f3dd-4aab-bddb-be715cf3a911",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f1c95615-d1c0-49a4-b430-15c2e01361d8",
      "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d31aea73-536f-4b51-bf73-1d60485d286e",
      "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "abe74769-3244-41db-a9cf-9c2b19c7b5b6",
      "parentUUID": "d57e99c1-b6cc-46fe-ab2a-88363511c54d",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ba1332ca-aa83-4a5c-afb1-d4d5eb745396",
      "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bbc267dd-7772-49dc-b74d-ec924399a49f",
      "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d899ebca-b763-416c-a9de-c95eba676806",
      "parentUUID": "e9b615f3-c387-41a9-8fa3-1b19bc8d80d0",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}