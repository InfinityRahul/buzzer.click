{
  "reportTitle": "buzzer.click",
  "stats": {
    "suites": 37,
    "tests": 128,
    "passes": 128,
    "pending": 0,
    "failures": 0,
    "start": "2016-09-28T08:44:33.637Z",
    "end": "2016-09-28T08:44:38.408Z",
    "duration": 4771,
    "testsRegistered": 128,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "contestant",
            "suites": [
              {
                "title": "join",
                "suites": [
                  {
                    "title": "as individual",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 223,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "52b3d865-a1ba-4bd1-ae37-6109e9cf9be2",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "6bc20a14-2a3a-464c-a7c6-dfb9e34724b3",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 63,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6b1b7fa2-c4bc-4cf5-a3e6-32a4c88d2252",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 49,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "381fcf6d-45da-4ae9-8ee9-82a056200a3b",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e7756b5c-3e31-4a78-8f46-b01479038875",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "90334cd6-75cc-43f4-923a-9ffc7359750f",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "49aad4eb-c61d-4730-b864-bf407d7bf24d",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 63,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "27d8bf1c-132a-423a-a8bf-548b5f949f6a",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join as individual should allow when request is valid",
                        "timedOut": false,
                        "duration": 223,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "52b3d865-a1ba-4bd1-ae37-6109e9cf9be2",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join as individual should update observers",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "6bc20a14-2a3a-464c-a7c6-dfb9e34724b3",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join as individual should not allow when session is full",
                        "timedOut": false,
                        "duration": 63,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "6b1b7fa2-c4bc-4cf5-a3e6-32a4c88d2252",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join as individual should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 49,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "381fcf6d-45da-4ae9-8ee9-82a056200a3b",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join as individual should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e7756b5c-3e31-4a78-8f46-b01479038875",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join as individual should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "90334cd6-75cc-43f4-923a-9ffc7359750f",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join as individual should not allow when session is completed",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "49aad4eb-c61d-4730-b864-bf407d7bf24d",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join as individual should not allow when username is taken",
                        "timedOut": false,
                        "duration": 63,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "27d8bf1c-132a-423a-a8bf-548b5f949f6a",
                        "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 8,
                    "totalPasses": 8,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 603
                  },
                  {
                    "title": "with teams",
                    "suites": [
                      {
                        "title": "when team leader selection method is RANDOM",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 47,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "74b74b9a-5e51-4d31-8047-25bd830eb2e4",
                            "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "be27aa3c-8370-420d-b1e7-2f4ebe484c1e",
                            "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should fulfill team leader position when team is full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should fulfill team leader position when team is full",
                            "timedOut": false,
                            "duration": 47,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "74b74b9a-5e51-4d31-8047-25bd830eb2e4",
                            "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
                            "skipped": false
                          },
                          {
                            "title": "should not fulfill team leader position when team is not full",
                            "fullTitle": "with teams when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "be27aa3c-8370-420d-b1e7-2f4ebe484c1e",
                            "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 2,
                        "totalPasses": 2,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 79
                      },
                      {
                        "title": "when team selection method is PLAYER_CHOICE",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "2f8c3e35-f456-4e73-b617-aef36082e027",
                            "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 50,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "a1566b13-fa30-4ff4-86ba-00244a6a3c42",
                            "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 129,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "78f46eec-a42f-46e4-83c8-2e61e48d684a",
                            "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "uuid": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                        "passes": [
                          {
                            "title": "should respond with a list of teams",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should respond with a list of teams",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "2f8c3e35-f456-4e73-b617-aef36082e027",
                            "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                            "skipped": false
                          },
                          {
                            "title": "should all when request is valid",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should all when request is valid",
                            "timedOut": false,
                            "duration": 50,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "a1566b13-fa30-4ff4-86ba-00244a6a3c42",
                            "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                            "skipped": false
                          },
                          {
                            "title": "should not over fill a team",
                            "fullTitle": "with teams when team selection method is PLAYER_CHOICE should not over fill a team",
                            "timedOut": false,
                            "duration": 129,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
                            "isRoot": false,
                            "uuid": "78f46eec-a42f-46e4-83c8-2e61e48d684a",
                            "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 208
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 41,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "234a31a5-e912-4ef5-b721-f1f2a670f541",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 52,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "618bd20e-3784-49fa-94f8-83fa1079ac4f",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bcd47aa8-6083-4674-9117-a0ee3b8814ee",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9df0d32d-3bd0-4844-9cfc-c3a6e0b853e6",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e8bb8b56-e196-4b17-8c42-d41bc4d6e369",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2eedeeaf-be5f-4c98-852d-71a53cc7b0e3",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "44788713-b663-4027-a2bd-1d07122b62f8",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7f600a46-2b04-4aad-b968-9947d2b3e80d",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 31,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "be5d1cf4-2366-4f99-9201-0e03e819c575",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4b5b659c-d95f-4179-bf53-ad7ffeed4989",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "uuid": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "join with teams should allow when request is valid",
                        "timedOut": false,
                        "duration": 41,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "234a31a5-e912-4ef5-b721-f1f2a670f541",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should update observers",
                        "fullTitle": "join with teams should update observers",
                        "timedOut": false,
                        "duration": 52,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "618bd20e-3784-49fa-94f8-83fa1079ac4f",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is full",
                        "fullTitle": "join with teams should not allow when session is full",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bcd47aa8-6083-4674-9117-a0ee3b8814ee",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to contestant room",
                        "fullTitle": "join with teams should subscribe contestant to contestant room",
                        "timedOut": false,
                        "duration": 43,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9df0d32d-3bd0-4844-9cfc-c3a6e0b853e6",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe contestant to observer room",
                        "fullTitle": "join with teams should subscribe contestant to observer room",
                        "timedOut": false,
                        "duration": 42,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "e8bb8b56-e196-4b17-8c42-d41bc4d6e369",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "join with teams should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2eedeeaf-be5f-4c98-852d-71a53cc7b0e3",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "join with teams should not allow when session is completed",
                        "timedOut": false,
                        "duration": 46,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "44788713-b663-4027-a2bd-1d07122b62f8",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when username is taken",
                        "fullTitle": "join with teams should not allow when username is taken",
                        "timedOut": false,
                        "duration": 48,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "7f600a46-2b04-4aad-b968-9947d2b3e80d",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should inquire about team leader position",
                        "fullTitle": "join with teams should inquire about team leader position",
                        "timedOut": false,
                        "duration": 31,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "be5d1cf4-2366-4f99-9201-0e03e819c575",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      },
                      {
                        "title": "should not inquire about team leader position",
                        "fullTitle": "join with teams should not inquire about team leader position",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4b5b659c-d95f-4179-bf53-ad7ffeed4989",
                        "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 10,
                    "totalPasses": 10,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 407
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "482d087c-88a4-4ab9-9195-e84cce287d4e",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a01976eb-ba20-46f3-a507-cc0b28186bbe",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3f55656c-a6df-4843-83a2-36d6eb26851f",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "85e49e67-8766-4a33-a741-5b7a3918e758",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "05dc2121-79f9-4a92-a8e1-19c908a24fa4",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "e389b985-ca5f-4701-889f-674f932fc420",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe contestant to the observer room",
                    "fullTitle": "contestant rejoin should allow when request is valid and subscribe contestant to the observer room",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a01976eb-ba20-46f3-a507-cc0b28186bbe",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3f55656c-a6df-4843-83a2-36d6eb26851f",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "85e49e67-8766-4a33-a741-5b7a3918e758",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  },
                  {
                    "title": "should flag host as not disconnected",
                    "fullTitle": "contestant rejoin should flag host as not disconnected",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "05dc2121-79f9-4a92-a8e1-19c908a24fa4",
                    "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 178
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e9b41296-37e9-4fee-baab-a6fdd7280818",
                    "parentUUID": "a73f108a-ec63-4020-813a-c71041adb1d1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "a73f108a-ec63-4020-813a-c71041adb1d1",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "contestant on disconnect should update observers",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e9b41296-37e9-4fee-baab-a6fdd7280818",
                    "parentUUID": "a73f108a-ec63-4020-813a-c71041adb1d1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 28
              },
              {
                "title": "team leader inquiry response",
                "suites": [],
                "tests": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d6bae330-36d5-4475-b129-b35ee80c4fc3",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b6b61264-e36f-4632-a021-1c9476174049",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cfafb091-5acf-4292-a7b1-92bc9078d645",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4695a0fe-6137-4099-a665-2fa4528f7e89",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2b18f5ff-c12a-482c-b456-3023a52155b3",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e6a66db7-c66c-412e-8a72-66e01f32f677",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should set team leader",
                    "fullTitle": "contestant team leader inquiry response should set team leader",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d6bae330-36d5-4475-b129-b35ee80c4fc3",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader",
                    "fullTitle": "contestant team leader inquiry response should not set team leader",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b6b61264-e36f-4632-a021-1c9476174049",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "cfafb091-5acf-4292-a7b1-92bc9078d645",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant team leader inquiry response should not allow when session is completed",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4695a0fe-6137-4099-a665-2fa4528f7e89",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant team leader inquiry response should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "2b18f5ff-c12a-482c-b456-3023a52155b3",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  },
                  {
                    "title": "should not set team leader when position fulfilled (aka race condition)",
                    "fullTitle": "contestant team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e6a66db7-c66c-412e-8a72-66e01f32f677",
                    "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 188
              },
              {
                "title": "buzzerPress",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8c726da4-94f5-4ab2-827d-e5f91e3175a2",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93e24593-2efb-4364-9d0d-91f366a9e3b6",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "217f17c0-f215-4637-ae19-7e197affaa06",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "442efabd-b120-4386-a8f6-b31418050f83",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3161caae-3d14-4585-ad97-02a5423727f0",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow when state is ready",
                    "fullTitle": "contestant buzzerPress should allow when state is ready",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8c726da4-94f5-4ab2-827d-e5f91e3175a2",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should ignore when state is not ready",
                    "fullTitle": "contestant buzzerPress should ignore when state is not ready",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "93e24593-2efb-4364-9d0d-91f366a9e3b6",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "contestant buzzerPress should not allow when session is completed",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "217f17c0-f215-4637-ae19-7e197affaa06",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "442efabd-b120-4386-a8f6-b31418050f83",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant buzzerPress should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "3161caae-3d14-4585-ad97-02a5423727f0",
                    "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 156
              },
              {
                "title": "team name change request",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8ff729f9-ed83-4a05-b2d1-5b4d3f1ea563",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e0ec36e4-62b1-493e-86c9-47d3ab8f5c99",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "03e49036-5962-4bf6-80c9-f9176df4bdfd",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d7e60b83-aa3f-4204-baa6-67f1df634fe2",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "07af6882-a33d-47f2-b4fc-050e3b9bbab8",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "693f3d7f-8e48-46dd-97db-f8556175e820",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6f8385e5-466a-4289-9674-2acabf3399fa",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5728c9e1-4247-4b70-8022-8ce626f19bb1",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5a141e69-c060-4809-b63d-b45fcf90de77",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0be6b111-91ff-40ee-9951-9e2c39316e5e",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "contestant team name change request should allow it when request is valid",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8ff729f9-ed83-4a05-b2d1-5b4d3f1ea563",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name is already used",
                    "fullTitle": "contestant team name change request should not allow it when team name is already used",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e0ec36e4-62b1-493e-86c9-47d3ab8f5c99",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name does not change",
                    "fullTitle": "contestant team name change request should allow it when team name does not change",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "03e49036-5962-4bf6-80c9-f9176df4bdfd",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not team leader",
                    "fullTitle": "contestant team name change request should not allow it when not team leader",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d7e60b83-aa3f-4204-baa6-67f1df634fe2",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "contestant team name change request should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "07af6882-a33d-47f2-b4fc-050e3b9bbab8",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "contestant team name change request should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "693f3d7f-8e48-46dd-97db-f8556175e820",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is complete",
                    "fullTitle": "contestant team name change request should not allow it when session is complete",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6f8385e5-466a-4289-9674-2acabf3399fa",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when setting do not allow it",
                    "fullTitle": "contestant team name change request should not allow it when setting do not allow it",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5728c9e1-4247-4b70-8022-8ce626f19bb1",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name contains profanity",
                    "fullTitle": "contestant team name change request should not allow it when team name contains profanity",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5a141e69-c060-4809-b63d-b45fcf90de77",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  },
                  {
                    "title": "should update observers when accepted",
                    "fullTitle": "contestant team name change request should update observers when accepted",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "0be6b111-91ff-40ee-9951-9e2c39316e5e",
                    "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 10,
                "totalPasses": 10,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 294
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a7959880-dc2d-44e6-9140-f91fe388ffd9",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "261a429b-9165-467a-9e52-ca18993bc2dc",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f1bc2fce-76b6-49da-808f-c9d4862e9f6a",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f231dc37-d8ab-4a60-831d-86cfb52e7c94",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5f0d57fd-5d93-48ff-9855-346bbe965451",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
                "uuid": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "contestant info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a7959880-dc2d-44e6-9140-f91fe388ffd9",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should return in a valid state for teams contestant",
                    "fullTitle": "contestant info request should return in a valid state for teams contestant",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "261a429b-9165-467a-9e52-ca18993bc2dc",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "contestant info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f1bc2fce-76b6-49da-808f-c9d4862e9f6a",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "contestant info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f231dc37-d8ab-4a60-831d-86cfb52e7c94",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "contestant info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "5f0d57fd-5d93-48ff-9855-346bbe965451",
                    "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 150
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
            "uuid": "b84bbcb8-aadc-405e-9b01-3b40f8e61785",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerContestantTests.js",
        "uuid": "65ab7b64-3685-40e1-a61d-206bcde2d98a",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "host",
            "suites": [
              {
                "title": "create",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "d5754017-85e1-4a5a-99e7-bc53bed8afdc",
                        "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "e3cdd228-25a0-4ce1-a906-96287cf6fe4a",
                        "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "5769e8fd-3c00-42df-b81e-03698f939bd6",
                        "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid and create a session",
                        "fullTitle": "create session should allow when request is valid and create a session",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "d5754017-85e1-4a5a-99e7-bc53bed8afdc",
                        "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to the observer room",
                        "fullTitle": "create session should subscribe host to the observer room",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
                        "isRoot": false,
                        "uuid": "e3cdd228-25a0-4ce1-a906-96287cf6fe4a",
                        "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when settings are not valid",
                        "fullTitle": "create session should not allow when settings are not valid",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
                        "isRoot": false,
                        "uuid": "5769e8fd-3c00-42df-b81e-03698f939bd6",
                        "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 37
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "1c8360b6-04ae-454a-ae74-25793af5e5d3",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "rejoin",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2b5e5c19-0a7f-4eec-adfa-de79ad835dff",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "266a26ab-04fd-4766-b443-79575f47fe09",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ffc9f27c-c01f-4d84-8998-b8f0e2494e58",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4896866e-89b7-4c48-8fa5-f6b1d31a04b5",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5e38f5e9-879f-447a-bca3-ab8fd2d2096a",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fa4e11e6-f417-4b86-b1bf-481f986f8912",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "rejoin session should allow when request is valid",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "2b5e5c19-0a7f-4eec-adfa-de79ad835dff",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should subscribe host to observer room",
                        "fullTitle": "rejoin session should subscribe host to observer room",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "266a26ab-04fd-4766-b443-79575f47fe09",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "rejoin session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 24,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ffc9f27c-c01f-4d84-8998-b8f0e2494e58",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session does not exist",
                        "fullTitle": "rejoin session should not allow when session does not exist",
                        "timedOut": false,
                        "duration": 50,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "4896866e-89b7-4c48-8fa5-f6b1d31a04b5",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is completed",
                        "fullTitle": "rejoin session should not allow when session is completed",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "5e38f5e9-879f-447a-bca3-ab8fd2d2096a",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      },
                      {
                        "title": "should flag host as not disconnected",
                        "fullTitle": "rejoin session should flag host as not disconnected",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "fa4e11e6-f417-4b86-b1bf-481f986f8912",
                        "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 6,
                    "totalPasses": 6,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 176
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "753b37aa-7a71-4c47-b1f1-f65ad0d0da15",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "complete",
                "suites": [
                  {
                    "title": "session",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "0b49d4a1-acd7-45b7-96c6-edf70086c637",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "cb98a12f-ceec-44f6-ba55-1cc34c69bf24",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "883e01c7-2e4d-4277-b012-383e546cda6b",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3bddc9c1-9f2c-4dce-bcb1-ce47d694d9d8",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1ca259a3-24a2-427a-a4ab-0a6b62360f83",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow when request is valid",
                        "fullTitle": "complete session should allow when request is valid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "0b49d4a1-acd7-45b7-96c6-edf70086c637",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when host id is invalid",
                        "fullTitle": "complete session should not allow when host id is invalid",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "cb98a12f-ceec-44f6-ba55-1cc34c69bf24",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session id is invalid",
                        "fullTitle": "complete session should not allow when session id is invalid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "883e01c7-2e4d-4277-b012-383e546cda6b",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should not allow when session is already completed",
                        "fullTitle": "complete session should not allow when session is already completed",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "3bddc9c1-9f2c-4dce-bcb1-ce47d694d9d8",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      },
                      {
                        "title": "should notify observers",
                        "fullTitle": "complete session should notify observers",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1ca259a3-24a2-427a-a4ab-0a6b62360f83",
                        "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 90
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "0ab7e6c6-c229-4f27-8848-36270158bb75",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "buzzer",
                "suites": [
                  {
                    "title": "action",
                    "suites": [
                      {
                        "title": "when accepted",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ce2e989b-3594-4d90-b662-c70f4c8a1129",
                            "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "86e08ca1-3e31-41dd-8ca4-0669ef76c52d",
                            "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "4be9eb20-98ed-45ba-b0cf-990dea92f4ee",
                            "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "c121a510-0336-4309-9670-dad84ddc91f9",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when accepted should update observers",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ce2e989b-3594-4d90-b662-c70f4c8a1129",
                            "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
                            "skipped": false
                          },
                          {
                            "title": "should update contestant score",
                            "fullTitle": "action when accepted should update contestant score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "86e08ca1-3e31-41dd-8ca4-0669ef76c52d",
                            "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
                            "skipped": false
                          },
                          {
                            "title": "should update team score",
                            "fullTitle": "action when accepted should update team score",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "4be9eb20-98ed-45ba-b0cf-990dea92f4ee",
                            "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 109
                      },
                      {
                        "title": "when rejected",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "8c1959e5-4bc2-456c-9e1a-dc8eb3a38530",
                            "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ea0720d3-041a-4f21-ab2d-8b794737c526",
                            "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "c30cface-a3bd-44a3-bb1b-c6e2419548de",
                            "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when rejected should update observers",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "8c1959e5-4bc2-456c-9e1a-dc8eb3a38530",
                            "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when rejected should not update contestant score",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "ea0720d3-041a-4f21-ab2d-8b794737c526",
                            "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when rejected should not update team score",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "c30cface-a3bd-44a3-bb1b-c6e2419548de",
                            "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 99
                      },
                      {
                        "title": "when reset",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "98caf291-ab75-4cf5-b34d-5539341c310a",
                            "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "538b2871-8bcd-4f64-853b-4d6570e4a669",
                            "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 42,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "8c800daa-da9e-4ab2-bc60-c7e24af09532",
                            "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "025fea01-2d23-411b-959d-dbadfb378af2",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when reset should update observers",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "98caf291-ab75-4cf5-b34d-5539341c310a",
                            "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when reset should not update contestant score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "538b2871-8bcd-4f64-853b-4d6570e4a669",
                            "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when reset should not update team score",
                            "timedOut": false,
                            "duration": 42,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "8c800daa-da9e-4ab2-bc60-c7e24af09532",
                            "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 109
                      },
                      {
                        "title": "when disabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "3cbcd44e-e255-4357-9b85-b27f12f0a5c5",
                            "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "c8f41b1d-c7bc-40ff-bfa7-7f1e88d18591",
                            "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "989cf22a-53aa-424c-aace-7f0bd091f266",
                            "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when disabled should update observers",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
                            "isRoot": false,
                            "uuid": "3cbcd44e-e255-4357-9b85-b27f12f0a5c5",
                            "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                            "skipped": false
                          },
                          {
                            "title": "should not update contestant score",
                            "fullTitle": "action when disabled should not update contestant score",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "c8f41b1d-c7bc-40ff-bfa7-7f1e88d18591",
                            "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                            "skipped": false
                          },
                          {
                            "title": "should not update team score",
                            "fullTitle": "action when disabled should not update team score",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "989cf22a-53aa-424c-aace-7f0bd091f266",
                            "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 3,
                        "totalPasses": 3,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 78
                      },
                      {
                        "title": "when enabled",
                        "suites": [],
                        "tests": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0c42125a-c719-40de-9d45-35d9c6d36cb5",
                            "parentUUID": "c78551ef-8b8d-4396-af8f-87da124b76ac",
                            "skipped": false
                          }
                        ],
                        "pending": [],
                        "root": false,
                        "_timeout": 15000,
                        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                        "uuid": "c78551ef-8b8d-4396-af8f-87da124b76ac",
                        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                        "passes": [
                          {
                            "title": "should update observers",
                            "fullTitle": "action when enabled should update observers",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
                            "isRoot": false,
                            "uuid": "0c42125a-c719-40de-9d45-35d9c6d36cb5",
                            "parentUUID": "c78551ef-8b8d-4396-af8f-87da124b76ac",
                            "skipped": false
                          }
                        ],
                        "failures": [],
                        "skipped": [],
                        "hasTests": true,
                        "hasSuites": false,
                        "totalTests": 1,
                        "totalPasses": 1,
                        "totalFailures": 0,
                        "totalPending": 0,
                        "totalSkipped": 0,
                        "hasPasses": true,
                        "hasFailures": false,
                        "hasPending": false,
                        "hasSkipped": false,
                        "duration": 19
                      }
                    ],
                    "tests": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "33d6b7a2-0888-441f-be7d-e09d665c93f9",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 34,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "23ed6d0f-d1d0-4eb3-81bc-d286d50b97d3",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9ee42b70-86e6-4ffc-b23f-09e9cf437647",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "6a4278b7-3e4f-4efc-b9f4-ed1391d8d2b2",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "b1beea30-47ce-4fec-916f-1f274c4e4753",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1b1fd68c-97cc-42ae-ac30-259df34fd1e3",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bb2d3114-06ab-46e5-beb2-285764eef6a1",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 27,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9a0c01e1-afc6-4f31-a042-3f40ec747c1b",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "0cec80d9-68ec-4db7-ba03-61292adb04c0",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "731f5240-958b-4e8e-9b78-ab03fe28582e",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "630bd748-4bb3-445a-8013-0324a2528876",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ca754a7f-8efa-49eb-92bf-0688d2dd6c27",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 15000,
                    "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                    "uuid": "11df65df-210a-484d-9899-e45a1cb10f94",
                    "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                    "passes": [
                      {
                        "title": "should allow accept when valid",
                        "fullTitle": "buzzer action should allow accept when valid",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "33d6b7a2-0888-441f-be7d-e09d665c93f9",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reject when valid",
                        "fullTitle": "buzzer action should allow reject when valid",
                        "timedOut": false,
                        "duration": 34,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "23ed6d0f-d1d0-4eb3-81bc-d286d50b97d3",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when valid",
                        "fullTitle": "buzzer action should allow reset when valid",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9ee42b70-86e6-4ffc-b23f-09e9cf437647",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow disable when valid",
                        "fullTitle": "buzzer action should allow disable when valid",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "6a4278b7-3e4f-4efc-b9f4-ed1391d8d2b2",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow enable when valid",
                        "fullTitle": "buzzer action should allow enable when valid",
                        "timedOut": false,
                        "duration": 21,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
                        "isRoot": false,
                        "uuid": "b1beea30-47ce-4fec-916f-1f274c4e4753",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow accept when state is not pending",
                        "fullTitle": "buzzer action should not allow accept when state is not pending",
                        "timedOut": false,
                        "duration": 14,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "1b1fd68c-97cc-42ae-ac30-259df34fd1e3",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow reject when state is not pending",
                        "fullTitle": "buzzer action should not allow reject when state is not pending",
                        "timedOut": false,
                        "duration": 16,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "bb2d3114-06ab-46e5-beb2-285764eef6a1",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is ready",
                        "fullTitle": "buzzer action should allow reset when game state is ready",
                        "timedOut": false,
                        "duration": 27,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "9a0c01e1-afc6-4f31-a042-3f40ec747c1b",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should allow reset when game state is pending",
                        "fullTitle": "buzzer action should allow reset when game state is pending",
                        "timedOut": false,
                        "duration": 32,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "0cec80d9-68ec-4db7-ba03-61292adb04c0",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when host id is invalid",
                        "fullTitle": "buzzer action should not allow response when host id is invalid",
                        "timedOut": false,
                        "duration": 29,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "731f5240-958b-4e8e-9b78-ab03fe28582e",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session id is invalid",
                        "fullTitle": "buzzer action should not allow response when session id is invalid",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "630bd748-4bb3-445a-8013-0324a2528876",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      },
                      {
                        "title": "should not allow response when session is complete",
                        "fullTitle": "buzzer action should not allow response when session is complete",
                        "timedOut": false,
                        "duration": 30,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
                        "isRoot": false,
                        "uuid": "ca754a7f-8efa-49eb-92bf-0688d2dd6c27",
                        "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": true,
                    "totalTests": 12,
                    "totalPasses": 12,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 295
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "ecc5cfd9-d25d-451a-9f27-27ff23630bd4",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "team name change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e79e803a-b594-404a-886b-83a6438210ea",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dfaa6926-c07d-4921-8a3a-7d73da51af79",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e1c0493a-d6c5-47f8-82f1-54f40882958f",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dddf491f-9f55-4b1a-89a9-9d3697140e5c",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c7d703d1-1cab-4c4e-b665-72ef3b5165b4",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "724796d1-d0c0-4155-aa04-0ee389143146",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ce0c1d44-488d-4695-82fd-4b2eb3a73baf",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "73c107fb-4f53-4df1-a42a-55f9257ed6fc",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team name change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e79e803a-b594-404a-886b-83a6438210ea",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when name contains profanity",
                    "fullTitle": "host team name change should allow it when name contains profanity",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dfaa6926-c07d-4921-8a3a-7d73da51af79",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should allow it when team name editing is manual",
                    "fullTitle": "host team name change should allow it when team name editing is manual",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e1c0493a-d6c5-47f8-82f1-54f40882958f",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team name change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "dddf491f-9f55-4b1a-89a9-9d3697140e5c",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team name change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c7d703d1-1cab-4c4e-b665-72ef3b5165b4",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team name change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "724796d1-d0c0-4155-aa04-0ee389143146",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when team name already in use",
                    "fullTitle": "host team name change should not allow it when team name already in use",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ce0c1d44-488d-4695-82fd-4b2eb3a73baf",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team name change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "73c107fb-4f53-4df1-a42a-55f9257ed6fc",
                    "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 138
              },
              {
                "title": "team leader change",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4e1d575c-73e1-4640-8e70-e8b4d01725e6",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d0e8e4af-a3a3-49c4-9844-bff46d647073",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f8edc92f-aee8-4dfb-ac7b-71ef1b2ad41c",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a8862a55-ab0a-4326-84c2-38c3b0feb1d9",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ab6f0be9-e1ed-4c13-b4b1-07a4ab1270e2",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f6b12e26-8490-41d8-8b65-3e1275b3c216",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a139d57b-4417-48de-8b71-1b3b0de658a5",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should allow it when request is valid",
                    "fullTitle": "host team leader change should allow it when request is valid",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4e1d575c-73e1-4640-8e70-e8b4d01725e6",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should allow it team leader is the same",
                    "fullTitle": "host team leader change should allow it team leader is the same",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d0e8e4af-a3a3-49c4-9844-bff46d647073",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host team leader change should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f8edc92f-aee8-4dfb-ac7b-71ef1b2ad41c",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host team leader change should not allow it when not the host",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a8862a55-ab0a-4326-84c2-38c3b0feb1d9",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it team does not exist",
                    "fullTitle": "host team leader change should not allow it team does not exist",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "ab6f0be9-e1ed-4c13-b4b1-07a4ab1270e2",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host team leader change should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f6b12e26-8490-41d8-8b65-3e1275b3c216",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when contestant does not exist",
                    "fullTitle": "host team leader change should not allow it when contestant does not exist",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "a139d57b-4417-48de-8b71-1b3b0de658a5",
                    "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 300
              },
              {
                "title": "settings update",
                "suites": [],
                "tests": [
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host settings update should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "22be4140-9a11-4efc-a69f-bc0c5c355897",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host settings update should not allow it when not the host",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "195e86a0-d346-4755-b339-ee77a0e0c5d2",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host settings update should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "41a8a9ca-4166-488e-897f-33341de9fae6",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name",
                    "fullTitle": "host settings update should update the session name",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f17800b2-3996-42ea-a5db-c45aedc18d2e",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the max contestants",
                    "fullTitle": "host settings update should update the max contestants",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c6422ca0-ad8e-4251-9e4c-2b17002584e7",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the max teams",
                    "fullTitle": "host settings update should update the max teams",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d408022d-2129-40fa-9c94-88eb54f9328c",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the team size",
                    "fullTitle": "host settings update should update the team size",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "30628ed9-d3df-400a-b63d-f954f52efb83",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name, max teams and team size",
                    "fullTitle": "host settings update should update the session name, max teams and team size",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "32664844-333e-48cd-bf97-f0f5730b6e7f",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name and max contestants",
                    "fullTitle": "host settings update should update the session name and max contestants",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b98a63ed-e82c-4f62-a2d4-09baeedd3030",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should not allow it when session is completed",
                    "fullTitle": "host settings update should not allow it when session is completed",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "22be4140-9a11-4efc-a69f-bc0c5c355897",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when not the host",
                    "fullTitle": "host settings update should not allow it when not the host",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "195e86a0-d346-4755-b339-ee77a0e0c5d2",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should not allow it when session does not exist",
                    "fullTitle": "host settings update should not allow it when session does not exist",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "41a8a9ca-4166-488e-897f-33341de9fae6",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name",
                    "fullTitle": "host settings update should update the session name",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "f17800b2-3996-42ea-a5db-c45aedc18d2e",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the max contestants",
                    "fullTitle": "host settings update should update the max contestants",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "c6422ca0-ad8e-4251-9e4c-2b17002584e7",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the max teams",
                    "fullTitle": "host settings update should update the max teams",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d408022d-2129-40fa-9c94-88eb54f9328c",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the team size",
                    "fullTitle": "host settings update should update the team size",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "30628ed9-d3df-400a-b63d-f954f52efb83",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name, max teams and team size",
                    "fullTitle": "host settings update should update the session name, max teams and team size",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "32664844-333e-48cd-bf97-f0f5730b6e7f",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  },
                  {
                    "title": "should update the session name and max contestants",
                    "fullTitle": "host settings update should update the session name and max contestants",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "b98a63ed-e82c-4f62-a2d4-09baeedd3030",
                    "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 9,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 160
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "78a3a5b2-3ada-43a5-98d9-eecc4c79945c",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6d858c66-7bd8-4133-8b4a-0bd84771fd1c",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d3f6e41b-a68e-4d00-8f06-7782e40197cc",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e32a4477-b5f7-499a-a5bd-c7f4ce181e94",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "host info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "78a3a5b2-3ada-43a5-98d9-eecc4c79945c",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "host info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "6d858c66-7bd8-4133-8b4a-0bd84771fd1c",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when contestant does not exist",
                    "fullTitle": "host info request should not allow when contestant does not exist",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "d3f6e41b-a68e-4d00-8f06-7782e40197cc",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "host info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "e32a4477-b5f7-499a-a5bd-c7f4ce181e94",
                    "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 67
              },
              {
                "title": "on disconnect",
                "suites": [],
                "tests": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "aeffdfbf-2ea5-46a0-b764-a879ab04a743",
                    "parentUUID": "456fa796-b990-4753-acc6-6dca0e83c9d1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
                "uuid": "456fa796-b990-4753-acc6-6dca0e83c9d1",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
                "passes": [
                  {
                    "title": "should update observers",
                    "fullTitle": "host on disconnect should update observers",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "aeffdfbf-2ea5-46a0-b764-a879ab04a743",
                    "parentUUID": "456fa796-b990-4753-acc6-6dca0e83c9d1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 29
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
            "uuid": "291ff8c8-b117-4b68-9e89-658d50ba6945",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerHostTests.js",
        "uuid": "f4d1deec-5537-460f-bf6c-77ed064bbf70",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerHostTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Buzzer server",
        "suites": [
          {
            "title": "observer",
            "suites": [
              {
                "title": "rejoin",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4040ee50-51cf-4f9a-b066-6bdf6afd7cf3",
                    "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "03a5e7c3-3da6-4601-bf65-84675dea6136",
                    "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8716f439-54e8-4774-9b0a-9a638e2dcba4",
                    "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should allow when request is valid and subscribe observer to the observer room",
                    "fullTitle": "observer rejoin should allow when request is valid and subscribe observer to the observer room",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "4040ee50-51cf-4f9a-b066-6bdf6afd7cf3",
                    "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer rejoin should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "03a5e7c3-3da6-4601-bf65-84675dea6136",
                    "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session is completed",
                    "fullTitle": "observer rejoin should not allow when session is completed",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "8716f439-54e8-4774-9b0a-9a638e2dcba4",
                    "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 96
              },
              {
                "title": "info request",
                "suites": [],
                "tests": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "97fca6bf-0a05-4605-a186-b6cd7134a115",
                    "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "58ad7aec-ad0a-4a10-bc89-7a81957825e7",
                    "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7cad29a1-395d-4fcb-aafb-e46469ce2599",
                    "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 15000,
                "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
                "uuid": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
                "passes": [
                  {
                    "title": "should return in a valid state for individuals contestant",
                    "fullTitle": "observer info request should return in a valid state for individuals contestant",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "97fca6bf-0a05-4605-a186-b6cd7134a115",
                    "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when session does not exist",
                    "fullTitle": "observer info request should not allow when session does not exist",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "58ad7aec-ad0a-4a10-bc89-7a81957825e7",
                    "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                    "skipped": false
                  },
                  {
                    "title": "should allow when session is complete",
                    "fullTitle": "observer info request should allow when session is complete",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
                    "isRoot": false,
                    "uuid": "7cad29a1-395d-4fcb-aafb-e46469ce2599",
                    "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 87
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 15000,
            "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
            "uuid": "22e1a6b3-1d4b-4914-a381-7e1bcd978e7c",
            "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 15000,
        "file": "/tests/Functional/lib/BuzzerServerObserverTests.js",
        "uuid": "5b2316c9-e4ae-462f-957e-6042ea70eb58",
        "fullFile": "/Users/nick/Documents/Uni/buzzer.click/tests/Functional/lib/BuzzerServerObserverTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "7340dc61-8be5-4b16-8681-6462b1195576",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 223,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f2d7eb2f-c2c5-4690-bd72-1c720f6d9f26",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "a55aa492-601c-4206-915c-874a05674f34",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d0ab63ed-8592-4e68-8bfa-1aaaa20ee6df",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f431bcca-9205-4c6b-a858-fb54dfd620f6",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "2242d01c-1d34-432d-bb48-1ffc85321031",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b1de609b-8dda-4a6c-a6c2-16a9e8f920ad",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2d4efc78-6e35-4e68-9df0-6c063f31f662",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d1d88e78-4711-4ab6-9fd3-3fb03c585682",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "949f4a2b-4cdc-408c-8d86-0005588c5163",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "0bf81d78-5709-4946-8784-82ea942957ac",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1fd20305-e6ef-416e-b3de-24f856c6eb78",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "65269895-80bc-4a04-8e3e-aaf691edf5e2",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "78e2124c-2e5a-4ad4-8a1b-199bbf34adf5",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "fcadfee4-75cd-4e1a-9ca4-f2083eee98e3",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a0217e9-6546-4ae4-b533-e6f8d522e7b4",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0cc24303-9048-460c-bae2-7c4e8bbb3ba1",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "25becbb5-f106-49b1-9f65-12f5cb79cb29",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d09bac54-52c2-44fa-98ef-bb2bf813ad13",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f1385b26-1e8c-4a35-a07b-3c3cea3e0335",
      "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e70c763f-ef1b-49de-9b1d-5040ce319396",
      "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b72200d3-dd20-4918-926e-218bf1f75684",
      "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c176de8c-6a17-45ab-b067-978af4d113cc",
      "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 129,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "262f7998-833b-45b5-88a9-17ebcc48905a",
      "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a0dd1a1c-e205-4238-8aee-fa238d1fb682",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d301e50f-483e-4115-9ff6-973e26f24cdd",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "75c596fc-e779-47e8-8ecf-cc935504d831",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4714d2d7-abb2-49d7-a546-0a70e4939711",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d9ca500f-fb08-4b3e-a92f-4f8d17163998",
      "parentUUID": "a73f108a-ec63-4020-813a-c71041adb1d1",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "dc7f025a-3f04-48de-9cdc-b5e9c8d2f32b",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0f89058e-f4c1-4e2a-b9a1-71e9ee1108b8",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5e0f7f04-2453-4b93-9950-18f942590c68",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "62ff08aa-27b3-44a2-8a3a-910e9d5c2cc9",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0b45d7f5-ba6a-4115-81d9-2f9cb6313815",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "473d3733-990f-4e55-89f3-82ff8c53d609",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "81c67cb3-e986-4e93-bc22-8c264320cd24",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "743eedee-e550-40f8-8fb5-9efd2bdbe9ca",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "618a029d-083f-479d-95cb-499ee109dad9",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "48891141-a395-4afb-b14a-0e790cf4a586",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "75042651-b5ce-4353-874c-cce5a1c47e5a",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2f12a56e-783b-496b-bedf-4e9917d99916",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4e17ee70-0ad3-4376-85f9-0ed914c65afc",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9078a1d4-65dc-4896-b742-df7717be4d3f",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7231b928-9547-4d13-a421-92828b969cab",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3bbdac99-70d8-4d48-b953-b938e8d69f90",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2a41311e-0213-4399-9a24-97c01268d70d",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "098a1f55-dd64-4a69-b8d1-5b3556206093",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2e88e2be-5288-4878-a101-7975f751147a",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a6199d67-4a34-49c2-b577-36049008983c",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "db605f9d-37aa-4e04-a62c-ece2abc11999",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1b8676d6-9cbc-4e22-a356-5762853bf8d6",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f960abec-39a2-4aa0-8a7c-d586a040fe44",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1ed58bb3-e331-4749-92b1-0242bceee648",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "d953102b-5b2b-4e29-b160-e85cb816d477",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b81a2e4a-978d-458c-99e3-e31b544600b5",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "71126db4-498b-4d50-96ac-4d1d9543f508",
      "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "50b29329-ef7d-49f0-a5f6-ada571546893",
      "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "d15cfd70-2b73-4452-bdf3-4a20470b9151",
      "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "af7916a1-5fb0-4a05-b6c2-5890940f67a2",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "c7c3454f-ab6d-46f5-8f6d-b4e4e7a6941a",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "16affb19-cf84-4ed1-bc93-fc6326b12ec5",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1226c913-f0fb-408d-be1c-3b42e277b287",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "83244425-8d21-474e-bb66-cc371d4051b1",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5534cc42-e056-4d9a-a2c2-e519f055978e",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7af6d48c-3a81-4faf-912d-36dbdf73b69b",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "422c4dc9-d8a1-48af-aec2-8a748b554c3f",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4c15c092-32ec-4c47-af28-471795245808",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7a532f76-196c-4539-b558-bd0f71bcb9ca",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a0289027-5045-4905-8914-b8b313a45a5c",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3e5db953-0b2a-4dd2-acf4-9f79f28066a3",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6dd468ee-9def-4307-ab95-32646062cd5e",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "74cf4bc9-c08c-495f-9ebc-e77453050239",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "69ab3215-a182-435e-b051-4d223de6895f",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "3205e48e-ab09-401b-bc42-5b171568d3a8",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8b92b98d-a7ec-43a9-9ef6-5ccf10d5f343",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "abbd7401-a185-4095-87eb-f7aafb098eec",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5faa587d-c45c-42c3-b36d-63e5445b41f4",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b10f8302-f460-46e1-ad40-67f26209baeb",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "96c726c1-6bb5-4658-b886-f8bec6d686c2",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c4a49d93-1016-4687-981d-46f1cc1947d1",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "12d31875-9801-41b2-9f72-4d21b0247b0d",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "25f05582-086b-4c87-a9ac-61e77c244057",
      "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "1c44c7db-d994-4c11-ba7d-6acfb5c78f47",
      "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "1a41e6c7-c46d-4ce1-8971-66507b48d771",
      "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b164155e-049a-40a2-84d2-fd237427cde3",
      "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "ab9d403b-8ab8-4d5e-b1ed-474d51483ec0",
      "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "602b3782-92e7-42d3-b1f8-214d1ce37a33",
      "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "806f90ca-9c60-406a-9466-3857a45396e7",
      "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "d5906919-5c37-4b72-8304-45c1a039de24",
      "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "536e3cb1-921d-4fe0-82c9-1f62f2383020",
      "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "48caaa26-3156-4f1e-b67e-d22d129d3fe6",
      "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "a1b2ceb5-4698-42b3-b685-64c3ece48ca7",
      "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "2a0a0747-2049-4850-bda9-2164f992743f",
      "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "7e26f6f2-34d4-4fbb-aa46-b4a640786e05",
      "parentUUID": "c78551ef-8b8d-4396-af8f-87da124b76ac",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a8357d9c-9182-4cf7-9469-b8a40a8580f4",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4be98781-3860-4691-a9cc-0599f4d62b57",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "97f20c43-8ecc-4c65-bf54-ee9363b3b05f",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "173e10e8-3157-41b5-8f05-0e1a9eaea384",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "897ec16a-866d-49d6-8495-f705ee3aa59b",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ee11b8d5-e5da-44c4-a0da-9313d90e5fcd",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "028e8e3c-ba6d-4fc9-bb5d-082c9326d89c",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0b2bc666-2845-4b05-9d9f-84bcce841c11",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "27c14706-d98a-4c0f-8f69-d00ae1f0f32c",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "df37a52c-f54f-41ec-9f9d-777fb87a18d3",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "be3692c4-8cf6-4459-9469-3f66ec867b2b",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "4c989817-7fb7-4ffd-9c4d-e288eff17b4c",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0e3e654e-4864-404d-b6ba-9394f5fb2330",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c0eb46e2-04d0-42bf-adb1-f7e196fd135a",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "debc0b07-de36-4977-9c49-fc57274d0b16",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "settings update should not allow it when session is completed",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3efb53fc-c11b-4d9e-8311-bacf13beef4e",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "settings update should not allow it when not the host",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "10605ded-f4b2-41e7-8d56-a7e9d67def5e",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "settings update should not allow it when session does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3c8be346-59d7-4f69-99b0-d6eaed6e8aaf",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the session name",
      "fullTitle": "settings update should update the session name",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b53af639-5b95-4efa-a16e-195ba83a9da3",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the max contestants",
      "fullTitle": "settings update should update the max contestants",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bc18989e-0b9a-4581-8a9b-08f588cbc4ae",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the max teams",
      "fullTitle": "settings update should update the max teams",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c05c5b35-c249-4340-b541-542f79fba0cb",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the team size",
      "fullTitle": "settings update should update the team size",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "68b4a0c1-b2b2-4fa7-8f1d-990330848339",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the session name, max teams and team size",
      "fullTitle": "settings update should update the session name, max teams and team size",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f84359a3-f47d-4a5e-b2a4-02b8a2342f04",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the session name and max contestants",
      "fullTitle": "settings update should update the session name and max contestants",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "26dea73c-3ec9-4630-8bba-9ffefaf9660e",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0894831f-0c59-47b2-8aa3-16e6bc57ebce",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9e841324-86bb-4e4d-a382-ce24af3588df",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ffbd77b3-daac-4cc8-b10d-d014e435fd7c",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "dc3e59ba-8720-4c16-9007-a0a83ab41dc9",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a1b6f084-34db-4a6f-91b6-8a7ac0093548",
      "parentUUID": "456fa796-b990-4753-acc6-6dca0e83c9d1",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "7d151014-0c13-4a2d-b4bf-c9ebbd98c26e",
      "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5c3e4b78-da4e-4b24-a0db-1f00d6df4e98",
      "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b28506b1-91e1-45cb-9c20-0748b197d6e0",
      "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "21ba9709-c8b5-4007-af5c-d3170455f8b9",
      "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "1de9c38c-eb84-4a71-a281-791423051fe6",
      "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "c9653633-bf05-4afb-9a5a-7de0c42ef4ea",
      "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should allow when request is valid",
      "fullTitle": "as individual should allow when request is valid",
      "timedOut": false,
      "duration": 223,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5b07755f-b818-446b-8ba4-bd16443d9238",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "as individual should update observers",
      "timedOut": false,
      "duration": 53,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "70b01450-20ac-4342-b808-003cde3ded1a",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "as individual should not allow when session is full",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.MAXIMUM_SESSION_SIZED_REACHED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b15a00b7-48f3-429d-a472-d42706c9b61e",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "as individual should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "4e1df072-41a1-4e77-81aa-5e31656fe789",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "as individual should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "f08c1cae-dd94-4554-8aeb-8670dba6fba4",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "as individual should not allow when session does not exist",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "79218688-5a71-4706-8904-1ee63dda873a",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "as individual should not allow when session is completed",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e34c1477-d47d-4a7f-a9da-90e656027f75",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "as individual should not allow when username is taken",
      "timedOut": false,
      "duration": 63,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "472852a3-5f01-4799-8484-5da67e4ce9c7",
      "parentUUID": "192c5286-7ea1-44bc-90e9-081fc8d649b9",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "with teams should allow when request is valid",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        rm.contestantId.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e404e1c0-5ba3-4c88-be2f-46f926b30dbb",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "with teams should update observers",
      "timedOut": false,
      "duration": 52,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        om.gameState.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        om.gameState.teams.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>        om.gameState.teams[<span class=\"hljs-number\">0</span>].contestants[<span class=\"hljs-number\">0</span>].username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>        done();<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'Test Person'</span>, rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "af209fa1-67cc-4401-be5b-50df28c7448a",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when session is full",
      "fullTitle": "with teams should not allow when session is full",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">responseMessage</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm1.sessionId = responseMessage.sessionId;<br>    rm1.username = <span class=\"hljs-string\">'TP1'</span>;<br>    <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rm2.sessionId = responseMessage.sessionId;<br>    rm2.username = <span class=\"hljs-string\">'TP2'</span>;<br>    <span class=\"hljs-comment\">// Contestant 1 join</span><br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m1</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm1 = messageFactory.restore(m1, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm1.wasSuccessful.should.be.true();<br>        <span class=\"hljs-comment\">// Contestant 2 join</span><br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m2</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm2 = messageFactory.restore(m2, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm2.wasSuccessful.should.be.false();<br>            rm2.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2419a0f0-d1f1-42f0-ad50-7bf506d542cc",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to contestant room",
      "fullTitle": "with teams should subscribe contestant to contestant room",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for Contestant update</span><br>    cc.on(<span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        m.should.equal(<span class=\"hljs-string\">'test'</span>);<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.sendMessageToContestants(sessionId, <span class=\"hljs-string\">'testMessage'</span>, <span class=\"hljs-string\">'test'</span>);<br>    });<br>});",
      "isRoot": false,
      "uuid": "8588e299-e70e-49be-a701-e8f5adb207a6",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should subscribe contestant to observer room",
      "fullTitle": "with teams should subscribe contestant to observer room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>        helper.closeClients();<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.true();<br>        helper.forceObserveUpdate(sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "9b9f29d6-256d-4f5c-9de8-ce90cdaa51d2",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "with teams should not allow when session does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = idUtility.generateSessionId();<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "964aae0a-1e5e-4422-b82e-b5d3c4b9ab9a",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "with teams should not allow when session is completed",
      "timedOut": false,
      "duration": 46,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.should.not.be.null();<br>        rm.wasSuccessful.should.be.false();<br>        rm.failedRequestReason.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "acf1cb7a-57fb-470d-ad04-44ba069872c6",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not allow when username is taken",
      "fullTitle": "with teams should not allow when username is taken",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-comment\">// Join</span><br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rm.sessionId = sessionId;<br>        rm.username = <span class=\"hljs-string\">'username'</span>;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> responseMessage = messageFactory.restore(message, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            responseMessage.should.not.be.null();<br>            responseMessage.wasSuccessful.should.be.false();<br>            responseMessage.failedRequestReason.should.equal(constants.messages.USERNAME_TAKEN);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2b8ee045-745c-44c1-b297-d208b95a88e7",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should inquire about team leader position",
      "fullTitle": "with teams should inquire about team leader position",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "192696c9-4e6a-4817-9ba3-ab5d39256bc5",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should not inquire about team leader position",
      "fullTitle": "with teams should not inquire about team leader position",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "895b754f-1150-4dae-8bc9-213b5b0bb4aa",
      "parentUUID": "6ebc4dff-98a6-4480-b73a-e94ad10edd62",
      "skipped": false
    },
    {
      "title": "should fulfill team leader position when team is full",
      "fullTitle": "when team leader selection method is RANDOM should fulfill team leader position when team is full",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equalOneOf(<span class=\"hljs-string\">'c1'</span>, <span class=\"hljs-string\">'c2'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8d536922-2ccb-4338-8fe2-be1fc048be91",
      "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
      "skipped": false
    },
    {
      "title": "should not fulfill team leader position when team is not full",
      "fullTitle": "when team leader selection method is RANDOM should not fulfill team leader position when team is not full",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "eda6f593-1037-4d82-b193-9ea0fd10743c",
      "parentUUID": "c1cf23b7-71d0-4d3a-8610-f6a62e81e62e",
      "skipped": false
    },
    {
      "title": "should respond with a list of teams",
      "fullTitle": "when team selection method is PLAYER_CHOICE should respond with a list of teams",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rm.mustChooseTeam.should.be.true();<br>        rm.teams.should.be.Array();<br>        rm.teams.length.should.equal(<span class=\"hljs-number\">3</span>);<br>        helper.getLatestSession().contestants.length.should.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "eed6dd02-f814-4694-917c-31aeb5caffda",
      "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
      "skipped": false
    },
    {
      "title": "should all when request is valid",
      "fullTitle": "when team selection method is PLAYER_CHOICE should all when request is valid",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = rm.sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            should(rm.contestantId).not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = session.teams.getByTeamName(rqm.teamName);<br>            t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>            t.contestants.all[<span class=\"hljs-number\">0</span>].id.should.equal(rm.contestantId);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7e0c2fb8-1003-4b51-b888-6064c1ee0c13",
      "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
      "skipped": false
    },
    {
      "title": "should not over fill a team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not over fill a team",
      "timedOut": false,
      "duration": 129,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.wasSuccessful.should.be.false();<br>        rqm.teamName = rm.teams[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">// Fill the spot</span><br>        <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>        <span class=\"hljs-keyword\">var</span> rqm2 = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>        rqm2.sessionId = sessionId;<br>        rqm2.username = <span class=\"hljs-string\">'Test Person2'</span>;<br>        rqm2.teamName = rqm.teamName;<br>        cc2.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.wasSuccessful.should.be.true();<br>            <span class=\"hljs-comment\">// Try join full team</span><br>            cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>                rm.wasSuccessful.should.be.false();<br>                rm.failedRequestReason.should.equal(constants.messages.TEAMS_ARE_FULL);<br>                done();<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "ed33652f-0297-416c-b47e-b55018610a65",
      "parentUUID": "1fe4807e-70c9-4d22-b09c-02d6078ff80e",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe contestant to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe contestant to the observer room",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-comment\">// Hack: this event may fire twice</span><br>            helper.closeClients();<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            om.should.not.be.null();<br>            done();<br>        });<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "46ab5819-2b46-4b78-a23e-63ea16c2eb4a",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "37084010-e1d2-4c4b-801d-545286e6a4ae",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3feddc11-894b-4239-8523-1f968b4f4ee5",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "rejoin should flag host as not disconnected",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        cc.disconnect();<br>        cc = helper.createClient();<br>        <span class=\"hljs-comment\">// Rejoin</span><br>        <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>        rqm.sessionId = sessionId;<br>        rqm.participantId = contestantId;<br>        rqm.rejoinAs = constants.rejoinAs.CONTESTANT;<br>        cc.emit(messageConstants.REJOIN_SESSION, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> c = session.contestants.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>                <span class=\"hljs-keyword\">return</span> c.id === contestantId;<br>            });<br>            c.isDisconnected.should.be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "e82484c1-cd46-4fb3-94b0-c629aadda807",
      "parentUUID": "e389b985-ca5f-4701-889f-674f932fc420",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; om.gameState.contestants[<span class=\"hljs-number\">0</span>].disconnected) {<br>            done();<br>        }<br>    });<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        cc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "71d29fa8-caea-470d-a46a-148609523ba0",
      "parentUUID": "a73f108a-ec63-4020-813a-c71041adb1d1",
      "skipped": false
    },
    {
      "title": "should set team leader",
      "fullTitle": "team leader inquiry response should set team leader",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            t.teamLeader.username.should.equal(<span class=\"hljs-string\">'Test Person'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8799cea4-05b3-4c43-8172-cfe1bb39c2d2",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not set team leader",
      "fullTitle": "team leader inquiry response should not set team leader",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">false</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<span class=\"hljs-number\">0</span>];<br>            should(t.teamLeader).be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a049b0d-5b6c-4162-90bc-971a96483e53",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "team leader inquiry response should not allow when session does not exist",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = idUtility.generateSessionId();<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "bae1d200-776f-4c2c-b334-2187c37f8d91",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "team leader inquiry response should not allow when session is completed",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = rm.contestantId;<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>            rm.should.not.be.null();<br>            rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3a91392c-161e-438c-99dd-6e0bf0054777",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "team leader inquiry response should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>        rqm.sessionId = sessionId;<br>        rqm.contestantId = idUtility.generateParticipantId();<br>        rqm.decision = <span class=\"hljs-literal\">true</span>;<br>        cc.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_LEADER_RESPONSE_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "72ec7e9c-6ea6-492a-a030-dbfcc00dc518",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should not set team leader when position fulfilled (aka race condition)",
      "fullTitle": "team leader inquiry response should not set team leader when position fulfilled (aka race condition)",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc1.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        rm.enquireForTeamLeaderPosition.should.be.true();<br>        <span class=\"hljs-keyword\">var</span> cc1Id = rm.contestantId;<br>        helper.contestantJoin(cc2, <span class=\"hljs-string\">'Test Person2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>            rm.enquireForTeamLeaderPosition.should.be.true();<br>            rqm = messageFactory.create(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE);<br>            rqm.sessionId = sessionId;<br>            rqm.contestantId = rm.contestantId;<br>            rqm.decision = <span class=\"hljs-literal\">true</span>;<br>            cc2.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>                sm.should.not.be.null();<br>                rqm.contestantId = cc1Id;<br>                cc1.emit(messageConstants.INQUIRE_TEAM_LEADER_RESPONSE_MESSAGE, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a25772bb-850f-4fd6-8378-268aa5ead245",
      "parentUUID": "4f9c6c50-95a2-4fd6-80ab-7be8cf48f35a",
      "skipped": false
    },
    {
      "title": "should allow when state is ready",
      "fullTitle": "buzzerPress should allow when state is ready",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "93811b85-54ce-4d9a-8f62-00c0b55ac5b7",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should ignore when state is not ready",
      "fullTitle": "buzzerPress should ignore when state is not ready",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc1 = helper.createClient();<br>    helper.contestantJoin(cc1, <span class=\"hljs-string\">'username1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> cc2 = helper.createClient();<br>            helper.contestantJoin(cc2, <span class=\"hljs-string\">'username2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>                bpm.sessionId = sessionId;<br>                bpm.contestantId = rm.contestantId;<br>                cc1.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.BUZZER_PRESS_NOT_ACCEPTED);<br>                    done();<br>                });<br>            });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c6f88f3c-8018-4a3c-bd75-f950aad1d857",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "buzzerPress should not allow when session is completed",
      "timedOut": false,
      "duration": 35,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        helper.getLatestSession().complete();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "19522488-c410-4fcf-baaa-2130dcbfe83e",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "buzzerPress should not allow when session does not exist",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = idUtility.generateSessionId();<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "976add89-1ded-4b0e-b1c9-30b4ab1a04fc",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "buzzerPress should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.ERROR);<br>            sm.error.should.equal(constants.messages.COULD_NOT_ACCEPT_BUZZER_PRESS_NOT_CONTESTANT);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2a0ef451-2542-40b3-8a4d-cd34c009f344",
      "parentUUID": "e79700c2-7fce-48ad-96e9-24a6c3096749",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change request should allow it when request is valid",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2838a057-26ca-413b-b87c-d230b9f305d5",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when team name is already used",
      "fullTitle": "team name change request should not allow it when team name is already used",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> otherTeam = session.teams.all.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> t !== team;<br>        })[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = otherTeam.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "0a3cc714-4ea4-44b0-ae1c-60838f0856ed",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should allow it when team name does not change",
      "fullTitle": "team name change request should allow it when team name does not change",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        <span class=\"hljs-keyword\">var</span> contestant = session.contestants[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> team = session.teams.getByContestant(contestant);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = team.teamName;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9023cab8-ed14-480f-8694-6387d6d79bea",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when not team leader",
      "fullTitle": "team name change request should not allow it when not team leader",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            session.teams.all[<span class=\"hljs-number\">0</span>].teamName.should.not.equal(<span class=\"hljs-string\">'New team name'</span>);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "b75f1d14-ab2e-4ec3-9847-7341315597c4",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change request should not allow it when session does not exist",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "61ae8e07-fbe5-442a-88cf-2772e407ee0c",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team name change request should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = idUtility.generateParticipantId();<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_REQUEST_NOT_CONTESTANT_TEAM_OR_TEAM_LEADER);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "3b012524-5443-436e-aad4-3746ca24e8bd",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when session is complete",
      "fullTitle": "team name change request should not allow it when session is complete",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "948def8b-04e8-483b-9081-6a6bd2de7309",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when setting do not allow it",
      "fullTitle": "team name change request should not allow it when setting do not allow it",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "cd8c9230-84e8-4f18-828a-55a541f8afc3",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should not allow it when team name contains profanity",
      "fullTitle": "team name change request should not allow it when team name contains profanity",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'The word penis is funny #YOLO'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>            em.should.not.be.null();<br>            em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "448f92ab-3bdc-4526-b60e-d833e60dc443",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should update observers when accepted",
      "fullTitle": "team name change request should update observers when accepted",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-comment\">// Join</span><br>    <span class=\"hljs-keyword\">var</span> rqm = messageFactory.create(messageConstants.CONTESTANT_JOIN_REQUEST);<br>    rqm.sessionId = sessionId;<br>    rqm.username = <span class=\"hljs-string\">'Test Person'</span>;<br>    cc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.teams &amp;&amp; om.gameState.teams.length) {<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.teams[<span class=\"hljs-number\">0</span>].teamName === <span class=\"hljs-string\">'New team name'</span>) {<br>                done();<br>            }<br>        }<br>    });<br>    cc.emit(messageConstants.CONTESTANT_JOIN_REQUEST, rqm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.CONTESTANT_JOIN_RESPONSE);<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.contestantId = rm.contestantId;<br>        req.teamName = <span class=\"hljs-string\">'New team name'</span>;<br>        cc.emit(messageConstants.SET_TEAM_NAME_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>            sm.should.not.be.null();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "9cd92a7b-4e15-4274-8bef-c20c0a87e31d",
      "parentUUID": "0d9712e6-18da-4b1f-9e7b-2d0cd7c7afc3",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            should(irm.info).not.be.null();<br>            should(irm.info.host).be.null();<br>            should(irm.info.contestant).not.be.null();<br>            should(irm.info.team).be.null();<br>            should(irm.info.session).not.be.null();<br>            should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(irm.info.isObserver).be.false();<br>            should(irm.info.isHost).be.false();<br>            should(irm.info.isContestant).be.true();<br>            should(irm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "f6196e4a-90d6-46bf-85fb-3124290a3916",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should return in a valid state for teams contestant",
      "fullTitle": "info request should return in a valid state for teams contestant",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            rm.should.not.be.null();<br>            should(rm.info).not.be.null();<br>            should(rm.info.host).be.null();<br>            should(rm.info.contestant).not.be.null();<br>            should(rm.info.team).not.be.null();<br>            should(rm.info.session).not.be.null();<br>            should(rm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>            should(rm.info.isObserver).be.false();<br>            should(rm.info.isHost).be.false();<br>            should(rm.info.isContestant).be.true();<br>            should(rm.info.isSessionCompleted).be.false();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "67f0a092-4900-43a5-b7fa-ddea00308e4c",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = idUtility.generateSessionId();<br>        req.participantId = contestantId;<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8dda5588-97fc-4b51-b89e-7c6534f9b07d",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = idUtility.generateParticipantId();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>            em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "58f65dda-54d9-48e3-aef5-035e1dd6a95b",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> contestantId = rm.contestantId;<br>        <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>        req.sessionId = sessionId;<br>        req.participantId = contestantId;<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.complete();<br>        cc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>            irm.should.not.be.null();<br>            done();<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "a7fce2a7-1295-4d51-bde6-00cbc316b5c7",
      "parentUUID": "2179b5d3-8e52-4c96-a4b8-ad3c0b09ccde",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and create a session",
      "fullTitle": "session should allow when request is valid and create a session",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.CREATE_SESSION_RESPONSE);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> rsm = messageFactory.restore(m, messageConstants.CREATE_SESSION_RESPONSE);<br>    rsm.sessionId.should.equal(session.id);<br>    rsm.hostId.should.equal(session.host.id);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "61076c31-b0c0-4312-99ef-70c1317d27c5",
      "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
      "skipped": false
    },
    {
      "title": "should subscribe host to the observer room",
      "fullTitle": "session should subscribe host to the observer room",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    om.should.not.be.null();<br>    done();<br>});<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    rm.should.not.be.null();<br>    <span class=\"hljs-comment\">// force observer update</span><br>    helper.forceObserveUpdate(rm.sessionId);<br>});",
      "isRoot": false,
      "uuid": "b165f0e1-3cfb-4529-bfae-9dacbff96358",
      "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
      "skipped": false
    },
    {
      "title": "should not allow when settings are not valid",
      "fullTitle": "session should not allow when settings are not valid",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r, e] = s.validate();<br>r.should.be.false();<br><span class=\"hljs-keyword\">var</span> csm = messageFactory.create(messageConstants.CREATE_SESSION);<br>csm.settings = s;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>c.emit(messageConstants.CREATE_SESSION, csm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    m.should.be.Object();<br>    m.type.should.equal(messageConstants.ERROR);<br>    helper.sessions.all.length.should.equal(<span class=\"hljs-number\">0</span>);<br>    done();<br>});",
      "isRoot": false,
      "uuid": "20713daa-43fb-4bd3-80ef-abbfee93b393",
      "parentUUID": "356e9b41-e49b-407b-8de1-0098e3e6fcea",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "80423af5-1cde-412b-92d9-798004ca0eb9",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should subscribe host to observer room",
      "fullTitle": "session should subscribe host to observer room",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>    });<br>});",
      "isRoot": false,
      "uuid": "926a275b-ad7a-491e-ad70-2b06277071ce",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = idUtility.generateParticipantId();<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_REJOIN_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "18c42fe2-8ded-4679-9a5c-979e0be4304e",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "session should not allow when session does not exist",
      "timedOut": false,
      "duration": 50,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "aec44aaa-4606-4139-9af5-515cdf498d45",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "session should not allow when session is completed",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "5e656ced-0793-4b0f-823d-a3c995d6f25f",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should flag host as not disconnected",
      "fullTitle": "session should flag host as not disconnected",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    c.disconnect();<br>    c = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.participantId = rm.hostId;<br>    rjm.rejoinAs = constants.rejoinAs.HOST;<br>    c.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.host.isDisconnected.should.be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "8b358199-a228-40ac-aaea-ae6374e17b1a",
      "parentUUID": "64fcf324-1e81-42ef-8aeb-c5c4d1345dec",
      "skipped": false
    },
    {
      "title": "should allow when request is valid",
      "fullTitle": "session should allow when request is valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "efbb96b0-6b49-4393-a5ad-f51fc4f5b02b",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should not allow when host id is invalid",
      "fullTitle": "session should not allow when host id is invalid",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.COULD_NOT_COMPLETE_SESSION_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "0eafac2a-f6d0-4074-a437-06bee1442e6d",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should not allow when session id is invalid",
      "fullTitle": "session should not allow when session id is invalid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = idUtility.generateSessionId();<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "258a250e-f21c-411c-bbcf-4ec8698490b2",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should not allow when session is already completed",
      "fullTitle": "session should not allow when session is already completed",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.ERROR);<br>        rm.should.not.be.null();<br>        rm.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "3ec6a205-b060-40e6-b884-b82be468675e",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should notify observers",
      "fullTitle": "session should notify observers",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> scm = messageFactory.create(messageConstants.SESSION_COMPLETE);<br>    scm.sessionId = rm.sessionId;<br>    scm.hostId = rm.hostId;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>        om.should.not.be.null();<br>        done();<br>    });<br>    hc.emit(messageConstants.SESSION_COMPLETE, scm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> rm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        rm.should.not.be.null();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea18a9ff-3a51-4c93-aebe-2b9c1e4b41f9",
      "parentUUID": "d47ccb0f-01cc-459a-bf96-5a0e2c131c55",
      "skipped": false
    },
    {
      "title": "should allow accept when valid",
      "fullTitle": "action should allow accept when valid",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        helper.getLatestSession().roundWinner<br>                            .should.equal(<span class=\"hljs-string\">'username'</span>);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "fe5f8c9c-c6eb-4a28-b7ee-e948f7379177",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reject when valid",
      "fullTitle": "action should allow reject when valid",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .REJECT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should(helper.getLatestSession()<br>                            .roundWinner).be.null();<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "7f052586-d419-43a8-9ead-6f5be3c248b9",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reset when valid",
      "fullTitle": "action should allow reset when valid",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f78def16-b79f-4cd5-9688-6b850e3c7751",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow disable when valid",
      "fullTitle": "action should allow disable when valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            done();<br>        });<br>});",
      "isRoot": false,
      "uuid": "2d8185ac-b483-4fe5-aa53-084db1972ce1",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow enable when valid",
      "fullTitle": "action should allow enable when valid",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId, constants.buzzerActionCommands<br>        .DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should.equal(<br>                constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>                constants.buzzerActionCommands.ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(successMessage);<br>                    helper.getLatestSession().currentState.should<br>                        .equal(constants.gameStates.READY);<br>                    done();<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "fafbd8b4-bbd9-4df5-ba03-ed85582e8f9e",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow accept when state is not pending",
      "fullTitle": "action should not allow accept when state is not pending",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.ACCEPT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "02e7e520-489c-434f-b2f3-dbdedaef260d",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow reject when state is not pending",
      "fullTitle": "action should not allow reject when state is not pending",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.REJECT;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a8ed222b-3a5b-47ee-a436-27e7aa390b8d",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is ready",
      "fullTitle": "action should allow reset when game state is ready",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(messageConstants.BUZZER_ACTION_COMMAND);<br>    hrm.sessionId = rm.sessionId;<br>    hrm.hostId = rm.hostId;<br>    hrm.action = constants.buzzerActionCommands.RESET;<br>    hc.emit(messageConstants.BUZZER_ACTION_COMMAND, hrm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ea176648-a17f-4770-beae-f3c9099b1ea9",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should allow reset when game state is pending",
      "fullTitle": "action should allow reset when game state is pending",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                messageFactory.restore(m, messageConstants.SUCCESS);<br>                helper.getLatestSession().currentState.should<br>                    .equal(constants.gameStates.PENDING);<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .RESET;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(<br>                            rm, messageConstants.SUCCESS<br>                        );<br>                        sm.should.not.be.null();<br>                        helper.getLatestSession().currentState<br>                            .should.equal(constants.gameStates<br>                                .READY);<br>                        should.not.exist(helper.getLatestSession()<br>                            .roundWinner);<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "1f6e0316-1bac-46ae-a2f6-1695079c4b17",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow response when host id is invalid",
      "fullTitle": "action should not allow response when host id is invalid",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = idUtility.generateParticipantId();<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "eb029b1b-721b-4f26-8355-cd703babe4ca",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow response when session id is invalid",
      "fullTitle": "action should not allow response when session id is invalid",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = idUtility.generateSessionId();<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "45981707-20f7-42e8-921c-1fffb512fd15",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should not allow response when session is complete",
      "fullTitle": "action should not allow response when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(messageConstants.CONTESTANT_BUZZER_PRESS);<br>        bpm.sessionId = sessionId;<br>        bpm.contestantId = rm.contestantId;<br>        cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS, bpm,<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                    messageConstants.BUZZER_ACTION_COMMAND<br>                );<br>                hrm.sessionId = sessionId;<br>                hrm.hostId = hostId;<br>                hrm.action = constants.buzzerActionCommands<br>                    .ACCEPT;<br>                helper.getLatestSession().complete();<br>                hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                    hrm,<br>                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>                        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(<br>                            rm, messageConstants.ERROR<br>                        );<br>                        em.error.should.equal(constants<br>                            .messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED<br>                        );<br>                        done();<br>                    });<br>            });<br>    });<br>});",
      "isRoot": false,
      "uuid": "2c5ffba1-b3f2-47b4-acf8-4718dabfa801",
      "parentUUID": "11df65df-210a-484d-9899-e45a1cb10f94",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when accepted should update observers",
      "timedOut": false,
      "duration": 38,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.contestants.length &amp;&amp; om.gameState<br>            .contestants[<span class=\"hljs-number\">0</span>].score === <span class=\"hljs-number\">1</span>) {<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "af03e00c-7383-4647-b836-34c0c7d7c54d",
      "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
      "skipped": false
    },
    {
      "title": "should update contestant score",
      "fullTitle": "when accepted should update contestant score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "0ed46417-1dce-4af0-af0e-23e9ad176c84",
      "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
      "skipped": false
    },
    {
      "title": "should update team score",
      "fullTitle": "when accepted should update team score",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .ACCEPT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">1</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "b469e305-b777-42a0-a1c0-047b03ef17b1",
      "parentUUID": "c121a510-0336-4309-9670-dad84ddc91f9",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when rejected should update observers",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "dc16d53c-0c70-4027-a724-0dae295af288",
      "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when rejected should not update contestant score",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "cd75b2c8-7f09-4a8c-9f65-83c5395de7ff",
      "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when rejected should not update team score",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .REJECT;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "4ee87f12-20ea-428f-9f0d-6ee454e3a67e",
      "parentUUID": "e2cd4370-c1fd-453c-9862-b1ca078e4eda",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when reset should update observers",
      "timedOut": false,
      "duration": 36,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> observedPending = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m,<br>            messageConstants.OBSERVER_UPDATE);<br>        <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants<br>            .gameStates.PENDING) {<br>            observedPending = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">return</span>;<br>        }<br>        <span class=\"hljs-keyword\">if</span> (observedPending &amp;&amp; om.gameState.currentState ===<br>            constants.gameStates.READY) {<br>            om.gameState.contestants.length.should.equal(<br>                <span class=\"hljs-number\">1</span>);<br>            om.gameState.contestants[<span class=\"hljs-number\">0</span>].score.should<br>                .equal(<span class=\"hljs-number\">0</span>);<br>            done();<br>        }<br>    });<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            helper.contestantBuzzerPress(cc, sessionId,<br>                rm.contestantId,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>                    helper.hostBuzzerAction(hc,<br>                        sessionId, hostId,<br>                        constants.buzzerActionCommands<br>                        .RESET);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "5b2d8ed2-4eb0-43e7-94e5-38b54f2479f0",
      "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when reset should not update contestant score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "294808f1-0977-40e8-a905-1a11b74cd4b0",
      "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when reset should not update team score",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .RESET;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "335d80cb-6c66-4fc2-8249-c5f6d7553d2a",
      "parentUUID": "025fea01-2d23-411b-959d-dbadfb378af2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when disabled should update observers",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE);<br>});",
      "isRoot": false,
      "uuid": "d583537f-36da-4b84-bcd9-67bc4c2ce328",
      "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
      "skipped": false
    },
    {
      "title": "should not update contestant score",
      "fullTitle": "when disabled should not update contestant score",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "5d7739ce-6900-464d-9bfd-f5ea685477ec",
      "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
      "skipped": false
    },
    {
      "title": "should not update team score",
      "fullTitle": "when disabled should not update team score",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> cc = helper.createClient();<br>    helper.contestantJoin(cc, <span class=\"hljs-string\">'username'</span>, sessionId,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> bpm = messageFactory.create(<br>                messageConstants.CONTESTANT_BUZZER_PRESS<br>            );<br>            bpm.sessionId = sessionId;<br>            bpm.contestantId = rm.contestantId;<br>            cc.emit(messageConstants.CONTESTANT_BUZZER_PRESS,<br>                bpm,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    messageFactory.restore(m,<br>                        messageConstants.SUCCESS<br>                    );<br>                    <span class=\"hljs-keyword\">var</span> hrm = messageFactory.create(<br>                        messageConstants.BUZZER_ACTION_COMMAND<br>                    );<br>                    hrm.sessionId = sessionId;<br>                    hrm.hostId = hostId;<br>                    hrm.action = constants.buzzerActionCommands<br>                        .DISABLE;<br>                    hc.emit(messageConstants.BUZZER_ACTION_COMMAND,<br>                        hrm,<br>                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                            messageFactory.restore(<br>                                m,<br>                                messageConstants<br>                                .SUCCESS);<br>                            <span class=\"hljs-keyword\">var</span> s = helper.getLatestSession();<br>                            <span class=\"hljs-keyword\">var</span> c = s.contestants[<br>                                <span class=\"hljs-number\">0</span>];<br>                            c.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            <span class=\"hljs-keyword\">var</span> t = s.teams.all[<br>                                <span class=\"hljs-number\">0</span>];<br>                            t.score.should.equal(<br>                                <span class=\"hljs-number\">0</span>);<br>                            done();<br>                        });<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "8a0ac5ec-96d9-407f-bdbf-6dd4ef1219c7",
      "parentUUID": "3a037bf9-3d33-42fc-b776-349ee8e7eceb",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "when enabled should update observers",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br><span class=\"hljs-keyword\">var</span> observedLocked = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-comment\">// listen for observer update</span><br>hc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>    <span class=\"hljs-keyword\">if</span> (om.gameState.currentState === constants.gameStates.BUZZER_LOCK) {<br>        observedLocked = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">if</span> (observedLocked &amp;&amp; om.gameState.currentState ===<br>        constants.gameStates.READY) {<br>        done();<br>    }<br>});<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    helper.hostBuzzerAction(hc, rm.sessionId, rm.hostId,<br>        constants.buzzerActionCommands.DISABLE,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>            sm.should.be.instanceOf(successMessage);<br>            helper.getLatestSession().currentState.should<br>                .equal(constants.gameStates.BUZZER_LOCK);<br>            helper.hostBuzzerAction(hc, rm.sessionId,<br>                rm.hostId, constants.buzzerActionCommands<br>                .ENABLE,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sm</span>) </span>{<br>                    sm.should.be.instanceOf(<br>                        successMessage);<br>                    helper.getLatestSession().currentState<br>                        .should.equal(constants.gameStates<br>                            .READY);<br>                });<br>        });<br>});",
      "isRoot": false,
      "uuid": "018261ac-1530-4245-bbbb-2fe3ede40cba",
      "parentUUID": "c78551ef-8b8d-4396-af8f-87da124b76ac",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team name change should allow it when request is valid",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2d303b67-22fe-4f6f-a4df-3d904bdd1280",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should allow it when name contains profanity",
      "fullTitle": "team name change should allow it when name contains profanity",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'ash0le penis'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "ab2fe978-d44a-4cde-ba9c-67918a76cdfa",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should allow it when team name editing is manual",
      "fullTitle": "team name change should allow it when team name editing is manual",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'The new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        team.teamName.should.equal(req.teamNameTo);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "4c316bab-3f87-4099-8a42-9897b996eede",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team name change should not allow it when session is completed",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7f3b71a1-fef8-4eab-83b6-cf29d2970502",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team name change should not allow it when not the host",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = idUtility.generateParticipantId();<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'A new team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "7bfcaac8-9b7d-4b24-893e-6a16f053a541",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team name change should not allow it team does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = <span class=\"hljs-string\">'does not exist'</span>;<br>    req.teamNameTo = <span class=\"hljs-string\">'some other team name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e311a53f-face-43d0-b6f0-c9d5aa8b87f6",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when team name already in use",
      "fullTitle": "team name change should not allow it when team name already in use",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team1 = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> team2 = session.teams.all[<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamNameFrom = team1.teamName;<br>    req.teamNameTo = team2.teamName;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_IN_USE);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "16514b47-adc6-48a0-b274-1539cf339d01",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team name change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.hostId = hostId;<br>    req.teamNameFrom = team.teamName;<br>    req.teamNameTo = <span class=\"hljs-string\">'some new name'</span>;<br>    hc.emit(messageConstants.HOST_TEAM_NAME_UPDATE_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "d66855f5-9285-4025-8600-03ca4d4deb8a",
      "parentUUID": "a1531d52-c0fe-4f8a-b766-c6a622ee0456",
      "skipped": false
    },
    {
      "title": "should allow it when request is valid",
      "fullTitle": "team leader change should allow it when request is valid",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.not.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "6d2adde6-31f6-4fbe-a674-8101923807bc",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should allow it team leader is the same",
      "fullTitle": "team leader change should allow it team leader is the same",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> teamLeaderUsername = team.teamLeader.username;<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(m,<br>                        messageConstants.SUCCESS);<br>                    sm.should.not.be.null();<br>                    team.teamLeader.username.should.equal(<br>                        teamLeaderUsername);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "8d94b0dd-8641-49ac-8906-7b35c5bc2bdb",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "team leader change should not allow it when session is completed",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "c6955067-bd8f-4987-91bc-fc2c58c4ce4f",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "team leader change should not allow it when not the host",
      "timedOut": false,
      "duration": 48,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = idUtility.generateParticipantId();<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "dcfad95c-2da5-4cd5-9b33-742e1421eb61",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it team does not exist",
      "fullTitle": "team leader change should not allow it team does not exist",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = <span class=\"hljs-string\">'does not exist team name'</span>;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_TEAM_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5f8651c2-44d5-4ee6-ab06-0eff2eb07dfd",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "team leader change should not allow it when session does not exist",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = idUtility.generateSessionId();<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = team.teamLeader.username ===<br>                <span class=\"hljs-string\">'c1'</span> ? <span class=\"hljs-string\">'c2'</span> : <span class=\"hljs-string\">'c1'</span>;<br>            session.complete();<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5623a3cb-f5eb-4753-b13e-5c557af6c4e5",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when contestant does not exist",
      "fullTitle": "team leader change should not allow it when contestant does not exist",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> c1 = helper.createClient();<br>    <span class=\"hljs-keyword\">var</span> c2 = helper.createClient();<br>    helper.contestantJoin(c1, <span class=\"hljs-string\">'c1'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>        helper.contestantJoin(c2, <span class=\"hljs-string\">'c2'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>            <span class=\"hljs-keyword\">var</span> team = session.teams.all[<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE);<br>            req.sessionId = sessionId;<br>            req.hostId = hostId;<br>            req.teamName = team.teamName;<br>            req.teamLeaderUsername = <span class=\"hljs-string\">'does not exist'</span>;<br>            hc.emit(messageConstants.HOST_TEAM_LEADER_SET_REQUEST_MESSAGE,<br>                req,<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>                    <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m,<br>                        messageConstants.ERROR);<br>                    em.should.not.be.null();<br>                    em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_NOT_FOUND);<br>                    done();<br>                });<br>        });<br>    });<br>});",
      "isRoot": false,
      "uuid": "5159c5ec-8e8c-4ff8-bdd8-e7475c82499d",
      "parentUUID": "02cbf435-fe12-44e2-897b-9b7a731e8c23",
      "skipped": false
    },
    {
      "title": "should not allow it when session is completed",
      "fullTitle": "settings update should not allow it when session is completed",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "e6c3ed62-769c-423b-8362-f556aa70d3cb",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should not allow it when not the host",
      "fullTitle": "settings update should not allow it when not the host",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = idUtility.generateParticipantId();<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_ACCEPT_REQUEST_NOT_HOST);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9ae2f3fc-cd77-4bae-a729-e46bca416c7a",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should not allow it when session does not exist",
      "fullTitle": "settings update should not allow it when session does not exist",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "88853d82-51be-40fd-83e6-7da7fe454c36",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the session name",
      "fullTitle": "settings update should update the session name",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "f21cf295-9739-4314-a8f7-1c79dd3fa7d2",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the max contestants",
      "fullTitle": "settings update should update the max contestants",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "04fdbd4b-d85e-4fb2-9741-137751c71732",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the max teams",
      "fullTitle": "settings update should update the max teams",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "27b5a107-05ef-4c5b-bcc7-632053ca2e17",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the team size",
      "fullTitle": "settings update should update the team size",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "152f1f8d-3648-44f0-94c6-df3a7e334909",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the session name, max teams and team size",
      "fullTitle": "settings update should update the session name, max teams and team size",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.teamSize = <span class=\"hljs-number\">6</span>;<br>    req.maxTeams = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.teamSize.should.equal(<span class=\"hljs-number\">6</span>);<br>        session.settings.maxTeams.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "239cf5b6-7aa8-49c8-9c52-a52bb7de2355",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should update the session name and max contestants",
      "fullTitle": "settings update should update the session name and max contestants",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'Test session'</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.hostId = hostId;<br>    req.sessionName = <span class=\"hljs-string\">'Test session X'</span>;<br>    req.maxContestants = <span class=\"hljs-number\">6</span>;<br>    hc.emit(messageConstants.HOST_SETTINGS_UPDATE_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> sm = messageFactory.restore(rm, messageConstants.SUCCESS);<br>        sm.should.not.be.null();<br>        <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>        session.settings.sessionName.should.be.equal(<span class=\"hljs-string\">'Test session X'</span>);<br>        session.settings.maxContestants.should.equal(<span class=\"hljs-number\">6</span>);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "a74081d7-84b7-4dba-ac63-481016e184c2",
      "parentUUID": "bdf6b7ce-8e31-43d0-9198-d3de91a733ab",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).not.be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.false();<br>        should(irm.info.isHost).be.true();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cb748c36-3d7d-4f8a-9bd6-3f091d2e58e9",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    req.participantId = hostId;<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "cf03caaa-19ff-4c7a-815d-0572ff786bbe",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should not allow when contestant does not exist",
      "fullTitle": "info request should not allow when contestant does not exist",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = idUtility.generateParticipantId();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.COULD_NOT_PROCESS_REQUEST_CONTESTANT_OR_HOST_NOT_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "418b36b6-02d4-4ae5-89fd-06eb6d455423",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 21,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> hostId = rm.hostId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    req.participantId = hostId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    hc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bbb0d3b0-4078-4e86-bfd2-0ccdbab1c603",
      "parentUUID": "72a3a404-cbd3-49f0-b607-7eb3ee1d7fd2",
      "skipped": false
    },
    {
      "title": "should update observers",
      "fullTitle": "on disconnect should update observers",
      "timedOut": false,
      "duration": 29,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>    helper.contestantJoin(c, <span class=\"hljs-string\">'test user'</span>, sessionId, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-comment\">// listen for observer update</span><br>        c.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>            <span class=\"hljs-keyword\">var</span> om = messageFactory.restore(m, messageConstants.OBSERVER_UPDATE);<br>            <span class=\"hljs-keyword\">if</span> (om.gameState.host.disconnected) {<br>                done();<br>                c.discount();<br>            }<br>        });<br>        helper.clients = [];<br>        <span class=\"hljs-comment\">// disconnect host</span><br>        hc.disconnect();<br>    });<br>});",
      "isRoot": false,
      "uuid": "b810fc55-1546-4faf-a4d6-47f28b1d2576",
      "parentUUID": "456fa796-b990-4753-acc6-6dca0e83c9d1",
      "skipped": false
    },
    {
      "title": "should allow when request is valid and subscribe observer to the observer room",
      "fullTitle": "rejoin should allow when request is valid and subscribe observer to the observer room",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = rm.sessionId;<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    <span class=\"hljs-comment\">// listen for observer update</span><br>    oc.on(messageConstants.OBSERVER_UPDATE, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">message</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> ob = messageFactory.restore(message, messageConstants.OBSERVER_UPDATE);<br>        ob.should.not.be.null();<br>        done();<br>    });<br>    oc.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>        data.type.should.equal(messageConstants.SUCCESS);<br>        <span class=\"hljs-comment\">// force observer update</span><br>        helper.forceObserveUpdate(rm.sessionId);<br>    });<br>});",
      "isRoot": false,
      "uuid": "561d1d27-dab0-4fa3-85a5-98aa990a2a00",
      "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "rejoin should not allow when session does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bb5f9715-0f4e-415a-8ae2-f2c5690eee2c",
      "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
      "skipped": false
    },
    {
      "title": "should not allow when session is completed",
      "fullTitle": "rejoin should not allow when session is completed",
      "timedOut": false,
      "duration": 42,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> c = helper.createClient();<br>helper.createSession(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> ob = helper.createClient();<br>    helper.getLatestSession().complete();<br>    <span class=\"hljs-comment\">// rejoin</span><br>    <span class=\"hljs-keyword\">var</span> rjm = messageFactory.create(messageConstants.REJOIN_SESSION);<br>    rjm.sessionId = idUtility.generateSessionId();<br>    rjm.rejoinAs = constants.rejoinAs.OBSERVER;<br>    ob.emit(messageConstants.REJOIN_SESSION, rjm, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">m</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(m, messageConstants.ERROR);<br>        em.should.not.be.null();<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND_OR_IS_COMPLETED);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "bb6b17f8-7382-4777-90e4-57f296482e66",
      "parentUUID": "06344c90-9581-48a6-8a9f-aab81dd37ab0",
      "skipped": false
    },
    {
      "title": "should return in a valid state for individuals contestant",
      "fullTitle": "info request should return in a valid state for individuals contestant",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        should(irm.info).not.be.null();<br>        should(irm.info.host).be.null();<br>        should(irm.info.contestant).be.null();<br>        should(irm.info.team).be.null();<br>        should(irm.info.session).not.be.null();<br>        should(irm.info.sessionState).be.equal(<span class=\"hljs-string\">'ready'</span>);<br>        should(irm.info.isObserver).be.true();<br>        should(irm.info.isHost).be.false();<br>        should(irm.info.isContestant).be.false();<br>        should(irm.info.isSessionCompleted).be.false();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "2c726650-ea06-4cb4-8e2c-0da0dbe75c7d",
      "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
      "skipped": false
    },
    {
      "title": "should not allow when session does not exist",
      "fullTitle": "info request should not allow when session does not exist",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = idUtility.generateSessionId();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> em = messageFactory.restore(rm, messageConstants.ERROR);<br>        em.error.should.equal(constants.messages.SESSION_COULD_NOT_BE_FOUND);<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9f1e0cc5-410c-4421-b9d6-4ea065a66668",
      "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
      "skipped": false
    },
    {
      "title": "should allow when session is complete",
      "fullTitle": "info request should allow when session is complete",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> hc = helper.createClient();<br>helper.createSession(hc, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> sessionId = rm.sessionId;<br>    <span class=\"hljs-keyword\">var</span> req = messageFactory.create(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE);<br>    req.sessionId = sessionId;<br>    <span class=\"hljs-keyword\">var</span> session = helper.getLatestSession();<br>    session.complete();<br>    <span class=\"hljs-keyword\">var</span> oc = helper.createClient();<br>    oc.emit(messageConstants.SESSION_INFORMATION_REQUEST_MESSAGE, req, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rm</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> irm = messageFactory.restore(rm, messageConstants.SESSION_INFORMATION_RESPONSE_MESSAGE);<br>        irm.should.not.be.null();<br>        done();<br>    });<br>});",
      "isRoot": false,
      "uuid": "9876e3aa-6e8d-4497-9b34-4f5b140e2b64",
      "parentUUID": "33d5b1e6-29a1-4831-9ac3-6fed5c1b8121",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}